/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const MSG_NOERROR: u32 = 4096;
pub const MSG_STAT: u32 = 11;
pub const MSG_INFO: u32 = 12;
pub const MSG_REQUEST: u32 = 2147483647;
pub const MSG_XREQUEST: u32 = 2080374784;
pub const MSG_LAUNCH_APP: u32 = 2113929216;
pub const MSG_OK: u32 = 1;
pub const MSG_ERROR: u32 = 0;
pub const MSG_FORMAT: u32 = 257;
pub const MSG_SETTIME: u32 = 258;
pub const MSG_SETPROFILE: u32 = 259;
pub const MSG_PWENCRYPT: u32 = 260;
pub const MSG_PWDECRYPT: u32 = 261;
pub const MSG_RESTART: u32 = 262;
pub const MSG_REMOUNTFS: u32 = 263;
pub const MSG_WRITELOGO: u32 = 264;
pub const MSG_RESTORELOGO: u32 = 265;
pub const MSG_SUSPEND: u32 = 266;
pub const MSG_IOC_ENCRYPT: u32 = 267;
pub const MSG_IOC_DECRYPT: u32 = 268;
pub const MSG_REG_CHECK: u32 = 269;
pub const MSG_REG_WRITE: u32 = 270;
pub const MSG_GETSERIAL: u32 = 271;
pub const MSG_REBOOT: u32 = 272;
pub const MSG_REBOOT_AND_UPDATE: u32 = 273;
pub const MSG_TIMESTAMP: u32 = 274;
pub const MSG_UPDATESTATUS: u32 = 275;
pub const MSG_GSENSOR_MODE: u32 = 276;
pub const MSG_CONFIG_CHANGED: u32 = 278;
pub const MSG_SET_LED: u32 = 279;
pub const MSG_ENCRYPT_MEM: u32 = 280;
pub const MSG_DECRYPT_MEM: u32 = 281;
pub const MSG_GETDEVICEID: u32 = 282;
pub const MSG_SETFRONTLIGHT: u32 = 283;
pub const MSG_ACTUALIZEFRONTLIGHT: u32 = 284;
pub const MSG_UPDATE_SERVICE_STATUSES: u32 = 285;
pub const MSG_FACTORY_RESET: u32 = 286;
pub const MSG_SETTIME_FROM_NTP: u32 = 287;
pub const MSG_GET_IS_TIME_MONOTONIC_AFTER_LAST_NTP_SYNC: u32 = 288;
pub const MSG_GET_PARTNER_ID: u32 = 289;
pub const MSG_UPDATE_PARTNER_ID: u32 = 290;
pub const MSG_BAN_SUSPEND: u32 = 291;
pub const MSG_BACKUP: u32 = 292;
pub const MSG_RESTORE: u32 = 293;
pub const MSG_CALIBRATE_TP: u32 = 294;
pub const MSG_DROP_CACHES: u32 = 295;
pub const MSG_SHARE_DEVICE_CFG: u32 = 296;
pub const MSG_WRITE_LOW_POWER_LOGO: u32 = 297;
pub const MSG_DOSFSCK: u32 = 298;
pub const MSG_FBINFO: u32 = 513;
pub const MSG_ORIENTATION: u32 = 514;
pub const MSG_UPDPARTIAL: u32 = 515;
pub const MSG_UPDDYNAMIC: u32 = 516;
pub const MSG_UPDFULL: u32 = 517;
pub const MSG_EINKPM: u32 = 518;
pub const MSG_EINKTEMP: u32 = 519;
pub const MSG_AUDIO_STATUS: u32 = 768;
pub const MSG_AUDIO_RECONFIGURE: u32 = 769;
pub const MSG_TASK_REGISTER: u32 = 1281;
pub const MSG_TASK_NEWSUBTASK: u32 = 1282;
pub const MSG_TASK_SWITCHSUBTASK: u32 = 1283;
pub const MSG_TASK_ENDSUBTASK: u32 = 1284;
pub const MSG_TASK_SETPARAMETERS: u32 = 1285;
pub const MSG_TASK_SETSUBTASKINFO: u32 = 1286;
pub const MSG_TASK_FOREGROUND: u32 = 1287;
pub const MSG_TASK_BACKGROUND: u32 = 1288;
pub const MSG_TASK_CLOSE: u32 = 1289;
pub const MSG_TASK_LIST: u32 = 1290;
pub const MSG_TASK_PREVIOUS: u32 = 1291;
pub const MSG_TASK_INFO: u32 = 1292;
pub const MSG_TASK_SENDEVENT: u32 = 1293;
pub const MSG_TASK_SENDREQUEST: u32 = 1294;
pub const MSG_TASK_ADDREQLISTENER: u32 = 1296;
pub const MSG_TASK_DELREQLISTENER: u32 = 1297;
pub const MSG_TASK_GLOBALREQUEST: u32 = 1298;
pub const MSG_TASK_SENDEVENTSYNC: u32 = 1299;
pub const MSG_TASK_INITIALIZED: u32 = 1300;
pub const MSG_TASK_PREVIOUS_INSTACK: u32 = 1301;
pub const MSG_TASK_COPY_ACTIVE_FB: u32 = 1302;
pub const MSG_TASK_SEND_REQUEST_NOWAIT: u32 = 1303;
pub const MSG_START_SERVICES: u32 = 1536;
pub const MSG_LAST_OPEN_OPENED: u32 = 1537;
pub const MSG_DEVICEKEY: u32 = 181452289;
pub const MSG_RESETKEY: u32 = 181452290;
pub const EVT_INIT: u32 = 21;
pub const EVT_EXIT: u32 = 22;
pub const EVT_SHOW: u32 = 23;
pub const EVT_HIDE: u32 = 24;
pub const EVT_KEYDOWN: u32 = 25;
pub const EVT_KEYPRESS: u32 = 25;
pub const EVT_KEYUP: u32 = 26;
pub const EVT_KEYRELEASE: u32 = 26;
pub const EVT_KEYREPEAT: u32 = 28;
pub const EVT_KEYPRESS_EXT: u32 = 40;
pub const EVT_KEYRELEASE_EXT: u32 = 41;
pub const EVT_KEYREPEAT_EXT: u32 = 42;
pub const EVT_POINTERUP: u32 = 29;
pub const EVT_POINTERDOWN: u32 = 30;
pub const EVT_POINTERMOVE: u32 = 31;
pub const EVT_SCROLL: u32 = 33;
pub const EVT_POINTERLONG: u32 = 34;
pub const EVT_POINTERHOLD: u32 = 35;
pub const EVT_POINTERDRAG: u32 = 44;
pub const EVT_POINTERCANCEL: u32 = 45;
pub const EVT_POINTERCHANGED: u32 = 46;
pub const EVT_ORIENTATION: u32 = 32;
pub const EVT_FOCUS: u32 = 36;
pub const EVT_UNFOCUS: u32 = 37;
pub const EVT_ACTIVATE: u32 = 38;
pub const EVT_MTSYNC: u32 = 39;
pub const EVT_TOUCHUP: u32 = 47;
pub const EVT_TOUCHDOWN: u32 = 48;
pub const EVT_TOUCHMOVE: u32 = 49;
pub const EVT_REPAINT: u32 = 43;
pub const EVT_QN_MOVE: u32 = 51;
pub const EVT_QN_RELEASE: u32 = 52;
pub const EVT_QN_BORDER: u32 = 53;
pub const EVT_SNAPSHOT: u32 = 71;
pub const EVT_FSINCOMING: u32 = 72;
pub const EVT_FSCHANGED: u32 = 73;
pub const EVT_MP_STATECHANGED: u32 = 81;
pub const EVT_MP_TRACKCHANGED: u32 = 82;
pub const EVT_PREVPAGE: u32 = 91;
pub const EVT_NEXTPAGE: u32 = 92;
pub const EVT_OPENDIC: u32 = 93;
pub const EVT_CONTROL_PANEL_ABOUT_TO_OPEN: u32 = 94;
pub const EVT_UPDATE: u32 = 95;
pub const EVT_PANEL_BLUETOOTH_A2DP: u32 = 118;
pub const EVT_TAB: u32 = 119;
pub const EVT_PANEL: u32 = 120;
pub const EVT_PANEL_ICON: u32 = 121;
pub const EVT_PANEL_TEXT: u32 = 122;
pub const EVT_PANEL_PROGRESS: u32 = 123;
pub const EVT_PANEL_MPLAYER: u32 = 124;
pub const EVT_PANEL_USBDRIVE: u32 = 125;
pub const EVT_PANEL_NETWORK: u32 = 126;
pub const EVT_PANEL_CLOCK: u32 = 127;
pub const EVT_PANEL_BLUETOOTH: u32 = 128;
pub const EVT_PANEL_TASKLIST: u32 = 129;
pub const EVT_PANEL_OBREEY_SYNC: u32 = 130;
pub const EVT_PANEL_SETREADINGMODE: u32 = 131;
pub const EVT_PANEL_SETREADINGMODE_INVERT: u32 = 132;
pub const EVT_PANEL_FRONT_LIGHT: u32 = 133;
pub const EVT_GLOBALREQUEST: u32 = 149;
pub const EVT_GLOBALACTION: u32 = 150;
pub const EVT_FOREGROUND: u32 = 151;
pub const EVT_BACKGROUND: u32 = 152;
pub const EVT_SUBTASKCLOSE: u32 = 153;
pub const EVT_CONFIGCHANGED: u32 = 154;
pub const EVT_SAVESTATE: u32 = 155;
pub const EVT_OBREEY_CONFIG_CHANGED: u32 = 156;
pub const EVT_SDIN: u32 = 161;
pub const EVT_SDOUT: u32 = 162;
pub const EVT_USBSTORE_IN: u32 = 163;
pub const EVT_USBSTORE_OUT: u32 = 164;
pub const EVT_BT_RXCOMPLETE: u32 = 171;
pub const EVT_BT_TXCOMPLETE: u32 = 172;
pub const EVT_SYNTH_ENDED: u32 = 200;
pub const EVT_DIC_CLOSED: u32 = 201;
pub const EVT_SHOW_KEYBOARD: u32 = 202;
pub const EVT_TEXTCLEAR: u32 = 209;
pub const EVT_EXT_KB: u32 = 210;
pub const EVT_LETTER: u32 = 211;
pub const EVT_CALLBACK: u32 = 212;
pub const EVT_SCANPROGRESS: u32 = 213;
pub const EVT_STOPSCAN: u32 = 214;
pub const EVT_STARTSCAN: u32 = 215;
pub const EVT_SCANSTOPPED: u32 = 216;
pub const EVT_POSTPONE_TIMED_POWEROFF: u32 = 217;
pub const EVT_FRAME_ACTIVATED: u32 = 218;
pub const EVT_FRAME_DEACTIVATED: u32 = 219;
pub const EVT_READ_PROGRESS_CHANGED: u32 = 220;
pub const EVT_DUMP_BITMAPS_DEBUG_INFO: u32 = 221;
pub const EVT_NET_CONNECTED: u32 = 256;
pub const EVT_NET_DISCONNECTED: u32 = 257;
pub const EVT_NET_FOUND_NEW_FW: u32 = 260;
pub const EVT_SYNTH_POSITION: u32 = 261;
pub const EVT_ASYNC_TASK_FINISHED: u32 = 262;
pub const EVT_STOP_PLAYING: u32 = 263;
pub const EVT_AVRCP_COMMAND: u32 = 264;
pub const EVT_AUDIO_CHANGED: u32 = 265;
pub const EVT_PACKAGE_JOB_CHANGED: u32 = 266;
pub const EVT_CUSTOM: u32 = 267;
pub type __quad_t = ::std::os::raw::c_longlong;
pub type __u_quad_t = ::std::os::raw::c_ulonglong;
pub type __dev_t = __u_quad_t;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = __quad_t;
pub type __pid_t = ::std::os::raw::c_int;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_marker> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        12usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        4usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sbuf) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        152usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type mode_t = __mode_t;
pub type pid_t = __pid_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        8usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        44usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub __pad1: ::std::os::raw::c_ushort,
    pub st_ino: __ino_t,
    pub st_mode: __mode_t,
    pub st_nlink: __nlink_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub st_rdev: __dev_t,
    pub __pad2: ::std::os::raw::c_ushort,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved4: ::std::os::raw::c_ulong,
    pub __glibc_reserved5: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        88usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved4) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved5) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved5)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        268usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        4usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
pub type z_crc_t = ::std::os::raw::c_uint;
pub const input_dev_e_DEV_UNKNOWN: input_dev_e = 0;
pub const input_dev_e_TP_CAPACITIVE: input_dev_e = 1;
pub const input_dev_e_TP_DIGITIZER: input_dev_e = 2;
pub const input_dev_e_MAX_INPUT_TOUCH_DEV: input_dev_e = 3;
pub const input_dev_e_INPUT_DEV_KEYBOARD_HW: input_dev_e = 4;
pub const input_dev_e_INPUT_DEV_KEYBOARD_BT: input_dev_e = 5;
pub const input_dev_e_INPUT_DEV_KEYBOARD_USB: input_dev_e = 6;
pub type input_dev_e = ::std::os::raw::c_uint;
pub const keymap_e_KEYMAP_GLOBAL: keymap_e = 0;
pub const keymap_e_KEYMAP_TXT: keymap_e = 1;
pub const keymap_e_KEYMAP_PDF: keymap_e = 2;
pub type keymap_e = ::std::os::raw::c_uint;
pub use self::keymap_e as keymap_t;
pub const WIFI_SECURITY_NO: WIFI_SECURITY = 0;
pub const WIFI_SECURITY_WEP: WIFI_SECURITY = 1;
pub const WIFI_SECURITY_WPAEAP: WIFI_SECURITY = 2;
pub const WIFI_SECURITY_WPAPSK: WIFI_SECURITY = 3;
pub type WIFI_SECURITY = ::std::os::raw::c_uint;
pub const NET_STATE_NET_STATE_UNKNOWN: NET_STATE = -1;
pub const NET_STATE_DISCONNECTED: NET_STATE = 0;
pub const NET_STATE_CONNECTING: NET_STATE = 1;
pub const NET_STATE_CONNECTED: NET_STATE = 2;
pub type NET_STATE = ::std::os::raw::c_int;
pub const FONT_TYPE_FONT_STD: FONT_TYPE = 0;
pub const FONT_TYPE_FONT_BOLD: FONT_TYPE = 1;
pub const FONT_TYPE_FONT_ITALIC: FONT_TYPE = 2;
pub const FONT_TYPE_FONT_BOLDITALIC: FONT_TYPE = 3;
pub const FONT_TYPE_FONT_MONO: FONT_TYPE = 4;
pub const FONT_TYPE_FONT_FAMILY: FONT_TYPE = 5;
pub type FONT_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irect_s {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_irect_s() {
    const UNINIT: ::std::mem::MaybeUninit<irect_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irect_s>(),
        20usize,
        concat!("Size of: ", stringify!(irect_s))
    );
    assert_eq!(
        ::std::mem::align_of::<irect_s>(),
        4usize,
        concat!("Alignment of ", stringify!(irect_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(flags)
        )
    );
}
pub type irect = irect_s;
#[repr(C)]
#[derive(Debug)]
pub struct ibitmap_s {
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
    pub depth: ::std::os::raw::c_ushort,
    pub scanline: ::std::os::raw::c_ushort,
    pub data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_ibitmap_s() {
    const UNINIT: ::std::mem::MaybeUninit<ibitmap_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibitmap_s>(),
        8usize,
        concat!("Size of: ", stringify!(ibitmap_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ibitmap_s>(),
        2usize,
        concat!("Alignment of ", stringify!(ibitmap_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(data)
        )
    );
}
pub type ibitmap = ibitmap_s;
#[doc = " Struct wich can be used for function OpenControlPanel\n currently is a stub,\n @see OpenControlPanel(control_panel*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct control_panel_s {
    #[doc = "< is a SET of flags, currently not used"]
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_control_panel_s() {
    const UNINIT: ::std::mem::MaybeUninit<control_panel_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<control_panel_s>(),
        4usize,
        concat!("Size of: ", stringify!(control_panel_s))
    );
    assert_eq!(
        ::std::mem::align_of::<control_panel_s>(),
        4usize,
        concat!("Alignment of ", stringify!(control_panel_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(control_panel_s),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " Struct wich can be used for function OpenControlPanel\n currently is a stub,\n @see OpenControlPanel(control_panel*)"]
pub type control_panel = control_panel_s;
pub type iv_handler = ::std::option::Option<
    unsafe extern "C" fn(
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_menuhandler = ::std::option::Option<unsafe extern "C" fn(index: ::std::os::raw::c_int)>;
pub type iv_keyboardhandler =
    ::std::option::Option<unsafe extern "C" fn(text: *mut ::std::os::raw::c_char)>;
pub type iv_keyboardhandlerex = ::std::option::Option<
    unsafe extern "C" fn(text: *mut ::std::os::raw::c_char, data: *mut ::std::os::raw::c_void),
>;
pub type iv_dialoghandler =
    ::std::option::Option<unsafe extern "C" fn(button: ::std::os::raw::c_int)>;
pub type iv_timeedithandler =
    ::std::option::Option<unsafe extern "C" fn(newtime: ::std::os::raw::c_long)>;
pub type iv_fontselecthandler = ::std::option::Option<
    unsafe extern "C" fn(
        fontr: *mut ::std::os::raw::c_char,
        fontb: *mut ::std::os::raw::c_char,
        fonti: *mut ::std::os::raw::c_char,
        fontbi: *mut ::std::os::raw::c_char,
    ),
>;
pub type iv_dirselecthandler =
    ::std::option::Option<unsafe extern "C" fn(path: *mut ::std::os::raw::c_char)>;
pub type iv_confighandler = ::std::option::Option<unsafe extern "C" fn()>;
pub type iv_itemchangehandler =
    ::std::option::Option<unsafe extern "C" fn(name: *mut ::std::os::raw::c_char)>;
pub type iv_pageselecthandler =
    ::std::option::Option<unsafe extern "C" fn(page: ::std::os::raw::c_int)>;
pub type iv_bmkhandler = ::std::option::Option<
    unsafe extern "C" fn(
        action: ::std::os::raw::c_int,
        page: ::std::os::raw::c_int,
        position: ::std::os::raw::c_longlong,
    ),
>;
pub type iv_listhandler = ::std::option::Option<
    unsafe extern "C" fn(
        action: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_rotatehandler =
    ::std::option::Option<unsafe extern "C" fn(direction: ::std::os::raw::c_int)>;
pub type iv_msghandler = ::std::option::Option<
    unsafe extern "C" fn(
        task: ::std::os::raw::c_int,
        message: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_hashaddproc = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type iv_hashdelproc =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
pub type iv_panelupdateshandler = ::std::option::Option<
    unsafe extern "C" fn(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ihash_item_s {
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut ihash_item_s,
}
#[test]
fn bindgen_test_layout_ihash_item_s() {
    const UNINIT: ::std::mem::MaybeUninit<ihash_item_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ihash_item_s>(),
        12usize,
        concat!("Size of: ", stringify!(ihash_item_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ihash_item_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ihash_item_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_item_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_item_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_item_s),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ihash_s {
    pub prime: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub addproc: iv_hashaddproc,
    pub delproc: iv_hashdelproc,
    pub items: *mut *mut ihash_item_s,
}
#[test]
fn bindgen_test_layout_ihash_s() {
    const UNINIT: ::std::mem::MaybeUninit<ihash_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ihash_s>(),
        20usize,
        concat!("Size of: ", stringify!(ihash_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ihash_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ihash_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(prime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addproc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(addproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delproc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(delproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(items)
        )
    );
}
pub type ihash = ihash_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifont_s {
    pub name: *mut ::std::os::raw::c_char,
    pub family: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_int,
    pub aa: ::std::os::raw::c_uchar,
    pub isbold: ::std::os::raw::c_uchar,
    pub isitalic: ::std::os::raw::c_uchar,
    pub _r1: ::std::os::raw::c_uchar,
    pub charset: ::std::os::raw::c_ushort,
    pub _r2: ::std::os::raw::c_ushort,
    pub color: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub linespacing: ::std::os::raw::c_int,
    pub baseline: ::std::os::raw::c_int,
    pub fdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ifont_s() {
    const UNINIT: ::std::mem::MaybeUninit<ifont_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifont_s>(),
        40usize,
        concat!("Size of: ", stringify!(ifont_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ifont_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ifont_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aa) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(aa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isbold) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(isbold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isitalic) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(isitalic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r1) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(_r1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(charset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r2) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(_r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linespacing) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(linespacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(baseline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdata) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(fdata)
        )
    );
}
pub type ifont = ifont_s;
pub const FONT_MENU_FLAGS_FM_SHOW_SIZE: FONT_MENU_FLAGS = 1;
pub type FONT_MENU_FLAGS = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iuser_font_s {
    pub show_font_name: *mut ::std::os::raw::c_char,
    pub real_font_name: *mut ::std::os::raw::c_char,
    pub font: *mut ifont,
}
#[test]
fn bindgen_test_layout_iuser_font_s() {
    const UNINIT: ::std::mem::MaybeUninit<iuser_font_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iuser_font_s>(),
        12usize,
        concat!("Size of: ", stringify!(iuser_font_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iuser_font_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iuser_font_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_font_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iuser_font_s),
            "::",
            stringify!(show_font_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real_font_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iuser_font_s),
            "::",
            stringify!(real_font_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iuser_font_s),
            "::",
            stringify!(font)
        )
    );
}
pub type iuser_font = iuser_font_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifont_list_s {
    pub list: *mut iuser_font,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ifont_list_s() {
    const UNINIT: ::std::mem::MaybeUninit<ifont_list_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifont_list_s>(),
        8usize,
        concat!("Size of: ", stringify!(ifont_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ifont_list_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ifont_list_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_list_s),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_list_s),
            "::",
            stringify!(count)
        )
    );
}
pub type ifont_list = ifont_list_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifont_menu_s {
    pub menu_title: *mut ::std::os::raw::c_char,
    pub current_font: *mut ::std::os::raw::c_char,
    pub flags: FONT_MENU_FLAGS,
    pub hproc: iv_fontselecthandler,
    pub user_fonts: *mut ifont_list,
}
#[test]
fn bindgen_test_layout_ifont_menu_s() {
    const UNINIT: ::std::mem::MaybeUninit<ifont_menu_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifont_menu_s>(),
        20usize,
        concat!("Size of: ", stringify!(ifont_menu_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ifont_menu_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ifont_menu_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menu_title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(menu_title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_font) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(current_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hproc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(hproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_fonts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(user_fonts)
        )
    );
}
pub type ifont_menu = ifont_menu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imenu_s {
    pub type_: ::std::os::raw::c_short,
    pub index: ::std::os::raw::c_short,
    pub text: *mut ::std::os::raw::c_char,
    pub submenu: *mut imenu_s,
}
#[test]
fn bindgen_test_layout_imenu_s() {
    const UNINIT: ::std::mem::MaybeUninit<imenu_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imenu_s>(),
        12usize,
        concat!("Size of: ", stringify!(imenu_s))
    );
    assert_eq!(
        ::std::mem::align_of::<imenu_s>(),
        4usize,
        concat!("Alignment of ", stringify!(imenu_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imenu_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(imenu_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(imenu_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submenu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imenu_s),
            "::",
            stringify!(submenu)
        )
    );
}
pub type imenu = imenu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imenuex_s {
    pub type_: ::std::os::raw::c_short,
    pub index: ::std::os::raw::c_short,
    pub text: *mut ::std::os::raw::c_char,
    pub submenu: *mut imenuex_s,
    pub icon: *mut ibitmap,
    pub reserved: *mut ::std::os::raw::c_void,
    pub font: *const ifont,
}
#[test]
fn bindgen_test_layout_imenuex_s() {
    const UNINIT: ::std::mem::MaybeUninit<imenuex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imenuex_s>(),
        24usize,
        concat!("Size of: ", stringify!(imenuex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<imenuex_s>(),
        4usize,
        concat!("Alignment of ", stringify!(imenuex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submenu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(submenu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(font)
        )
    );
}
pub type imenuex = imenuex_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icanvas_s {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub scanline: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub clipx1: ::std::os::raw::c_int,
    pub clipx2: ::std::os::raw::c_int,
    pub clipy1: ::std::os::raw::c_int,
    pub clipy2: ::std::os::raw::c_int,
    pub addr: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_icanvas_s() {
    const UNINIT: ::std::mem::MaybeUninit<icanvas_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icanvas_s>(),
        36usize,
        concat!("Size of: ", stringify!(icanvas_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icanvas_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icanvas_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipx1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(clipx1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipx2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(clipx2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipy1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(clipy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipy2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(clipy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(addr)
        )
    );
}
pub type icanvas = icanvas_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icontext_menu_properties_s {
    pub font_normal: *mut ifont,
    pub font_selected: *mut ifont,
    pub font_disabled: *mut ifont,
    pub background_color_normal: ::std::os::raw::c_int,
    pub background_color_disabled: ::std::os::raw::c_int,
    pub blackout: ::std::os::raw::c_int,
    pub item_height: ::std::os::raw::c_int,
    pub item_border_indent_horizontal: ::std::os::raw::c_int,
    pub separator_indent_horizontal: ::std::os::raw::c_int,
    pub separator_indent_vertical: ::std::os::raw::c_int,
    pub separator_height: ::std::os::raw::c_int,
    pub separator_style: ::std::os::raw::c_int,
    pub separator_color: ::std::os::raw::c_int,
    pub separator_frequency: ::std::os::raw::c_int,
    pub marker_height: ::std::os::raw::c_int,
    pub marker_indent_horizontal: ::std::os::raw::c_int,
    pub marker_style: ::std::os::raw::c_int,
    pub marker_color: ::std::os::raw::c_int,
    pub border_size: ::std::os::raw::c_int,
    pub border_color: ::std::os::raw::c_int,
    pub border_radius: ::std::os::raw::c_int,
    pub title_height: ::std::os::raw::c_int,
    pub enable_pointer: ::std::os::raw::c_int,
    pub font_normal_color: ::std::os::raw::c_int,
    pub font_selected_color: ::std::os::raw::c_int,
    pub font_disabled_color: ::std::os::raw::c_int,
    pub bullet_show: ::std::os::raw::c_int,
    #[doc = " @brief bullet_style - style of bullet element.\n Values:\n 0 - default\n 1 - draw bitmap at all elements\n By default it has been set to zero and it mean that we draw a bullet as a symbol only at one element."]
    pub bullet_style: ::std::os::raw::c_int,
    pub item_border_indent_vertical: ::std::os::raw::c_int,
    pub background_style: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_icontext_menu_properties_s() {
    const UNINIT: ::std::mem::MaybeUninit<icontext_menu_properties_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icontext_menu_properties_s>(),
        120usize,
        concat!("Size of: ", stringify!(icontext_menu_properties_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icontext_menu_properties_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icontext_menu_properties_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_normal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_selected) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_selected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_disabled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_disabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_color_normal) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(background_color_normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_color_disabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(background_color_disabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blackout) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(blackout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item_height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(item_height)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).item_border_indent_horizontal) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(item_border_indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_indent_horizontal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_indent_vertical) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_indent_vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_style) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_color) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_frequency) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(marker_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_indent_horizontal) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(marker_indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_style) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(marker_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_color) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(marker_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(border_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_color) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(border_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_radius) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(border_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_height) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(title_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_pointer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(enable_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_normal_color) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_normal_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_selected_color) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_selected_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_disabled_color) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_disabled_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bullet_show) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(bullet_show)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bullet_style) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(bullet_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item_border_indent_vertical) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(item_border_indent_vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_style) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(background_style)
        )
    );
}
pub type icontext_menu_properties = icontext_menu_properties_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifont_selector_properties {
    pub custom_font_enable: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_ifont_selector_properties() {
    const UNINIT: ::std::mem::MaybeUninit<ifont_selector_properties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifont_selector_properties>(),
        2usize,
        concat!("Size of: ", stringify!(ifont_selector_properties))
    );
    assert_eq!(
        ::std::mem::align_of::<ifont_selector_properties>(),
        2usize,
        concat!("Alignment of ", stringify!(ifont_selector_properties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_font_enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_selector_properties),
            "::",
            stringify!(custom_font_enable)
        )
    );
}
pub type font_selector_properties = ifont_selector_properties;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icontext_menu_s {
    pub id: *const ::std::os::raw::c_char,
    pub hproc: iv_menuhandler,
    pub menuex: *const imenuex,
    pub menu: *const imenu,
    pub pos_selected_item: irect,
    pub pos_menu: irect,
    pub properties: *mut icontext_menu_properties,
    pub active_element: ::std::os::raw::c_int,
    pub enable_pointer: ::std::os::raw::c_short,
    pub enable_aura: ::std::os::raw::c_short,
    pub use_own_font: ::std::os::raw::c_short,
    pub update_after_close: ::std::os::raw::c_short,
    pub only_choise: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_icontext_menu_s() {
    const UNINIT: ::std::mem::MaybeUninit<icontext_menu_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icontext_menu_s>(),
        76usize,
        concat!("Size of: ", stringify!(icontext_menu_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icontext_menu_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icontext_menu_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hproc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(hproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menuex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(menuex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menu) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(menu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_selected_item) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(pos_selected_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_menu) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(pos_menu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_element) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(active_element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_pointer) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(enable_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_aura) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(enable_aura)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_own_font) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(use_own_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update_after_close) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(update_after_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).only_choise) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(only_choise)
        )
    );
}
pub type icontext_menu = icontext_menu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iapp_caption_s {
    pub rect_portrait: irect,
    pub rect_landscape: irect,
    pub font: *mut ifont,
    pub title_height: ::std::os::raw::c_int,
    pub background_color: ::std::os::raw::c_int,
    pub is_active: ::std::os::raw::c_short,
    pub is_uppercase: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iapp_caption_s() {
    const UNINIT: ::std::mem::MaybeUninit<iapp_caption_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iapp_caption_s>(),
        56usize,
        concat!("Size of: ", stringify!(iapp_caption_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iapp_caption_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iapp_caption_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect_portrait) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(rect_portrait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect_landscape) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(rect_landscape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_height) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(title_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_color) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_active) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(is_active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_uppercase) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(is_uppercase)
        )
    );
}
pub type iapp_caption = iapp_caption_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itaskmgr_s {
    pub title_height: ::std::os::raw::c_int,
    pub title_font: *mut ifont,
    pub task_font: *mut ifont,
    pub task_title_font: *mut ifont,
    pub style: ::std::os::raw::c_int,
    pub profile_present: ::std::os::raw::c_int,
    pub profile_height: ::std::os::raw::c_int,
    pub profile_font: *mut ifont,
    pub shortcut_height: ::std::os::raw::c_int,
    pub shortcut_width: ::std::os::raw::c_int,
    pub shortcut_font: *mut ifont,
    pub task_height: ::std::os::raw::c_int,
    pub full_height: ::std::os::raw::c_int,
    pub full_width: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub border_size: ::std::os::raw::c_int,
    pub indent_from_border: ::std::os::raw::c_int,
    pub bitmap: *mut *mut ibitmap,
    pub bitmap_count: ::std::os::raw::c_int,
    pub separator_size: ::std::os::raw::c_int,
    pub exit_button_indent: ::std::os::raw::c_int,
    pub background_style: ::std::os::raw::c_int,
    pub separator_color: ::std::os::raw::c_int,
    pub border_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_itaskmgr_s() {
    const UNINIT: ::std::mem::MaybeUninit<itaskmgr_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itaskmgr_s>(),
        108usize,
        concat!("Size of: ", stringify!(itaskmgr_s))
    );
    assert_eq!(
        ::std::mem::align_of::<itaskmgr_s>(),
        4usize,
        concat!("Alignment of ", stringify!(itaskmgr_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(title_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_font) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(title_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_font) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(task_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_title_font) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(task_title_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_present) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(profile_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(profile_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_font) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(profile_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortcut_height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(shortcut_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortcut_width) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(shortcut_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortcut_font) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(shortcut_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_height) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(task_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(full_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_width) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(full_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(border_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indent_from_border) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(indent_from_border)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmap) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmap_count) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(bitmap_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(separator_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit_button_indent) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(exit_button_indent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_style) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(background_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_color) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(separator_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_color) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(border_color)
        )
    );
}
pub type itaskmgr = itaskmgr_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipager_s {
    pub page_font: *mut ifont,
    pub height: ::std::os::raw::c_int,
    pub indent_horizontal: ::std::os::raw::c_int,
    pub left_width: ::std::os::raw::c_int,
    pub page_width: ::std::os::raw::c_int,
    pub rigth_width: ::std::os::raw::c_int,
    pub separator_size: ::std::os::raw::c_int,
    pub separator_color: ::std::os::raw::c_int,
    pub icon_left: *const ibitmap,
    pub icon_right: *const ibitmap,
    pub current_page: ::std::os::raw::c_int,
    pub total_pages: ::std::os::raw::c_int,
    pub position: irect,
    pub orientation: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ipager_s() {
    const UNINIT: ::std::mem::MaybeUninit<ipager_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipager_s>(),
        72usize,
        concat!("Size of: ", stringify!(ipager_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ipager_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ipager_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_font) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(page_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indent_horizontal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(left_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(page_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rigth_width) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(rigth_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(separator_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_color) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(separator_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon_left) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(icon_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon_right) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(icon_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_page) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(current_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_pages) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(total_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(orientation)
        )
    );
}
pub type ipager = ipager_s;
pub const AppStyles_STYLE_UNKNOWN: AppStyles = 0;
pub const AppStyles_STYLE_KEYBOARD: AppStyles = 1;
pub const AppStyles_STYLE_TOUCHPANEL: AppStyles = 2;
pub const AppStyles_STYLE_TOUCHPANEL_KEYBORAD: AppStyles = 3;
pub const AppStyles_STYLE_MAX_NOT_USED: AppStyles = 4;
pub type AppStyles = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iappstyle_s {
    pub app_style: AppStyles,
}
#[test]
fn bindgen_test_layout_iappstyle_s() {
    const UNINIT: ::std::mem::MaybeUninit<iappstyle_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iappstyle_s>(),
        4usize,
        concat!("Size of: ", stringify!(iappstyle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iappstyle_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iappstyle_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_style) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iappstyle_s),
            "::",
            stringify!(app_style)
        )
    );
}
pub type iappstyle = iappstyle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconfig_s {
    pub filename: *mut ::std::os::raw::c_char,
    pub hash: *mut ihash,
    pub vhash: *mut ihash,
    pub modified_hash: *mut ihash,
    pub deleted_keys: *mut *mut ::std::os::raw::c_char,
    pub changed: ::std::os::raw::c_int,
    pub deleted_keys_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iconfig_s() {
    const UNINIT: ::std::mem::MaybeUninit<iconfig_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iconfig_s>(),
        28usize,
        concat!("Size of: ", stringify!(iconfig_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iconfig_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iconfig_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vhash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(vhash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modified_hash) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(modified_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleted_keys) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(deleted_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleted_keys_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(deleted_keys_size)
        )
    );
}
pub type iconfig = iconfig_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconfigedit_s {
    pub type_: ::std::os::raw::c_int,
    pub icon: *const ibitmap,
    pub text: *mut ::std::os::raw::c_char,
    pub hint: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub deflt: *mut ::std::os::raw::c_char,
    pub variants: *mut *mut ::std::os::raw::c_char,
    pub submenu: *mut iconfigedit_s,
    pub icon_theme: *mut *mut ibitmap,
}
#[test]
fn bindgen_test_layout_iconfigedit_s() {
    const UNINIT: ::std::mem::MaybeUninit<iconfigedit_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iconfigedit_s>(),
        36usize,
        concat!("Size of: ", stringify!(iconfigedit_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iconfigedit_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iconfigedit_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deflt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(deflt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variants) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(variants)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submenu) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(submenu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon_theme) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(icon_theme)
        )
    );
}
pub type iconfigedit = iconfigedit_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iepub3title_s {
    pub title: *mut ::std::os::raw::c_char,
    pub display_seq: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iepub3title_s() {
    const UNINIT: ::std::mem::MaybeUninit<iepub3title_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iepub3title_s>(),
        8usize,
        concat!("Size of: ", stringify!(iepub3title_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iepub3title_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iepub3title_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iepub3title_s),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iepub3title_s),
            "::",
            stringify!(display_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iepub3title_s),
            "::",
            stringify!(type_)
        )
    );
}
pub type iepub3title = iepub3title_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bookinfo_s {
    pub type_: ::std::os::raw::c_int,
    pub typedesc: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub title: *mut ::std::os::raw::c_char,
    pub author: *mut ::std::os::raw::c_char,
    pub series: *mut ::std::os::raw::c_char,
    pub numinseries: ::std::os::raw::c_int,
    pub genre: [*mut ::std::os::raw::c_char; 10usize],
    pub icon: *mut ibitmap,
    pub year: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_long,
    pub ctime: time_t,
    pub isbn: *mut ::std::os::raw::c_char,
    pub meta_id: *mut ::std::os::raw::c_char,
    pub first_author: *mut ::std::os::raw::c_char,
    pub drm: ::std::os::raw::c_int,
    pub annotation: *mut ::std::os::raw::c_char,
    pub lang: *mut ::std::os::raw::c_char,
    pub publisher: *mut ::std::os::raw::c_char,
    pub identifiers: *mut ::std::os::raw::c_char,
    pub contains_notes_export: ::std::os::raw::c_int,
    pub epub3titles: *mut *mut iepub3title,
    pub title_sort: *mut ::std::os::raw::c_char,
    pub author_sort: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bookinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<bookinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bookinfo_s>(),
        140usize,
        concat!("Size of: ", stringify!(bookinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bookinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bookinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typedesc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(typedesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).author) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).series) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numinseries) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(numinseries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genre) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(genre)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isbn) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(isbn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta_id) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(meta_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_author) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(first_author)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drm) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(drm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(annotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lang) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publisher) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(publisher)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifiers) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(identifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contains_notes_export) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(contains_notes_export)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epub3titles) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(epub3titles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_sort) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(title_sort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).author_sort) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(author_sort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(version)
        )
    );
}
pub type bookinfo = bookinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_filetype_s {
    pub extension: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub program: *mut ::std::os::raw::c_char,
    pub icon: *mut ibitmap,
}
#[test]
fn bindgen_test_layout_iv_filetype_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_filetype_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_filetype_s>(),
        20usize,
        concat!("Size of: ", stringify!(iv_filetype_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_filetype_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_filetype_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extension) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).program) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(program)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(icon)
        )
    );
}
pub type iv_filetype = iv_filetype_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_wlist_s {
    pub word: *mut ::std::os::raw::c_char,
    pub x1: ::std::os::raw::c_short,
    pub y1: ::std::os::raw::c_short,
    pub x2: ::std::os::raw::c_short,
    pub y2: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iv_wlist_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_wlist_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_wlist_s>(),
        12usize,
        concat!("Size of: ", stringify!(iv_wlist_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_wlist_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_wlist_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(y2)
        )
    );
}
pub type iv_wlist = iv_wlist_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_sessioninfo_s {
    pub url: *mut ::std::os::raw::c_char,
    pub ctype: *mut ::std::os::raw::c_char,
    pub response: ::std::os::raw::c_long,
    pub length: ::std::os::raw::c_int,
    pub progress: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iv_sessioninfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_sessioninfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_sessioninfo_s>(),
        20usize,
        concat!("Size of: ", stringify!(iv_sessioninfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_sessioninfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_sessioninfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).url) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(url)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(ctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(progress)
        )
    );
}
pub type iv_sessioninfo = iv_sessioninfo_s;
#[repr(C)]
#[derive(Debug)]
pub struct iv_fbinfo_s {
    pub version: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub shmkey: ::std::os::raw::c_int,
    pub shmsize: ::std::os::raw::c_int,
    pub refkey: ::std::os::raw::c_int,
    pub refsize: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub vdepth: ::std::os::raw::c_int,
    pub orientation: ::std::os::raw::c_int,
    pub scanline_portrait: ::std::os::raw::c_int,
    pub scanline_landscape: ::std::os::raw::c_int,
    pub scanline: ::std::os::raw::c_int,
    pub fb_offset: ::std::os::raw::c_int,
    pub fb_size: ::std::os::raw::c_int,
    pub ev_offset: ::std::os::raw::c_int,
    pub ev_size: ::std::os::raw::c_int,
    pub evhead: ::std::os::raw::c_int,
    pub evtail: ::std::os::raw::c_int,
    pub einkversion: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_int; 15usize],
    pub data: __IncompleteArrayField<::std::os::raw::c_uchar>,
    pub fb_y_offset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iv_fbinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_fbinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_fbinfo_s>(),
        144usize,
        concat!("Size of: ", stringify!(iv_fbinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_fbinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_fbinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(shmkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmsize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(shmsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refkey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(refkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refsize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(refsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdepth) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(vdepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline_portrait) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(scanline_portrait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline_landscape) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(scanline_landscape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb_offset) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(fb_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(fb_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ev_offset) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(ev_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ev_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(ev_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evhead) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(evhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evtail) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(evtail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).einkversion) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(einkversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb_y_offset) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(fb_y_offset)
        )
    );
}
pub type iv_fbinfo = iv_fbinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subtaskinfo_s {
    pub id: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub book: *mut ::std::os::raw::c_char,
    pub fgindex: ::std::os::raw::c_int,
    pub order: ::std::os::raw::c_int,
    pub rsv_1s: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_subtaskinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<subtaskinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<subtaskinfo_s>(),
        24usize,
        concat!("Size of: ", stringify!(subtaskinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<subtaskinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(subtaskinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).book) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(book)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fgindex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(fgindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_1s) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(rsv_1s)
        )
    );
}
pub type subtaskinfo = subtaskinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taskinfo_s {
    pub task: ::std::os::raw::c_int,
    pub nsubtasks: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub fbshmkey: ::std::os::raw::c_int,
    pub fbshmsize: ::std::os::raw::c_int,
    pub mainpid: pid_t,
    pub appname: *mut ::std::os::raw::c_char,
    pub icon: *mut ibitmap,
    pub subtasks: *mut subtaskinfo,
    pub fbtempkey: ::std::os::raw::c_int,
    pub rsv_2: ::std::os::raw::c_int,
    pub rsv_3: ::std::os::raw::c_int,
    pub rsv_4: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_taskinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<taskinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<taskinfo_s>(),
        52usize,
        concat!("Size of: ", stringify!(taskinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<taskinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(taskinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsubtasks) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(nsubtasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbshmkey) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(fbshmkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbshmsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(fbshmsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mainpid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(mainpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appname) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(appname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subtasks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(subtasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbtempkey) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(fbtempkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(rsv_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_3) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(rsv_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_4) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(rsv_4)
        )
    );
}
pub type taskinfo = taskinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_mtinfo_s {
    pub active: bool,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub pressure: ::std::os::raw::c_int,
    pub devtype: input_dev_e,
    pub timems: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_iv_mtinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_mtinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_mtinfo_s>(),
        32usize,
        concat!("Size of: ", stringify!(iv_mtinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_mtinfo_s>(),
        8usize,
        concat!("Alignment of ", stringify!(iv_mtinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devtype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(devtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timems) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(timems)
        )
    );
}
pub type iv_mtinfo = iv_mtinfo_s;
pub type iv_mtinfo_section = [iv_mtinfo; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct apinfo_s {
    pub ssid: [::std::os::raw::c_char; 64usize],
    pub mode: ::std::os::raw::c_int,
    pub channel: ::std::os::raw::c_int,
    pub security: WIFI_SECURITY,
    pub quality: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub noise: ::std::os::raw::c_int,
    pub mac: [::std::os::raw::c_uchar; 8usize],
    pub timestamp: time_t,
}
#[test]
fn bindgen_test_layout_apinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<apinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<apinfo_s>(),
        100usize,
        concat!("Size of: ", stringify!(apinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<apinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(apinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(ssid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(security)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noise) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(noise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(timestamp)
        )
    );
}
pub type wifiapinfo = apinfo_s;
#[repr(C)]
#[derive(Debug)]
pub struct wifi_ap_list_s {
    pub ap_quantity: ::std::os::raw::c_int,
    pub apinfo: __IncompleteArrayField<wifiapinfo>,
}
#[test]
fn bindgen_test_layout_wifi_ap_list_s() {
    const UNINIT: ::std::mem::MaybeUninit<wifi_ap_list_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wifi_ap_list_s>(),
        4usize,
        concat!("Size of: ", stringify!(wifi_ap_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<wifi_ap_list_s>(),
        4usize,
        concat!("Alignment of ", stringify!(wifi_ap_list_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_quantity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wifi_ap_list_s),
            "::",
            stringify!(ap_quantity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wifi_ap_list_s),
            "::",
            stringify!(apinfo)
        )
    );
}
pub type iv_wifi_ap_list = wifi_ap_list_s;
pub type pointer_to_word_hand_t = ::std::option::Option<
    unsafe extern "C" fn(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        forward: ::std::os::raw::c_int,
    ) -> *mut iv_wlist,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union network_interface {
    pub intr: [::std::os::raw::c_char; 8usize],
    pub addr: [::std::os::raw::c_char; 16usize],
    pub hw_addr: [::std::os::raw::c_char; 18usize],
}
#[test]
fn bindgen_test_layout_network_interface() {
    const UNINIT: ::std::mem::MaybeUninit<network_interface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<network_interface>(),
        18usize,
        concat!("Size of: ", stringify!(network_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<network_interface>(),
        1usize,
        concat!("Alignment of ", stringify!(network_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface),
            "::",
            stringify!(intr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface),
            "::",
            stringify!(hw_addr)
        )
    );
}
#[repr(C)]
pub struct network_interface_array_s {
    pub count: ::std::os::raw::c_uint,
    pub net_int: __IncompleteArrayField<network_interface>,
}
#[test]
fn bindgen_test_layout_network_interface_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<network_interface_array_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<network_interface_array_s>(),
        4usize,
        concat!("Size of: ", stringify!(network_interface_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<network_interface_array_s>(),
        4usize,
        concat!("Alignment of ", stringify!(network_interface_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_array_s),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).net_int) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_array_s),
            "::",
            stringify!(net_int)
        )
    );
}
pub type network_interface_array = network_interface_array_s;
pub const bt_state_e_BT_STATE_OFF: bt_state_e = 0;
pub const bt_state_e_BT_STATE_SUSPENDED: bt_state_e = 1;
pub const bt_state_e_BT_STATE_READY: bt_state_e = 2;
pub const bt_state_e_BT_STATE_CONNECTED: bt_state_e = 3;
pub const bt_state_e_BT_STATE_TRANSFERRING: bt_state_e = 4;
pub const bt_state_e_BT_STATE_ERROR: bt_state_e = 5;
pub const bt_state_e_BT_STATE_MAX: bt_state_e = 6;
pub type bt_state_e = ::std::os::raw::c_uint;
pub use self::bt_state_e as bt_state;
pub const audio_output_e_AUDIO_OUT_NONE: audio_output_e = 0;
pub const audio_output_e_AUDIO_OUT_HP: audio_output_e = 1;
pub const audio_output_e_AUDIO_OUT_BT: audio_output_e = 2;
pub type audio_output_e = ::std::os::raw::c_uint;
pub use self::audio_output_e as audio_output_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audio_output_info {
    pub type_: audio_output_t,
    pub description: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_audio_output_info() {
    const UNINIT: ::std::mem::MaybeUninit<audio_output_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<audio_output_info>(),
        36usize,
        concat!("Size of: ", stringify!(audio_output_info))
    );
    assert_eq!(
        ::std::mem::align_of::<audio_output_info>(),
        4usize,
        concat!("Alignment of ", stringify!(audio_output_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_output_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_output_info),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct network_interface_info {
    pub ip_addr: network_interface,
    pub mask: network_interface,
    pub br_addr: network_interface,
    pub hw_addr: network_interface,
}
#[test]
fn bindgen_test_layout_network_interface_info() {
    const UNINIT: ::std::mem::MaybeUninit<network_interface_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<network_interface_info>(),
        72usize,
        concat!("Size of: ", stringify!(network_interface_info))
    );
    assert_eq!(
        ::std::mem::align_of::<network_interface_info>(),
        1usize,
        concat!("Alignment of ", stringify!(network_interface_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_info),
            "::",
            stringify!(ip_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_info),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).br_addr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_info),
            "::",
            stringify!(br_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_addr) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_info),
            "::",
            stringify!(hw_addr)
        )
    );
}
#[doc = "< application is a reader, affects behavior of panel\n for proper work, set this attribute before first acces to panel API"]
pub const APPLICATION_ATTRIBUTE_APPLICATION_READER: APPLICATION_ATTRIBUTE = 0;
#[doc = "< maximal value of the attribute"]
pub const APPLICATION_ATTRIBUTE_APPLICATION_ATTRIBUTE_MAX: APPLICATION_ATTRIBUTE = 31;
#[doc = " Enum APPLICATION_ATTRIBUTE wich can be used for setting current application attributes\n @see SetCurrentApplicationAttribute, TestCurrentApplicationAttribute"]
pub type APPLICATION_ATTRIBUTE = ::std::os::raw::c_uint;
pub const PixelFormat_e_kFmtGrayscale8: PixelFormat_e = 0;
pub const PixelFormat_e_kFmtRGB24: PixelFormat_e = 1;
pub type PixelFormat_e = ::std::os::raw::c_uint;
pub use self::PixelFormat_e as PixelFormat;
pub const ImageSignatureType_e_kImgTypeUnknown: ImageSignatureType_e = 0;
pub const ImageSignatureType_e_kImgTypeBMP: ImageSignatureType_e = 1;
pub const ImageSignatureType_e_kImgTypeGIF: ImageSignatureType_e = 2;
pub const ImageSignatureType_e_kImgTypeJPG: ImageSignatureType_e = 3;
pub const ImageSignatureType_e_kImgTypePNG: ImageSignatureType_e = 4;
pub const ImageSignatureType_e_kImgTypeTIFF: ImageSignatureType_e = 5;
pub type ImageSignatureType_e = ::std::os::raw::c_uint;
pub use self::ImageSignatureType_e as ImageSignatureType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iprofile_s {
    pub name: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub avatar: *mut ibitmap,
}
#[test]
fn bindgen_test_layout_iprofile_s() {
    const UNINIT: ::std::mem::MaybeUninit<iprofile_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iprofile_s>(),
        16usize,
        concat!("Size of: ", stringify!(iprofile_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iprofile_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iprofile_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofile_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofile_s),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofile_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avatar) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofile_s),
            "::",
            stringify!(avatar)
        )
    );
}
pub type iprofile = iprofile_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iprofiles_s {
    pub profile: *mut iprofile,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iprofiles_s() {
    const UNINIT: ::std::mem::MaybeUninit<iprofiles_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iprofiles_s>(),
        8usize,
        concat!("Size of: ", stringify!(iprofiles_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iprofiles_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iprofiles_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofiles_s),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofiles_s),
            "::",
            stringify!(count)
        )
    );
}
pub type iprofiles = iprofiles_s;
pub const MencaFileStatus_e_kMencaNoStatus: MencaFileStatus_e = 0;
pub const MencaFileStatus_e_kMencaInCloud: MencaFileStatus_e = 1;
pub const MencaFileStatus_e_kMencaSyncing: MencaFileStatus_e = 2;
pub const MencaFileStatus_e_kMencaDownloaded: MencaFileStatus_e = 3;
pub type MencaFileStatus_e = ::std::os::raw::c_uint;
pub use self::MencaFileStatus_e as MencaFileStatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BookSyncStatus_s {
    pub menca_status_: MencaFileStatus,
}
#[test]
fn bindgen_test_layout_BookSyncStatus_s() {
    const UNINIT: ::std::mem::MaybeUninit<BookSyncStatus_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BookSyncStatus_s>(),
        4usize,
        concat!("Size of: ", stringify!(BookSyncStatus_s))
    );
    assert_eq!(
        ::std::mem::align_of::<BookSyncStatus_s>(),
        4usize,
        concat!("Alignment of ", stringify!(BookSyncStatus_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menca_status_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BookSyncStatus_s),
            "::",
            stringify!(menca_status_)
        )
    );
}
pub type BookSyncStatus = BookSyncStatus_s;
pub const AudioPlayerType_e_kAudioPlayer: AudioPlayerType_e = 1;
pub const AudioPlayerType_e_kAudioBooks: AudioPlayerType_e = 2;
pub const AudioPlayerType_e_kBrowser: AudioPlayerType_e = 4;
pub const AudioPlayerType_e_kReaderPlayer: AudioPlayerType_e = 8;
pub type AudioPlayerType_e = ::std::os::raw::c_uint;
pub use self::AudioPlayerType_e as AudioPlayerType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioPlayingInfo_s {
    pub type_: AudioPlayerType,
    pub pid: ::std::os::raw::c_int,
    pub title: [::std::os::raw::c_char; 512usize],
    pub author: [::std::os::raw::c_char; 512usize],
    pub duration: [::std::os::raw::c_char; 32usize],
    pub percent: ::std::os::raw::c_int,
    pub play_state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AudioPlayingInfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<AudioPlayingInfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AudioPlayingInfo_s>(),
        1072usize,
        concat!("Size of: ", stringify!(AudioPlayingInfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioPlayingInfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioPlayingInfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).author) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percent) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(percent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).play_state) as usize - ptr as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(play_state)
        )
    );
}
pub type AudioPlayingInfo = AudioPlayingInfo_s;
pub type proxy_settings = ::std::os::raw::c_char;
pub const eTaskOomPriority_kTaskOomPriorityLow: eTaskOomPriority = 0;
pub const eTaskOomPriority_kTaskOomPriorityNormal: eTaskOomPriority = 1;
pub const eTaskOomPriority_kTaskOomPriorityHigh: eTaskOomPriority = 2;
pub type eTaskOomPriority = ::std::os::raw::c_uint;
pub use self::eTaskOomPriority as TaskOomPriority;
pub const CustomGattSessionStatus_e_GattSessionStatus_uncknown: CustomGattSessionStatus_e = 0;
pub const CustomGattSessionStatus_e_GattSessionStatus_disconnected: CustomGattSessionStatus_e = 1;
pub const CustomGattSessionStatus_e_GattSessionStatus_errorCommon: CustomGattSessionStatus_e = 2;
pub const CustomGattSessionStatus_e_GattSessionStatus_errorConnection: CustomGattSessionStatus_e =
    3;
pub const CustomGattSessionStatus_e_GattSessionStatus_errorService: CustomGattSessionStatus_e = 4;
pub const CustomGattSessionStatus_e_GattSessionStatus_connecting: CustomGattSessionStatus_e = 5;
pub const CustomGattSessionStatus_e_GattSessionStatus_discoveringServices:
    CustomGattSessionStatus_e = 6;
pub const CustomGattSessionStatus_e_GattSessionStatus_connected: CustomGattSessionStatus_e = 7;
pub type CustomGattSessionStatus_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CustomGattSession_s {
    _unused: [u8; 0],
}
pub type CustomGattSession = CustomGattSession_s;
pub const software_localization_type_e_SLT_UNKNOWN: software_localization_type_e = 0;
pub const software_localization_type_e_SLT_WW: software_localization_type_e = 1;
pub const software_localization_type_e_SLT_RU: software_localization_type_e = 2;
pub const software_localization_type_e_SLT_CIS: software_localization_type_e = 3;
pub const software_localization_type_e_SLT_CN: software_localization_type_e = 4;
pub type software_localization_type_e = ::std::os::raw::c_uint;
pub use self::software_localization_type_e as software_localization_type;
extern crate libloading;
pub struct inkview {
    __library: ::libloading::Library,
    pub get_nprocs_conf:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_nprocs: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_phys_pages:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub get_avphys_pages:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub get_crc_table: Result<unsafe extern "C" fn() -> *const z_crc_t, ::libloading::Error>,
    pub iv_get_default_font: Result<
        unsafe extern "C" fn(fonttype: FONT_TYPE) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetHardwareDepth:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenScreen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub OpenScreenExt: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub InkViewMain: Result<unsafe extern "C" fn(h: iv_handler), ::libloading::Error>,
    pub CloseApp: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub InitInkview:
        Result<unsafe extern "C" fn(reg_flags: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetOrientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetGlobalOrientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetGSensorOrientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ClearScreen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetClip: Result<
        unsafe extern "C" fn(
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            w: *mut ::std::os::raw::c_int,
            h: *mut ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub GetClipRect: Result<unsafe extern "C" fn() -> irect, ::libloading::Error>,
    pub DrawPixel: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawLine: Result<
        unsafe extern "C" fn(
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawLineEx: Result<
        unsafe extern "C" fn(
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            step: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawDashLine: Result<
        unsafe extern "C" fn(
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            fill: ::std::os::raw::c_uint,
            space: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub DrawRect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawRectRound: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawSelection: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawCircle: Result<
        unsafe extern "C" fn(
            x0: ::std::os::raw::c_int,
            y0: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawHorizontalSeparator: Result<
        unsafe extern "C" fn(
            x0: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawCircleQuarter: Result<
        unsafe extern "C" fn(
            x0: ::std::os::raw::c_int,
            y0: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
            thickness: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            bg_color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub GetDefaultFrameCertifiedThickness: Result<
        unsafe extern "C" fn(thickness: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetDefaultFrameCertifiedRadius: Result<
        unsafe extern "C" fn(thickness: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawFrameCertified: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            thickness: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawFrameRectCertified: Result<
        unsafe extern "C" fn(rect: irect, thickness: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub DrawFrameCertifiedEx: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            thickness: ::std::os::raw::c_int,
            sides: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            bg_color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawFrameRectCertifiedEx: Result<
        unsafe extern "C" fn(
            rect: irect,
            thickness: ::std::os::raw::c_int,
            sides: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            bg_color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawPickOut: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            key: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub DrawPickOutEx: Result<
        unsafe extern "C" fn(rect: *const irect, key: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub SetCanvas: Result<unsafe extern "C" fn(c: *mut icanvas), ::libloading::Error>,
    pub GetCanvas: Result<unsafe extern "C" fn() -> *mut icanvas, ::libloading::Error>,
    pub DrawFrame: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            icon: *mut ibitmap,
            title: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            clientarea: *mut irect,
        ),
        ::libloading::Error,
    >,
    pub DrawFrameDialog: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            icon: *mut ibitmap,
            title: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            clientarea: *mut irect,
        ),
        ::libloading::Error,
    >,
    pub DrawBorder: Result<
        unsafe extern "C" fn(
            border_rect: *const irect,
            border_size: ::std::os::raw::c_int,
            style: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawPager: Result<unsafe extern "C" fn(pager: *mut ipager), ::libloading::Error>,
    pub GetPagerRect:
        Result<unsafe extern "C" fn(pager: *mut ipager) -> irect, ::libloading::Error>,
    pub GetPagerHeight: Result<
        unsafe extern "C" fn(pager: *mut ipager) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IsPagerEvent: Result<
        unsafe extern "C" fn(
            pager: *mut ipager,
            type_: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PagerHandler: Result<
        unsafe extern "C" fn(
            pager: *mut ipager,
            type_: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawDiagonalHatch: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            step: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawDiagonalHatchLimits: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            step: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            limit: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: ::std::os::raw::c_int,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >,
        ),
        ::libloading::Error,
    >,
    pub BitmapFromCanvas: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            rotate: ::std::os::raw::c_int,
            canvas: *mut icanvas,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetImageType: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ImageSignatureType,
        ::libloading::Error,
    >,
    pub ApplyContrastToBitmap8: Result<
        unsafe extern "C" fn(bmp: *mut ibitmap, contrast: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub DrawBitmap: Result<
        unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int, b: *const ibitmap),
        ::libloading::Error,
    >,
    pub DrawBitmapArea: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            b: *const ibitmap,
            bx: ::std::os::raw::c_int,
            by: ::std::os::raw::c_int,
            bw: ::std::os::raw::c_int,
            bh: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawBitmapRect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            b: *const ibitmap,
            flags: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawBitmapRect2:
        Result<unsafe extern "C" fn(rect: *const irect, b: *const ibitmap), ::libloading::Error>,
    pub OpenFont: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
            aa: ::std::os::raw::c_int,
        ) -> *mut ifont,
        ::libloading::Error,
    >,
    pub OpenFontEx: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
            line_height: ::std::os::raw::c_int,
            aa: ::std::os::raw::c_int,
        ) -> *mut ifont,
        ::libloading::Error,
    >,
    pub GetFont: Result<unsafe extern "C" fn() -> *const ifont, ::libloading::Error>,
    pub DrawString: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub DrawStringR: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub DrawTextRect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub DrawTextRect2: Result<
        unsafe extern "C" fn(
            rect: *const irect,
            s: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub DrawTextRect3: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            height: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetMultilineStringWidth: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            area_width: ::std::os::raw::c_int,
            font: *mut ifont,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawSymbol: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            symbol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub FullUpdate: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub FullUpdateHQ: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SoftUpdate: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SoftUpdateHQ: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub do_partial_update: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flag: ::std::os::raw::c_uint,
            dynamic: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdate: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdateBlack: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdateBW: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdateHQ: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdateDU4: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DynamicUpdate: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DynamicUpdateBW: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DynamicUpdateA2: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub ExitUpdateA2: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub IsInA2Update: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub FineUpdate: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub FineUpdateSupported:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub HQUpdateSupported:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ScheduleUpdate: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            bw: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub WaitForUpdateComplete: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetWaveformTimes:
        Result<unsafe extern "C" fn(result: *mut ::std::os::raw::c_ushort), ::libloading::Error>,
    pub SetEventHandler:
        Result<unsafe extern "C" fn(hproc: iv_handler) -> iv_handler, ::libloading::Error>,
    pub SetEventHandlerEx:
        Result<unsafe extern "C" fn(hproc: iv_handler) -> iv_handler, ::libloading::Error>,
    pub GetEventHandler: Result<unsafe extern "C" fn() -> iv_handler, ::libloading::Error>,
    pub SendEvent: Result<
        unsafe extern "C" fn(
            hproc: iv_handler,
            type_: ::std::os::raw::c_int,
            par1: ::std::os::raw::c_int,
            par2: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SendEventEx: Result<
        unsafe extern "C" fn(
            hproc: iv_handler,
            type_: ::std::os::raw::c_int,
            par1: ::std::os::raw::c_int,
            par2: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub GetCurrentEventExData:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void, ::libloading::Error>,
    pub ProcessEventLoop: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ProcessEventLoopQuick: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub FlushEvents: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_evttype: Result<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub IsAnyEvents: Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub PrepareForLoop: Result<unsafe extern "C" fn(hproc: iv_handler), ::libloading::Error>,
    pub ClearOnExit: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub OpenMenu: Result<
        unsafe extern "C" fn(
            menu: *mut imenu,
            pos: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            hproc: iv_menuhandler,
        ),
        ::libloading::Error,
    >,
    pub OpenMenuEx: Result<
        unsafe extern "C" fn(
            menu: *mut imenuex,
            pos: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            hproc: iv_menuhandler,
        ),
        ::libloading::Error,
    >,
    pub UpdateMenuEx: Result<unsafe extern "C" fn(menu: *mut imenuex), ::libloading::Error>,
    pub OpenContextMenu:
        Result<unsafe extern "C" fn(menu: *const icontext_menu), ::libloading::Error>,
    pub OpenMenu3x3: Result<
        unsafe extern "C" fn(
            mbitmap: *const ibitmap,
            strings: *mut *const ::std::os::raw::c_char,
            hproc: iv_menuhandler,
        ),
        ::libloading::Error,
    >,
    pub GetMenuRect: Result<unsafe extern "C" fn(menu: *const imenu) -> irect, ::libloading::Error>,
    pub GetMenuRectEx:
        Result<unsafe extern "C" fn(menu: *const imenuex) -> irect, ::libloading::Error>,
    pub OpenList: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            background: *const ibitmap,
            itemw: ::std::os::raw::c_int,
            itemh: ::std::os::raw::c_int,
            itemcount: ::std::os::raw::c_int,
            cpos: ::std::os::raw::c_int,
            hproc: iv_listhandler,
        ),
        ::libloading::Error,
    >,
    pub GetListHeaderLevel:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenDummyList: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            background: *const ibitmap,
            text: *mut ::std::os::raw::c_char,
            hproc: iv_listhandler,
        ),
        ::libloading::Error,
    >,
    pub GetKeyboardFlags:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenKeyboard: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            maxlen: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            hproc: iv_keyboardhandler,
        ),
        ::libloading::Error,
    >,
    pub OpenKeyboardEx: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            maxlen: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            hproc: iv_keyboardhandlerex,
            cb_data: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub DrawKeyboard: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub OpenCustomKeyboard: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            maxlen: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            hproc: iv_keyboardhandler,
        ),
        ::libloading::Error,
    >,
    pub GetKeyboardRect: Result<unsafe extern "C" fn(rect: *mut irect), ::libloading::Error>,
    pub GetKeyboardRectWithParams: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> irect,
        ::libloading::Error,
    >,
    pub setDrawTopLine: Result<
        unsafe extern "C" fn(kbd_draw_top_line_: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub OpenPageSelector:
        Result<unsafe extern "C" fn(hproc: iv_pageselecthandler), ::libloading::Error>,
    pub OpenTimeEdit: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            intime: ::std::os::raw::c_long,
            hproc: iv_timeedithandler,
        ),
        ::libloading::Error,
    >,
    pub OpenDirectorySelector: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            buf: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            hproc: iv_dirselecthandler,
        ),
        ::libloading::Error,
    >,
    pub OpenFontSelector: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            font: *const ::std::os::raw::c_char,
            with_size: ::std::os::raw::c_int,
            hproc: iv_fontselecthandler,
        ),
        ::libloading::Error,
    >,
    pub OpenFontSelectorEx:
        Result<unsafe extern "C" fn(menu: *const ifont_menu), ::libloading::Error>,
    pub GetFontMenuStruct: Result<unsafe extern "C" fn() -> ifont_menu, ::libloading::Error>,
    pub OpenBookmarks: Result<
        unsafe extern "C" fn(
            page: ::std::os::raw::c_int,
            position: ::std::os::raw::c_longlong,
            bmklist: *mut ::std::os::raw::c_int,
            poslist: *mut ::std::os::raw::c_longlong,
            bmkcount: *mut ::std::os::raw::c_int,
            maxbmks: ::std::os::raw::c_int,
            hproc: iv_bmkhandler,
        ),
        ::libloading::Error,
    >,
    pub OpenRotateBox: Result<unsafe extern "C" fn(hproc: iv_rotatehandler), ::libloading::Error>,
    pub OpenProgressbar: Result<
        unsafe extern "C" fn(
            icon: ::std::os::raw::c_int,
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            hproc: iv_dialoghandler,
        ),
        ::libloading::Error,
    >,
    pub UpdateProgressbar: Result<
        unsafe extern "C" fn(
            text: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetManualPanelUpdates: Result<
        unsafe extern "C" fn(enable: ::std::os::raw::c_int, handler: iv_panelupdateshandler),
        ::libloading::Error,
    >,
    pub SetPanelType:
        Result<unsafe extern "C" fn(type_: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetPanelType: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetShowPanelReader:
        Result<unsafe extern "C" fn(show: ::std::os::raw::c_int), ::libloading::Error>,
    pub IsShowPanelReader:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetPanelSeparatorEnabled: Result<
        unsafe extern "C" fn(enable: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IsPanelSeparatorEnabled:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub InitPanel: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetPanelKeyForFullScreenEnabled:
        Result<unsafe extern "C" fn(key: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub SetPanelTransparent:
        Result<unsafe extern "C" fn(value: ::std::os::raw::c_int), ::libloading::Error>,
    pub StartPanelProgress: Result<
        unsafe extern "C" fn(progress: ::std::os::raw::c_int, timeoutMs: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub StopPanelProgress: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ShowPanelPackageProgress: Result<
        unsafe extern "C" fn(progress: ::std::os::raw::c_int, timeout: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub DrawPanel: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            text: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawPanel2: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            text: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            readingModeEnable: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawPanel3: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            currentPage: ::std::os::raw::c_int,
            totalPages: ::std::os::raw::c_int,
            readingModeEnable: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawPanel4: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            bookName: *const ::std::os::raw::c_char,
            currentPage: ::std::os::raw::c_int,
            totalPages: ::std::os::raw::c_int,
            readingModeEnable: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawPanel5: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            text: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            readingModeEnable: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub OpenControlPanel:
        Result<unsafe extern "C" fn(ctx: *mut control_panel), ::libloading::Error>,
    pub PanelHeight: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PanelHeightFBOffset:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub DrawApplicationCaption: Result<
        unsafe extern "C" fn(caption: *const ::std::os::raw::c_char, title_rect: *const irect),
        ::libloading::Error,
    >,
    pub GetCaptionHeight:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetApplicationCaptionHeight:
        Result<unsafe extern "C" fn(h: ::std::os::raw::c_int), ::libloading::Error>,
    pub LoadApplicationCaptionProperties:
        Result<unsafe extern "C" fn() -> *mut iapp_caption, ::libloading::Error>,
    pub LoadTaskManagerProperties:
        Result<unsafe extern "C" fn() -> *mut itaskmgr, ::libloading::Error>,
    pub GetAppGlobalStyle: Result<unsafe extern "C" fn() -> AppStyles, ::libloading::Error>,
    pub GetAppStyle: Result<
        unsafe extern "C" fn(key: *const ::std::os::raw::c_char) -> AppStyles,
        ::libloading::Error,
    >,
    pub GetAppStyleEx: Result<
        unsafe extern "C" fn(key: *const ::std::os::raw::c_char) -> *mut iappstyle,
        ::libloading::Error,
    >,
    pub GetFontSelectorProperties:
        Result<unsafe extern "C" fn() -> *mut font_selector_properties, ::libloading::Error>,
    pub GetCustomFontString:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub GetGlobalConfig: Result<unsafe extern "C" fn() -> *mut iconfig, ::libloading::Error>,
    pub OpenConfig: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            ce: *mut iconfigedit,
        ) -> *mut iconfig,
        ::libloading::Error,
    >,
    pub OpenConfigEditor: Result<
        unsafe extern "C" fn(
            header: *const ::std::os::raw::c_char,
            cfg: *mut iconfig,
            ce: *mut iconfigedit,
            hproc: iv_confighandler,
            cproc: iv_itemchangehandler,
        ),
        ::libloading::Error,
    >,
    pub OpenConfigSubmenuExt: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            ice: *mut iconfigedit,
            pos: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub OpenConfigSubmenu: Result<
        unsafe extern "C" fn(title: *const ::std::os::raw::c_char, ice: *mut iconfigedit),
        ::libloading::Error,
    >,
    pub UpdateCurrentConfigPage: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub UpdateConfigPage: Result<
        unsafe extern "C" fn(title: *const ::std::os::raw::c_char, ice: *mut iconfigedit),
        ::libloading::Error,
    >,
    pub GetKeyMapping: Result<
        unsafe extern "C" fn(
            act0: *mut *const ::std::os::raw::c_char,
            act1: *mut *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub GetKeyMappingEx: Result<
        unsafe extern "C" fn(
            what: ::std::os::raw::c_int,
            act0: *mut *const ::std::os::raw::c_char,
            act1: *mut *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub GetKeyMappingExtended: Result<
        unsafe extern "C" fn(
            type_: keymap_t,
            act0: *mut *const ::std::os::raw::c_char,
            act1: *mut *const ::std::os::raw::c_char,
            act2: *mut *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub NewTask: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            args: *const *const ::std::os::raw::c_char,
            appname: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            icon: *const ibitmap,
            flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NewTaskEx: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            args: *const *mut ::std::os::raw::c_char,
            appname: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            icon: *const ibitmap,
            flags: ::std::os::raw::c_uint,
            run_as_reader_if_needed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub OpenTask: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetCurrentTask:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetActiveTask: Result<
        unsafe extern "C" fn(task: *mut ::std::os::raw::c_int, subtask: *mut ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub IsTaskActive: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetPreviousTask: Result<
        unsafe extern "C" fn(task: *mut ::std::os::raw::c_int, subtask: *mut ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub GetPreviousTaskInStack: Result<
        unsafe extern "C" fn(task: *mut ::std::os::raw::c_int, subtask: *mut ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub GetTaskList: Result<
        unsafe extern "C" fn(
            list: *mut ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetTaskInfo: Result<
        unsafe extern "C" fn(task: ::std::os::raw::c_int) -> *mut taskinfo,
        ::libloading::Error,
    >,
    pub FindTaskByBook: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            task: *mut ::std::os::raw::c_int,
            subtask: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub FindTaskByAppName: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetTaskParameters: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            appname: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            icon: *mut ibitmap,
            flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetActiveTask: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            subtask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub CloseTask: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            subtask: ::std::os::raw::c_int,
            force: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendEventTo: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
            par1: ::std::os::raw::c_int,
            par2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendEventSyncTo: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
            par1: ::std::os::raw::c_int,
            par2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendRequest: Result<
        unsafe extern "C" fn(
            request: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
            timeout: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendRequestNoWait: Result<
        unsafe extern "C" fn(
            request: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendRequestTo: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            request: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
            timeout: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendRequestToNoWait: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            request: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendGlobalRequest: Result<
        unsafe extern "C" fn(param: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetMessageHandler: Result<unsafe extern "C" fn(hproc: iv_msghandler), ::libloading::Error>,
    pub OpenTaskList: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetTaskFramebuffer: Result<
        unsafe extern "C" fn(task: ::std::os::raw::c_int) -> *mut icanvas,
        ::libloading::Error,
    >,
    pub GetTaskFramebufferInfo: Result<
        unsafe extern "C" fn(task: ::std::os::raw::c_int) -> *mut iv_fbinfo,
        ::libloading::Error,
    >,
    pub ReleaseTaskFramebuffer: Result<unsafe extern "C" fn(fb: *mut icanvas), ::libloading::Error>,
    pub iv_wait_task_activation:
        Result<unsafe extern "C" fn(timeout: ::std::os::raw::c_int), ::libloading::Error>,
    pub CopyTaskFb: Result<unsafe extern "C" fn(task: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetFrontlightVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetFrontlightState:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetFrontlightEnabled:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenFrontLightConfig: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetFrontlightColor:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_stat: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            st: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_access: Result<
        unsafe extern "C" fn(
            pathname: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_fopen: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub iv_fread: Result<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            f: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_fwrite: Result<
        unsafe extern "C" fn(
            buffer: *const ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            f: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_fseek: Result<
        unsafe extern "C" fn(
            f: *mut FILE,
            offset: ::std::os::raw::c_long,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_ftell:
        Result<unsafe extern "C" fn(f: *mut FILE) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub iv_fclose:
        Result<unsafe extern "C" fn(f: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_fclose_no_sync:
        Result<unsafe extern "C" fn(f: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_fgetc:
        Result<unsafe extern "C" fn(f: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_fgets: Result<
        unsafe extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            n: ::std::os::raw::c_int,
            f: *mut FILE,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub iv_mkdir: Result<
        unsafe extern "C" fn(
            pathname: *const ::std::os::raw::c_char,
            mode: mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_buildpath:
        Result<unsafe extern "C" fn(filename: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub iv_opendir: Result<
        unsafe extern "C" fn(dirname: *const ::std::os::raw::c_char) -> *mut DIR,
        ::libloading::Error,
    >,
    pub iv_readdir: Result<unsafe extern "C" fn(dir: *mut DIR) -> *mut dirent, ::libloading::Error>,
    pub iv_closedir:
        Result<unsafe extern "C" fn(dir: *mut DIR) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_unlink: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_rmdir: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_truncate: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_rename: Result<
        unsafe extern "C" fn(
            oldname: *const ::std::os::raw::c_char,
            newname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_preload: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, count: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub iv_sync: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_validate_name: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_setbgresponse:
        Result<unsafe extern "C" fn(t: ::std::os::raw::c_int), ::libloading::Error>,
    pub iv_ipc_request: Result<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_long,
            attr: ::std::os::raw::c_long,
            data: *mut ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub iv_ipc_request_secure: Result<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_long,
            param: ::std::os::raw::c_long,
            data: *mut ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub iv_ipc_cmd: Result<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_long,
            param: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub iv_ipc_request_with_timeout: Result<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_long,
            param: ::std::os::raw::c_long,
            data: *mut ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
            timeout_ms: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub AddTranslation: Result<
        unsafe extern "C" fn(
            label: *const ::std::os::raw::c_char,
            trans: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub GetCurrentLangText: Result<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetLangText: Result<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetLangTextF: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            ...
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetLangTextPlural: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            amount: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub iv_lang_format: Result<
        unsafe extern "C" fn(
            dst: *mut ::std::os::raw::c_char,
            max_size: usize,
            format_key: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetLangTime: Result<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
            key: *const ::std::os::raw::c_char,
            t: *mut tm,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetProfileType: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetProfileAvatar: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetCurrentProfile:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetProfilesCountAfterEnum:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenProfileSelector: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetLocalProfilesLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetSDProfilesLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetProfilesLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetProfilesList: Result<
        unsafe extern "C" fn(profiles: *mut iprofiles) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetCurrentProfileEx: Result<
        unsafe extern "C" fn(profile: *mut iprofile) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetProfilesCount:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenTheme:
        Result<unsafe extern "C" fn(path: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub GetResource: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: *const ibitmap,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetThemeInt: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetThemeString: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetLayoutFromTheme: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetThemeFont: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: *const ::std::os::raw::c_char,
        ) -> *mut ifont,
        ::libloading::Error,
    >,
    pub GetThemeRect: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            rect: *mut irect,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub GetKeyResource: Result<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_char,
            deflt: *const ibitmap,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetSupportedFileTypes:
        Result<unsafe extern "C" fn() -> *mut iv_filetype, ::libloading::Error>,
    pub GetSupportedFileTypesLength:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetBookInfo: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut bookinfo,
        ::libloading::Error,
    >,
    pub GetBookInfoExt: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            separator: *const ::std::os::raw::c_char,
        ) -> *mut bookinfo,
        ::libloading::Error,
    >,
    pub GetBookISBN: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetBookCover: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetBookCoverEx: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            pixel_format: PixelFormat,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetBookSyncStatus: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> BookSyncStatus,
        ::libloading::Error,
    >,
    pub GetAssociatedFile: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub SetFileHandler: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            handler: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub GetFileHandler: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub OpenBook: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            parameters: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub OpenBook2: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetLastOpen:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub AddLastOpen:
        Result<unsafe extern "C" fn(path: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub OpenLastBooks: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub OpenPlayer: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetPlaylist:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetCurrentTrack:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetTrackSize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetTrackPosition:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetPlayerState:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetPlayerMode: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetVolume: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetEqualizer:
        Result<unsafe extern "C" fn(eq: *mut ::std::os::raw::c_int), ::libloading::Error>,
    pub GetAudioPlayingInfo: Result<
        unsafe extern "C" fn(info: *mut AudioPlayingInfo) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetHighVolumeTimeout:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetSafeVolumeLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetHighVolumeMaxInterval:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetKeyboardLayoutForOpenedDictionary:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub OpenDictionary: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetWordListWithPrefix: Result<
        unsafe extern "C" fn(
            prefix_utf8: *const ::std::os::raw::c_char,
            maxWords: ::std::os::raw::c_int,
            wordList: *mut *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub OpenDictionaryView: Result<
        unsafe extern "C" fn(wordlist: *mut iv_wlist, dicname: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub OpenControlledDictionaryView: Result<
        unsafe extern "C" fn(
            pointer_handler: pointer_to_word_hand_t,
            wordlist: *mut iv_wlist,
            dicname: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub OpenFastTranslation: Result<
        unsafe extern "C" fn(
            pointer_handler: pointer_to_word_hand_t,
            wordlist: *mut iv_wlist,
            pos: ::std::os::raw::c_int,
            dicname: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub iv_reflow_start: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            scale: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_reflow_bt: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_reflow_et: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_reflow_div: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_reflow_addchar: Result<
        unsafe extern "C" fn(
            code: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_reflow_addimage: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_reflow_subpages:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_reflow_render:
        Result<unsafe extern "C" fn(spnum: ::std::os::raw::c_int), ::libloading::Error>,
    pub iv_reflow_getchar: Result<
        unsafe extern "C" fn(
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_reflow_getimage: Result<
        unsafe extern "C" fn(
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            scale: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_reflow_words:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_reflow_getword: Result<
        unsafe extern "C" fn(
            n: ::std::os::raw::c_int,
            spnum: *mut ::std::os::raw::c_int,
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            w: *mut ::std::os::raw::c_int,
            h: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub iv_reflow_clear: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub AddScrolledArea: Result<
        unsafe extern "C" fn(area: *mut irect, receivePointerUp: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub RemoveScrolledArea: Result<unsafe extern "C" fn(area: *mut irect), ::libloading::Error>,
    pub ClearAllScrolledAreas: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetMinimalXScrollIndent: Result<
        unsafe extern "C" fn(area: *mut irect, Xindent: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub SetMinimalYScrollIndent: Result<
        unsafe extern "C" fn(area: *mut irect, Yindent: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub IsAnyScrolledArea:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetCurrentApplicationAttribute: Result<
        unsafe extern "C" fn(attribute: APPLICATION_ATTRIBUTE, on: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub TestCurrentApplicationAttribute: Result<
        unsafe extern "C" fn(attribute: APPLICATION_ATTRIBUTE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_fullscreen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_nofullscreen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_sleepmode: Result<unsafe extern "C" fn(on: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetSleepmode: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetBatteryPower:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetTemperature:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetDeviceModel:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetHardwareType:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetSoftwareVersion:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetSerialSoftwareInfo: Result<
        unsafe extern "C" fn(
            device_model: *mut *mut ::std::os::raw::c_char,
            major_version: *mut ::std::os::raw::c_int,
            minor_version: *mut ::std::os::raw::c_int,
            build_version: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetSerialNumber:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetExternalCardSerialNumber:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub GetWaveformFilename:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetDeviceKey:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetDeviceFingerprint:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_uchar, ::libloading::Error>,
    pub OpenMainMenu: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub CloseAllTasks: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub OpenCalendar: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub StartSoftwareUpdate:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub HavePowerForSoftwareUpdate:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetWiFiScanResults: Result<
        unsafe extern "C" fn(aps: *mut iv_wifi_ap_list) -> *mut iv_wifi_ap_list,
        ::libloading::Error,
    >,
    pub GetHwAddress:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetHwBTAddress:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetHw3GIMEI:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetBluetoothMode:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetBluetoothStatus: Result<unsafe extern "C" fn() -> bt_state, ::libloading::Error>,
    pub OpenBTdevicesMenu: Result<
        unsafe extern "C" fn(
            title: *mut ::std::os::raw::c_char,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            hproc: iv_itemchangehandler,
        ),
        ::libloading::Error,
    >,
    pub GetBTservice: Result<
        unsafe extern "C" fn(
            mac: *const ::std::os::raw::c_char,
            service: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub OpenNetworkInfo: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetUserAgent:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetDefaultUserAgent:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetProxyUrl:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetSessionStatus: Result<
        unsafe extern "C" fn(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetHeader: Result<
        unsafe extern "C" fn(
            id: ::std::os::raw::c_int,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetSessionInfo: Result<
        unsafe extern "C" fn(id: ::std::os::raw::c_int) -> *mut iv_sessioninfo,
        ::libloading::Error,
    >,
    pub GetA2dpStatus: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetTouchInfoI: Result<
        unsafe extern "C" fn(index: ::std::os::raw::c_uint) -> *mut iv_mtinfo,
        ::libloading::Error,
    >,
    pub GetTouchContainerLength: Result<
        unsafe extern "C" fn(index: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub GetTouchSection: Result<
        unsafe extern "C" fn(
            index: ::std::os::raw::c_uint,
            section: ::std::os::raw::c_uint,
        ) -> *mut iv_mtinfo_section,
        ::libloading::Error,
    >,
    pub GetLastTouchSection: Result<
        unsafe extern "C" fn(index: ::std::os::raw::c_uint) -> *mut iv_mtinfo_section,
        ::libloading::Error,
    >,
    pub iv_strcmp: Result<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_strncmp: Result<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
            n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_strcasecmp: Result<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_strncasecmp: Result<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
            n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_encoding_table: Result<
        unsafe extern "C" fn(enc: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub LeaveInkViewMain: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetDialogShow: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_get_obreey_status:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_proxy: Result<unsafe extern "C" fn() -> *mut proxy_settings, ::libloading::Error>,
    pub GetNetInfo: Result<
        unsafe extern "C" fn(interface: *const network_interface) -> *mut network_interface_info,
        ::libloading::Error,
    >,
    pub GetNetGateway: Result<
        unsafe extern "C" fn(interface: *const network_interface) -> *mut network_interface,
        ::libloading::Error,
    >,
    pub GetNetDNS:
        Result<unsafe extern "C" fn() -> *mut network_interface_array, ::libloading::Error>,
    pub GetNetSignalQuality:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetNetState: Result<unsafe extern "C" fn() -> NET_STATE, ::libloading::Error>,
    pub GetLastNetConnectionError:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetNetList: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_partner_id:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub get_keylock: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_file_extension: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub get_screen_dpi:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_screen_scale_factor: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub DebugResourceBitmaps_trackBitmapDrawing: Result<
        unsafe extern "C" fn(
            bmp: *const ibitmap,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_usleep: Result<
        unsafe extern "C" fn(__useconds: __useconds_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IsUpdateInProcess:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PendingHwEventsCount:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_audio_status: Result<
        unsafe extern "C" fn(status: *mut audio_output_info) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setTaskOomPriority: Result<
        unsafe extern "C" fn(value: TaskOomPriority) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub needCanvasLock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub lockCanvasDrawing: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub unlockCanvasDrawing: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetCustomGattSessionStatus: Result<
        unsafe extern "C" fn(obj: *mut CustomGattSession) -> CustomGattSessionStatus_e,
        ::libloading::Error,
    >,
    pub GetSoftwareLocalizationType:
        Result<unsafe extern "C" fn() -> software_localization_type, ::libloading::Error>,
}
impl inkview {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let get_nprocs_conf = __library.get(b"get_nprocs_conf\0").map(|sym| *sym);
        let get_nprocs = __library.get(b"get_nprocs\0").map(|sym| *sym);
        let get_phys_pages = __library.get(b"get_phys_pages\0").map(|sym| *sym);
        let get_avphys_pages = __library.get(b"get_avphys_pages\0").map(|sym| *sym);
        let get_crc_table = __library.get(b"get_crc_table\0").map(|sym| *sym);
        let iv_get_default_font = __library.get(b"iv_get_default_font\0").map(|sym| *sym);
        let GetHardwareDepth = __library.get(b"GetHardwareDepth\0").map(|sym| *sym);
        let OpenScreen = __library.get(b"OpenScreen\0").map(|sym| *sym);
        let OpenScreenExt = __library.get(b"OpenScreenExt\0").map(|sym| *sym);
        let InkViewMain = __library.get(b"InkViewMain\0").map(|sym| *sym);
        let CloseApp = __library.get(b"CloseApp\0").map(|sym| *sym);
        let InitInkview = __library.get(b"InitInkview\0").map(|sym| *sym);
        let GetOrientation = __library.get(b"GetOrientation\0").map(|sym| *sym);
        let GetGlobalOrientation = __library.get(b"GetGlobalOrientation\0").map(|sym| *sym);
        let GetGSensorOrientation = __library.get(b"GetGSensorOrientation\0").map(|sym| *sym);
        let ClearScreen = __library.get(b"ClearScreen\0").map(|sym| *sym);
        let GetClip = __library.get(b"GetClip\0").map(|sym| *sym);
        let GetClipRect = __library.get(b"GetClipRect\0").map(|sym| *sym);
        let DrawPixel = __library.get(b"DrawPixel\0").map(|sym| *sym);
        let DrawLine = __library.get(b"DrawLine\0").map(|sym| *sym);
        let DrawLineEx = __library.get(b"DrawLineEx\0").map(|sym| *sym);
        let DrawDashLine = __library.get(b"DrawDashLine\0").map(|sym| *sym);
        let DrawRect = __library.get(b"DrawRect\0").map(|sym| *sym);
        let DrawRectRound = __library.get(b"DrawRectRound\0").map(|sym| *sym);
        let DrawSelection = __library.get(b"DrawSelection\0").map(|sym| *sym);
        let DrawCircle = __library.get(b"DrawCircle\0").map(|sym| *sym);
        let DrawHorizontalSeparator = __library.get(b"DrawHorizontalSeparator\0").map(|sym| *sym);
        let DrawCircleQuarter = __library.get(b"DrawCircleQuarter\0").map(|sym| *sym);
        let GetDefaultFrameCertifiedThickness = __library
            .get(b"GetDefaultFrameCertifiedThickness\0")
            .map(|sym| *sym);
        let GetDefaultFrameCertifiedRadius = __library
            .get(b"GetDefaultFrameCertifiedRadius\0")
            .map(|sym| *sym);
        let DrawFrameCertified = __library.get(b"DrawFrameCertified\0").map(|sym| *sym);
        let DrawFrameRectCertified = __library.get(b"DrawFrameRectCertified\0").map(|sym| *sym);
        let DrawFrameCertifiedEx = __library.get(b"DrawFrameCertifiedEx\0").map(|sym| *sym);
        let DrawFrameRectCertifiedEx = __library.get(b"DrawFrameRectCertifiedEx\0").map(|sym| *sym);
        let DrawPickOut = __library.get(b"DrawPickOut\0").map(|sym| *sym);
        let DrawPickOutEx = __library.get(b"DrawPickOutEx\0").map(|sym| *sym);
        let SetCanvas = __library.get(b"SetCanvas\0").map(|sym| *sym);
        let GetCanvas = __library.get(b"GetCanvas\0").map(|sym| *sym);
        let DrawFrame = __library.get(b"DrawFrame\0").map(|sym| *sym);
        let DrawFrameDialog = __library.get(b"DrawFrameDialog\0").map(|sym| *sym);
        let DrawBorder = __library.get(b"DrawBorder\0").map(|sym| *sym);
        let DrawPager = __library.get(b"DrawPager\0").map(|sym| *sym);
        let GetPagerRect = __library.get(b"GetPagerRect\0").map(|sym| *sym);
        let GetPagerHeight = __library.get(b"GetPagerHeight\0").map(|sym| *sym);
        let IsPagerEvent = __library.get(b"IsPagerEvent\0").map(|sym| *sym);
        let PagerHandler = __library.get(b"PagerHandler\0").map(|sym| *sym);
        let DrawDiagonalHatch = __library.get(b"DrawDiagonalHatch\0").map(|sym| *sym);
        let DrawDiagonalHatchLimits = __library.get(b"DrawDiagonalHatchLimits\0").map(|sym| *sym);
        let BitmapFromCanvas = __library.get(b"BitmapFromCanvas\0").map(|sym| *sym);
        let GetImageType = __library.get(b"GetImageType\0").map(|sym| *sym);
        let ApplyContrastToBitmap8 = __library.get(b"ApplyContrastToBitmap8\0").map(|sym| *sym);
        let DrawBitmap = __library.get(b"DrawBitmap\0").map(|sym| *sym);
        let DrawBitmapArea = __library.get(b"DrawBitmapArea\0").map(|sym| *sym);
        let DrawBitmapRect = __library.get(b"DrawBitmapRect\0").map(|sym| *sym);
        let DrawBitmapRect2 = __library.get(b"DrawBitmapRect2\0").map(|sym| *sym);
        let OpenFont = __library.get(b"OpenFont\0").map(|sym| *sym);
        let OpenFontEx = __library.get(b"OpenFontEx\0").map(|sym| *sym);
        let GetFont = __library.get(b"GetFont\0").map(|sym| *sym);
        let DrawString = __library.get(b"DrawString\0").map(|sym| *sym);
        let DrawStringR = __library.get(b"DrawStringR\0").map(|sym| *sym);
        let DrawTextRect = __library.get(b"DrawTextRect\0").map(|sym| *sym);
        let DrawTextRect2 = __library.get(b"DrawTextRect2\0").map(|sym| *sym);
        let DrawTextRect3 = __library.get(b"DrawTextRect3\0").map(|sym| *sym);
        let GetMultilineStringWidth = __library.get(b"GetMultilineStringWidth\0").map(|sym| *sym);
        let DrawSymbol = __library.get(b"DrawSymbol\0").map(|sym| *sym);
        let FullUpdate = __library.get(b"FullUpdate\0").map(|sym| *sym);
        let FullUpdateHQ = __library.get(b"FullUpdateHQ\0").map(|sym| *sym);
        let SoftUpdate = __library.get(b"SoftUpdate\0").map(|sym| *sym);
        let SoftUpdateHQ = __library.get(b"SoftUpdateHQ\0").map(|sym| *sym);
        let do_partial_update = __library.get(b"do_partial_update\0").map(|sym| *sym);
        let PartialUpdate = __library.get(b"PartialUpdate\0").map(|sym| *sym);
        let PartialUpdateBlack = __library.get(b"PartialUpdateBlack\0").map(|sym| *sym);
        let PartialUpdateBW = __library.get(b"PartialUpdateBW\0").map(|sym| *sym);
        let PartialUpdateHQ = __library.get(b"PartialUpdateHQ\0").map(|sym| *sym);
        let PartialUpdateDU4 = __library.get(b"PartialUpdateDU4\0").map(|sym| *sym);
        let DynamicUpdate = __library.get(b"DynamicUpdate\0").map(|sym| *sym);
        let DynamicUpdateBW = __library.get(b"DynamicUpdateBW\0").map(|sym| *sym);
        let DynamicUpdateA2 = __library.get(b"DynamicUpdateA2\0").map(|sym| *sym);
        let ExitUpdateA2 = __library.get(b"ExitUpdateA2\0").map(|sym| *sym);
        let IsInA2Update = __library.get(b"IsInA2Update\0").map(|sym| *sym);
        let FineUpdate = __library.get(b"FineUpdate\0").map(|sym| *sym);
        let FineUpdateSupported = __library.get(b"FineUpdateSupported\0").map(|sym| *sym);
        let HQUpdateSupported = __library.get(b"HQUpdateSupported\0").map(|sym| *sym);
        let ScheduleUpdate = __library.get(b"ScheduleUpdate\0").map(|sym| *sym);
        let WaitForUpdateComplete = __library.get(b"WaitForUpdateComplete\0").map(|sym| *sym);
        let GetWaveformTimes = __library.get(b"GetWaveformTimes\0").map(|sym| *sym);
        let SetEventHandler = __library.get(b"SetEventHandler\0").map(|sym| *sym);
        let SetEventHandlerEx = __library.get(b"SetEventHandlerEx\0").map(|sym| *sym);
        let GetEventHandler = __library.get(b"GetEventHandler\0").map(|sym| *sym);
        let SendEvent = __library.get(b"SendEvent\0").map(|sym| *sym);
        let SendEventEx = __library.get(b"SendEventEx\0").map(|sym| *sym);
        let GetCurrentEventExData = __library.get(b"GetCurrentEventExData\0").map(|sym| *sym);
        let ProcessEventLoop = __library.get(b"ProcessEventLoop\0").map(|sym| *sym);
        let ProcessEventLoopQuick = __library.get(b"ProcessEventLoopQuick\0").map(|sym| *sym);
        let FlushEvents = __library.get(b"FlushEvents\0").map(|sym| *sym);
        let iv_evttype = __library.get(b"iv_evttype\0").map(|sym| *sym);
        let IsAnyEvents = __library.get(b"IsAnyEvents\0").map(|sym| *sym);
        let PrepareForLoop = __library.get(b"PrepareForLoop\0").map(|sym| *sym);
        let ClearOnExit = __library.get(b"ClearOnExit\0").map(|sym| *sym);
        let OpenMenu = __library.get(b"OpenMenu\0").map(|sym| *sym);
        let OpenMenuEx = __library.get(b"OpenMenuEx\0").map(|sym| *sym);
        let UpdateMenuEx = __library.get(b"UpdateMenuEx\0").map(|sym| *sym);
        let OpenContextMenu = __library.get(b"OpenContextMenu\0").map(|sym| *sym);
        let OpenMenu3x3 = __library.get(b"OpenMenu3x3\0").map(|sym| *sym);
        let GetMenuRect = __library.get(b"GetMenuRect\0").map(|sym| *sym);
        let GetMenuRectEx = __library.get(b"GetMenuRectEx\0").map(|sym| *sym);
        let OpenList = __library.get(b"OpenList\0").map(|sym| *sym);
        let GetListHeaderLevel = __library.get(b"GetListHeaderLevel\0").map(|sym| *sym);
        let OpenDummyList = __library.get(b"OpenDummyList\0").map(|sym| *sym);
        let GetKeyboardFlags = __library.get(b"GetKeyboardFlags\0").map(|sym| *sym);
        let OpenKeyboard = __library.get(b"OpenKeyboard\0").map(|sym| *sym);
        let OpenKeyboardEx = __library.get(b"OpenKeyboardEx\0").map(|sym| *sym);
        let DrawKeyboard = __library.get(b"DrawKeyboard\0").map(|sym| *sym);
        let OpenCustomKeyboard = __library.get(b"OpenCustomKeyboard\0").map(|sym| *sym);
        let GetKeyboardRect = __library.get(b"GetKeyboardRect\0").map(|sym| *sym);
        let GetKeyboardRectWithParams = __library
            .get(b"GetKeyboardRectWithParams\0")
            .map(|sym| *sym);
        let setDrawTopLine = __library.get(b"setDrawTopLine\0").map(|sym| *sym);
        let OpenPageSelector = __library.get(b"OpenPageSelector\0").map(|sym| *sym);
        let OpenTimeEdit = __library.get(b"OpenTimeEdit\0").map(|sym| *sym);
        let OpenDirectorySelector = __library.get(b"OpenDirectorySelector\0").map(|sym| *sym);
        let OpenFontSelector = __library.get(b"OpenFontSelector\0").map(|sym| *sym);
        let OpenFontSelectorEx = __library.get(b"OpenFontSelectorEx\0").map(|sym| *sym);
        let GetFontMenuStruct = __library.get(b"GetFontMenuStruct\0").map(|sym| *sym);
        let OpenBookmarks = __library.get(b"OpenBookmarks\0").map(|sym| *sym);
        let OpenRotateBox = __library.get(b"OpenRotateBox\0").map(|sym| *sym);
        let OpenProgressbar = __library.get(b"OpenProgressbar\0").map(|sym| *sym);
        let UpdateProgressbar = __library.get(b"UpdateProgressbar\0").map(|sym| *sym);
        let SetManualPanelUpdates = __library.get(b"SetManualPanelUpdates\0").map(|sym| *sym);
        let SetPanelType = __library.get(b"SetPanelType\0").map(|sym| *sym);
        let GetPanelType = __library.get(b"GetPanelType\0").map(|sym| *sym);
        let SetShowPanelReader = __library.get(b"SetShowPanelReader\0").map(|sym| *sym);
        let IsShowPanelReader = __library.get(b"IsShowPanelReader\0").map(|sym| *sym);
        let SetPanelSeparatorEnabled = __library.get(b"SetPanelSeparatorEnabled\0").map(|sym| *sym);
        let IsPanelSeparatorEnabled = __library.get(b"IsPanelSeparatorEnabled\0").map(|sym| *sym);
        let InitPanel = __library.get(b"InitPanel\0").map(|sym| *sym);
        let SetPanelKeyForFullScreenEnabled = __library
            .get(b"SetPanelKeyForFullScreenEnabled\0")
            .map(|sym| *sym);
        let SetPanelTransparent = __library.get(b"SetPanelTransparent\0").map(|sym| *sym);
        let StartPanelProgress = __library.get(b"StartPanelProgress\0").map(|sym| *sym);
        let StopPanelProgress = __library.get(b"StopPanelProgress\0").map(|sym| *sym);
        let ShowPanelPackageProgress = __library.get(b"ShowPanelPackageProgress\0").map(|sym| *sym);
        let DrawPanel = __library.get(b"DrawPanel\0").map(|sym| *sym);
        let DrawPanel2 = __library.get(b"DrawPanel2\0").map(|sym| *sym);
        let DrawPanel3 = __library.get(b"DrawPanel3\0").map(|sym| *sym);
        let DrawPanel4 = __library.get(b"DrawPanel4\0").map(|sym| *sym);
        let DrawPanel5 = __library.get(b"DrawPanel5\0").map(|sym| *sym);
        let OpenControlPanel = __library.get(b"OpenControlPanel\0").map(|sym| *sym);
        let PanelHeight = __library.get(b"PanelHeight\0").map(|sym| *sym);
        let PanelHeightFBOffset = __library.get(b"PanelHeightFBOffset\0").map(|sym| *sym);
        let DrawApplicationCaption = __library.get(b"DrawApplicationCaption\0").map(|sym| *sym);
        let GetCaptionHeight = __library.get(b"GetCaptionHeight\0").map(|sym| *sym);
        let SetApplicationCaptionHeight = __library
            .get(b"SetApplicationCaptionHeight\0")
            .map(|sym| *sym);
        let LoadApplicationCaptionProperties = __library
            .get(b"LoadApplicationCaptionProperties\0")
            .map(|sym| *sym);
        let LoadTaskManagerProperties = __library
            .get(b"LoadTaskManagerProperties\0")
            .map(|sym| *sym);
        let GetAppGlobalStyle = __library.get(b"GetAppGlobalStyle\0").map(|sym| *sym);
        let GetAppStyle = __library.get(b"GetAppStyle\0").map(|sym| *sym);
        let GetAppStyleEx = __library.get(b"GetAppStyleEx\0").map(|sym| *sym);
        let GetFontSelectorProperties = __library
            .get(b"GetFontSelectorProperties\0")
            .map(|sym| *sym);
        let GetCustomFontString = __library.get(b"GetCustomFontString\0").map(|sym| *sym);
        let GetGlobalConfig = __library.get(b"GetGlobalConfig\0").map(|sym| *sym);
        let OpenConfig = __library.get(b"OpenConfig\0").map(|sym| *sym);
        let OpenConfigEditor = __library.get(b"OpenConfigEditor\0").map(|sym| *sym);
        let OpenConfigSubmenuExt = __library.get(b"OpenConfigSubmenuExt\0").map(|sym| *sym);
        let OpenConfigSubmenu = __library.get(b"OpenConfigSubmenu\0").map(|sym| *sym);
        let UpdateCurrentConfigPage = __library.get(b"UpdateCurrentConfigPage\0").map(|sym| *sym);
        let UpdateConfigPage = __library.get(b"UpdateConfigPage\0").map(|sym| *sym);
        let GetKeyMapping = __library.get(b"GetKeyMapping\0").map(|sym| *sym);
        let GetKeyMappingEx = __library.get(b"GetKeyMappingEx\0").map(|sym| *sym);
        let GetKeyMappingExtended = __library.get(b"GetKeyMappingExtended\0").map(|sym| *sym);
        let NewTask = __library.get(b"NewTask\0").map(|sym| *sym);
        let NewTaskEx = __library.get(b"NewTaskEx\0").map(|sym| *sym);
        let OpenTask = __library.get(b"OpenTask\0").map(|sym| *sym);
        let GetCurrentTask = __library.get(b"GetCurrentTask\0").map(|sym| *sym);
        let GetActiveTask = __library.get(b"GetActiveTask\0").map(|sym| *sym);
        let IsTaskActive = __library.get(b"IsTaskActive\0").map(|sym| *sym);
        let GetPreviousTask = __library.get(b"GetPreviousTask\0").map(|sym| *sym);
        let GetPreviousTaskInStack = __library.get(b"GetPreviousTaskInStack\0").map(|sym| *sym);
        let GetTaskList = __library.get(b"GetTaskList\0").map(|sym| *sym);
        let GetTaskInfo = __library.get(b"GetTaskInfo\0").map(|sym| *sym);
        let FindTaskByBook = __library.get(b"FindTaskByBook\0").map(|sym| *sym);
        let FindTaskByAppName = __library.get(b"FindTaskByAppName\0").map(|sym| *sym);
        let SetTaskParameters = __library.get(b"SetTaskParameters\0").map(|sym| *sym);
        let SetActiveTask = __library.get(b"SetActiveTask\0").map(|sym| *sym);
        let CloseTask = __library.get(b"CloseTask\0").map(|sym| *sym);
        let SendEventTo = __library.get(b"SendEventTo\0").map(|sym| *sym);
        let SendEventSyncTo = __library.get(b"SendEventSyncTo\0").map(|sym| *sym);
        let SendRequest = __library.get(b"SendRequest\0").map(|sym| *sym);
        let SendRequestNoWait = __library.get(b"SendRequestNoWait\0").map(|sym| *sym);
        let SendRequestTo = __library.get(b"SendRequestTo\0").map(|sym| *sym);
        let SendRequestToNoWait = __library.get(b"SendRequestToNoWait\0").map(|sym| *sym);
        let SendGlobalRequest = __library.get(b"SendGlobalRequest\0").map(|sym| *sym);
        let SetMessageHandler = __library.get(b"SetMessageHandler\0").map(|sym| *sym);
        let OpenTaskList = __library.get(b"OpenTaskList\0").map(|sym| *sym);
        let GetTaskFramebuffer = __library.get(b"GetTaskFramebuffer\0").map(|sym| *sym);
        let GetTaskFramebufferInfo = __library.get(b"GetTaskFramebufferInfo\0").map(|sym| *sym);
        let ReleaseTaskFramebuffer = __library.get(b"ReleaseTaskFramebuffer\0").map(|sym| *sym);
        let iv_wait_task_activation = __library.get(b"iv_wait_task_activation\0").map(|sym| *sym);
        let CopyTaskFb = __library.get(b"CopyTaskFb\0").map(|sym| *sym);
        let GetFrontlightVersion = __library.get(b"GetFrontlightVersion\0").map(|sym| *sym);
        let GetFrontlightState = __library.get(b"GetFrontlightState\0").map(|sym| *sym);
        let GetFrontlightEnabled = __library.get(b"GetFrontlightEnabled\0").map(|sym| *sym);
        let OpenFrontLightConfig = __library.get(b"OpenFrontLightConfig\0").map(|sym| *sym);
        let GetFrontlightColor = __library.get(b"GetFrontlightColor\0").map(|sym| *sym);
        let iv_stat = __library.get(b"iv_stat\0").map(|sym| *sym);
        let iv_access = __library.get(b"iv_access\0").map(|sym| *sym);
        let iv_fopen = __library.get(b"iv_fopen\0").map(|sym| *sym);
        let iv_fread = __library.get(b"iv_fread\0").map(|sym| *sym);
        let iv_fwrite = __library.get(b"iv_fwrite\0").map(|sym| *sym);
        let iv_fseek = __library.get(b"iv_fseek\0").map(|sym| *sym);
        let iv_ftell = __library.get(b"iv_ftell\0").map(|sym| *sym);
        let iv_fclose = __library.get(b"iv_fclose\0").map(|sym| *sym);
        let iv_fclose_no_sync = __library.get(b"iv_fclose_no_sync\0").map(|sym| *sym);
        let iv_fgetc = __library.get(b"iv_fgetc\0").map(|sym| *sym);
        let iv_fgets = __library.get(b"iv_fgets\0").map(|sym| *sym);
        let iv_mkdir = __library.get(b"iv_mkdir\0").map(|sym| *sym);
        let iv_buildpath = __library.get(b"iv_buildpath\0").map(|sym| *sym);
        let iv_opendir = __library.get(b"iv_opendir\0").map(|sym| *sym);
        let iv_readdir = __library.get(b"iv_readdir\0").map(|sym| *sym);
        let iv_closedir = __library.get(b"iv_closedir\0").map(|sym| *sym);
        let iv_unlink = __library.get(b"iv_unlink\0").map(|sym| *sym);
        let iv_rmdir = __library.get(b"iv_rmdir\0").map(|sym| *sym);
        let iv_truncate = __library.get(b"iv_truncate\0").map(|sym| *sym);
        let iv_rename = __library.get(b"iv_rename\0").map(|sym| *sym);
        let iv_preload = __library.get(b"iv_preload\0").map(|sym| *sym);
        let iv_sync = __library.get(b"iv_sync\0").map(|sym| *sym);
        let iv_validate_name = __library.get(b"iv_validate_name\0").map(|sym| *sym);
        let iv_setbgresponse = __library.get(b"iv_setbgresponse\0").map(|sym| *sym);
        let iv_ipc_request = __library.get(b"iv_ipc_request\0").map(|sym| *sym);
        let iv_ipc_request_secure = __library.get(b"iv_ipc_request_secure\0").map(|sym| *sym);
        let iv_ipc_cmd = __library.get(b"iv_ipc_cmd\0").map(|sym| *sym);
        let iv_ipc_request_with_timeout = __library
            .get(b"iv_ipc_request_with_timeout\0")
            .map(|sym| *sym);
        let AddTranslation = __library.get(b"AddTranslation\0").map(|sym| *sym);
        let GetCurrentLangText = __library.get(b"GetCurrentLangText\0").map(|sym| *sym);
        let GetLangText = __library.get(b"GetLangText\0").map(|sym| *sym);
        let GetLangTextF = __library.get(b"GetLangTextF\0").map(|sym| *sym);
        let GetLangTextPlural = __library.get(b"GetLangTextPlural\0").map(|sym| *sym);
        let iv_lang_format = __library.get(b"iv_lang_format\0").map(|sym| *sym);
        let GetLangTime = __library.get(b"GetLangTime\0").map(|sym| *sym);
        let GetProfileType = __library.get(b"GetProfileType\0").map(|sym| *sym);
        let GetProfileAvatar = __library.get(b"GetProfileAvatar\0").map(|sym| *sym);
        let GetCurrentProfile = __library.get(b"GetCurrentProfile\0").map(|sym| *sym);
        let GetProfilesCountAfterEnum = __library
            .get(b"GetProfilesCountAfterEnum\0")
            .map(|sym| *sym);
        let OpenProfileSelector = __library.get(b"OpenProfileSelector\0").map(|sym| *sym);
        let GetLocalProfilesLimit = __library.get(b"GetLocalProfilesLimit\0").map(|sym| *sym);
        let GetSDProfilesLimit = __library.get(b"GetSDProfilesLimit\0").map(|sym| *sym);
        let GetProfilesLimit = __library.get(b"GetProfilesLimit\0").map(|sym| *sym);
        let GetProfilesList = __library.get(b"GetProfilesList\0").map(|sym| *sym);
        let GetCurrentProfileEx = __library.get(b"GetCurrentProfileEx\0").map(|sym| *sym);
        let GetProfilesCount = __library.get(b"GetProfilesCount\0").map(|sym| *sym);
        let OpenTheme = __library.get(b"OpenTheme\0").map(|sym| *sym);
        let GetResource = __library.get(b"GetResource\0").map(|sym| *sym);
        let GetThemeInt = __library.get(b"GetThemeInt\0").map(|sym| *sym);
        let GetThemeString = __library.get(b"GetThemeString\0").map(|sym| *sym);
        let GetLayoutFromTheme = __library.get(b"GetLayoutFromTheme\0").map(|sym| *sym);
        let GetThemeFont = __library.get(b"GetThemeFont\0").map(|sym| *sym);
        let GetThemeRect = __library.get(b"GetThemeRect\0").map(|sym| *sym);
        let GetKeyResource = __library.get(b"GetKeyResource\0").map(|sym| *sym);
        let GetSupportedFileTypes = __library.get(b"GetSupportedFileTypes\0").map(|sym| *sym);
        let GetSupportedFileTypesLength = __library
            .get(b"GetSupportedFileTypesLength\0")
            .map(|sym| *sym);
        let GetBookInfo = __library.get(b"GetBookInfo\0").map(|sym| *sym);
        let GetBookInfoExt = __library.get(b"GetBookInfoExt\0").map(|sym| *sym);
        let GetBookISBN = __library.get(b"GetBookISBN\0").map(|sym| *sym);
        let GetBookCover = __library.get(b"GetBookCover\0").map(|sym| *sym);
        let GetBookCoverEx = __library.get(b"GetBookCoverEx\0").map(|sym| *sym);
        let GetBookSyncStatus = __library.get(b"GetBookSyncStatus\0").map(|sym| *sym);
        let GetAssociatedFile = __library.get(b"GetAssociatedFile\0").map(|sym| *sym);
        let SetFileHandler = __library.get(b"SetFileHandler\0").map(|sym| *sym);
        let GetFileHandler = __library.get(b"GetFileHandler\0").map(|sym| *sym);
        let OpenBook = __library.get(b"OpenBook\0").map(|sym| *sym);
        let OpenBook2 = __library.get(b"OpenBook2\0").map(|sym| *sym);
        let GetLastOpen = __library.get(b"GetLastOpen\0").map(|sym| *sym);
        let AddLastOpen = __library.get(b"AddLastOpen\0").map(|sym| *sym);
        let OpenLastBooks = __library.get(b"OpenLastBooks\0").map(|sym| *sym);
        let OpenPlayer = __library.get(b"OpenPlayer\0").map(|sym| *sym);
        let GetPlaylist = __library.get(b"GetPlaylist\0").map(|sym| *sym);
        let GetCurrentTrack = __library.get(b"GetCurrentTrack\0").map(|sym| *sym);
        let GetTrackSize = __library.get(b"GetTrackSize\0").map(|sym| *sym);
        let GetTrackPosition = __library.get(b"GetTrackPosition\0").map(|sym| *sym);
        let GetPlayerState = __library.get(b"GetPlayerState\0").map(|sym| *sym);
        let GetPlayerMode = __library.get(b"GetPlayerMode\0").map(|sym| *sym);
        let GetVolume = __library.get(b"GetVolume\0").map(|sym| *sym);
        let GetEqualizer = __library.get(b"GetEqualizer\0").map(|sym| *sym);
        let GetAudioPlayingInfo = __library.get(b"GetAudioPlayingInfo\0").map(|sym| *sym);
        let GetHighVolumeTimeout = __library.get(b"GetHighVolumeTimeout\0").map(|sym| *sym);
        let GetSafeVolumeLimit = __library.get(b"GetSafeVolumeLimit\0").map(|sym| *sym);
        let GetHighVolumeMaxInterval = __library.get(b"GetHighVolumeMaxInterval\0").map(|sym| *sym);
        let GetKeyboardLayoutForOpenedDictionary = __library
            .get(b"GetKeyboardLayoutForOpenedDictionary\0")
            .map(|sym| *sym);
        let OpenDictionary = __library.get(b"OpenDictionary\0").map(|sym| *sym);
        let GetWordListWithPrefix = __library.get(b"GetWordListWithPrefix\0").map(|sym| *sym);
        let OpenDictionaryView = __library.get(b"OpenDictionaryView\0").map(|sym| *sym);
        let OpenControlledDictionaryView = __library
            .get(b"OpenControlledDictionaryView\0")
            .map(|sym| *sym);
        let OpenFastTranslation = __library.get(b"OpenFastTranslation\0").map(|sym| *sym);
        let iv_reflow_start = __library.get(b"iv_reflow_start\0").map(|sym| *sym);
        let iv_reflow_bt = __library.get(b"iv_reflow_bt\0").map(|sym| *sym);
        let iv_reflow_et = __library.get(b"iv_reflow_et\0").map(|sym| *sym);
        let iv_reflow_div = __library.get(b"iv_reflow_div\0").map(|sym| *sym);
        let iv_reflow_addchar = __library.get(b"iv_reflow_addchar\0").map(|sym| *sym);
        let iv_reflow_addimage = __library.get(b"iv_reflow_addimage\0").map(|sym| *sym);
        let iv_reflow_subpages = __library.get(b"iv_reflow_subpages\0").map(|sym| *sym);
        let iv_reflow_render = __library.get(b"iv_reflow_render\0").map(|sym| *sym);
        let iv_reflow_getchar = __library.get(b"iv_reflow_getchar\0").map(|sym| *sym);
        let iv_reflow_getimage = __library.get(b"iv_reflow_getimage\0").map(|sym| *sym);
        let iv_reflow_words = __library.get(b"iv_reflow_words\0").map(|sym| *sym);
        let iv_reflow_getword = __library.get(b"iv_reflow_getword\0").map(|sym| *sym);
        let iv_reflow_clear = __library.get(b"iv_reflow_clear\0").map(|sym| *sym);
        let AddScrolledArea = __library.get(b"AddScrolledArea\0").map(|sym| *sym);
        let RemoveScrolledArea = __library.get(b"RemoveScrolledArea\0").map(|sym| *sym);
        let ClearAllScrolledAreas = __library.get(b"ClearAllScrolledAreas\0").map(|sym| *sym);
        let SetMinimalXScrollIndent = __library.get(b"SetMinimalXScrollIndent\0").map(|sym| *sym);
        let SetMinimalYScrollIndent = __library.get(b"SetMinimalYScrollIndent\0").map(|sym| *sym);
        let IsAnyScrolledArea = __library.get(b"IsAnyScrolledArea\0").map(|sym| *sym);
        let SetCurrentApplicationAttribute = __library
            .get(b"SetCurrentApplicationAttribute\0")
            .map(|sym| *sym);
        let TestCurrentApplicationAttribute = __library
            .get(b"TestCurrentApplicationAttribute\0")
            .map(|sym| *sym);
        let iv_fullscreen = __library.get(b"iv_fullscreen\0").map(|sym| *sym);
        let iv_nofullscreen = __library.get(b"iv_nofullscreen\0").map(|sym| *sym);
        let iv_sleepmode = __library.get(b"iv_sleepmode\0").map(|sym| *sym);
        let GetSleepmode = __library.get(b"GetSleepmode\0").map(|sym| *sym);
        let GetBatteryPower = __library.get(b"GetBatteryPower\0").map(|sym| *sym);
        let GetTemperature = __library.get(b"GetTemperature\0").map(|sym| *sym);
        let GetDeviceModel = __library.get(b"GetDeviceModel\0").map(|sym| *sym);
        let GetHardwareType = __library.get(b"GetHardwareType\0").map(|sym| *sym);
        let GetSoftwareVersion = __library.get(b"GetSoftwareVersion\0").map(|sym| *sym);
        let GetSerialSoftwareInfo = __library.get(b"GetSerialSoftwareInfo\0").map(|sym| *sym);
        let GetSerialNumber = __library.get(b"GetSerialNumber\0").map(|sym| *sym);
        let GetExternalCardSerialNumber = __library
            .get(b"GetExternalCardSerialNumber\0")
            .map(|sym| *sym);
        let GetWaveformFilename = __library.get(b"GetWaveformFilename\0").map(|sym| *sym);
        let GetDeviceKey = __library.get(b"GetDeviceKey\0").map(|sym| *sym);
        let GetDeviceFingerprint = __library.get(b"GetDeviceFingerprint\0").map(|sym| *sym);
        let OpenMainMenu = __library.get(b"OpenMainMenu\0").map(|sym| *sym);
        let CloseAllTasks = __library.get(b"CloseAllTasks\0").map(|sym| *sym);
        let OpenCalendar = __library.get(b"OpenCalendar\0").map(|sym| *sym);
        let StartSoftwareUpdate = __library.get(b"StartSoftwareUpdate\0").map(|sym| *sym);
        let HavePowerForSoftwareUpdate = __library
            .get(b"HavePowerForSoftwareUpdate\0")
            .map(|sym| *sym);
        let GetWiFiScanResults = __library.get(b"GetWiFiScanResults\0").map(|sym| *sym);
        let GetHwAddress = __library.get(b"GetHwAddress\0").map(|sym| *sym);
        let GetHwBTAddress = __library.get(b"GetHwBTAddress\0").map(|sym| *sym);
        let GetHw3GIMEI = __library.get(b"GetHw3GIMEI\0").map(|sym| *sym);
        let GetBluetoothMode = __library.get(b"GetBluetoothMode\0").map(|sym| *sym);
        let GetBluetoothStatus = __library.get(b"GetBluetoothStatus\0").map(|sym| *sym);
        let OpenBTdevicesMenu = __library.get(b"OpenBTdevicesMenu\0").map(|sym| *sym);
        let GetBTservice = __library.get(b"GetBTservice\0").map(|sym| *sym);
        let OpenNetworkInfo = __library.get(b"OpenNetworkInfo\0").map(|sym| *sym);
        let GetUserAgent = __library.get(b"GetUserAgent\0").map(|sym| *sym);
        let GetDefaultUserAgent = __library.get(b"GetDefaultUserAgent\0").map(|sym| *sym);
        let GetProxyUrl = __library.get(b"GetProxyUrl\0").map(|sym| *sym);
        let GetSessionStatus = __library.get(b"GetSessionStatus\0").map(|sym| *sym);
        let GetHeader = __library.get(b"GetHeader\0").map(|sym| *sym);
        let GetSessionInfo = __library.get(b"GetSessionInfo\0").map(|sym| *sym);
        let GetA2dpStatus = __library.get(b"GetA2dpStatus\0").map(|sym| *sym);
        let GetTouchInfoI = __library.get(b"GetTouchInfoI\0").map(|sym| *sym);
        let GetTouchContainerLength = __library.get(b"GetTouchContainerLength\0").map(|sym| *sym);
        let GetTouchSection = __library.get(b"GetTouchSection\0").map(|sym| *sym);
        let GetLastTouchSection = __library.get(b"GetLastTouchSection\0").map(|sym| *sym);
        let iv_strcmp = __library.get(b"iv_strcmp\0").map(|sym| *sym);
        let iv_strncmp = __library.get(b"iv_strncmp\0").map(|sym| *sym);
        let iv_strcasecmp = __library.get(b"iv_strcasecmp\0").map(|sym| *sym);
        let iv_strncasecmp = __library.get(b"iv_strncasecmp\0").map(|sym| *sym);
        let get_encoding_table = __library.get(b"get_encoding_table\0").map(|sym| *sym);
        let LeaveInkViewMain = __library.get(b"LeaveInkViewMain\0").map(|sym| *sym);
        let GetDialogShow = __library.get(b"GetDialogShow\0").map(|sym| *sym);
        let iv_get_obreey_status = __library.get(b"iv_get_obreey_status\0").map(|sym| *sym);
        let get_proxy = __library.get(b"get_proxy\0").map(|sym| *sym);
        let GetNetInfo = __library.get(b"GetNetInfo\0").map(|sym| *sym);
        let GetNetGateway = __library.get(b"GetNetGateway\0").map(|sym| *sym);
        let GetNetDNS = __library.get(b"GetNetDNS\0").map(|sym| *sym);
        let GetNetSignalQuality = __library.get(b"GetNetSignalQuality\0").map(|sym| *sym);
        let GetNetState = __library.get(b"GetNetState\0").map(|sym| *sym);
        let GetLastNetConnectionError = __library
            .get(b"GetLastNetConnectionError\0")
            .map(|sym| *sym);
        let GetNetList = __library.get(b"GetNetList\0").map(|sym| *sym);
        let get_partner_id = __library.get(b"get_partner_id\0").map(|sym| *sym);
        let get_keylock = __library.get(b"get_keylock\0").map(|sym| *sym);
        let get_file_extension = __library.get(b"get_file_extension\0").map(|sym| *sym);
        let get_screen_dpi = __library.get(b"get_screen_dpi\0").map(|sym| *sym);
        let get_screen_scale_factor = __library.get(b"get_screen_scale_factor\0").map(|sym| *sym);
        let DebugResourceBitmaps_trackBitmapDrawing = __library
            .get(b"DebugResourceBitmaps_trackBitmapDrawing\0")
            .map(|sym| *sym);
        let iv_usleep = __library.get(b"iv_usleep\0").map(|sym| *sym);
        let IsUpdateInProcess = __library.get(b"IsUpdateInProcess\0").map(|sym| *sym);
        let PendingHwEventsCount = __library.get(b"PendingHwEventsCount\0").map(|sym| *sym);
        let get_audio_status = __library.get(b"get_audio_status\0").map(|sym| *sym);
        let setTaskOomPriority = __library.get(b"setTaskOomPriority\0").map(|sym| *sym);
        let needCanvasLock = __library.get(b"needCanvasLock\0").map(|sym| *sym);
        let lockCanvasDrawing = __library.get(b"lockCanvasDrawing\0").map(|sym| *sym);
        let unlockCanvasDrawing = __library.get(b"unlockCanvasDrawing\0").map(|sym| *sym);
        let GetCustomGattSessionStatus = __library
            .get(b"GetCustomGattSessionStatus\0")
            .map(|sym| *sym);
        let GetSoftwareLocalizationType = __library
            .get(b"GetSoftwareLocalizationType\0")
            .map(|sym| *sym);
        Ok(inkview {
            __library,
            get_nprocs_conf,
            get_nprocs,
            get_phys_pages,
            get_avphys_pages,
            get_crc_table,
            iv_get_default_font,
            GetHardwareDepth,
            OpenScreen,
            OpenScreenExt,
            InkViewMain,
            CloseApp,
            InitInkview,
            GetOrientation,
            GetGlobalOrientation,
            GetGSensorOrientation,
            ClearScreen,
            GetClip,
            GetClipRect,
            DrawPixel,
            DrawLine,
            DrawLineEx,
            DrawDashLine,
            DrawRect,
            DrawRectRound,
            DrawSelection,
            DrawCircle,
            DrawHorizontalSeparator,
            DrawCircleQuarter,
            GetDefaultFrameCertifiedThickness,
            GetDefaultFrameCertifiedRadius,
            DrawFrameCertified,
            DrawFrameRectCertified,
            DrawFrameCertifiedEx,
            DrawFrameRectCertifiedEx,
            DrawPickOut,
            DrawPickOutEx,
            SetCanvas,
            GetCanvas,
            DrawFrame,
            DrawFrameDialog,
            DrawBorder,
            DrawPager,
            GetPagerRect,
            GetPagerHeight,
            IsPagerEvent,
            PagerHandler,
            DrawDiagonalHatch,
            DrawDiagonalHatchLimits,
            BitmapFromCanvas,
            GetImageType,
            ApplyContrastToBitmap8,
            DrawBitmap,
            DrawBitmapArea,
            DrawBitmapRect,
            DrawBitmapRect2,
            OpenFont,
            OpenFontEx,
            GetFont,
            DrawString,
            DrawStringR,
            DrawTextRect,
            DrawTextRect2,
            DrawTextRect3,
            GetMultilineStringWidth,
            DrawSymbol,
            FullUpdate,
            FullUpdateHQ,
            SoftUpdate,
            SoftUpdateHQ,
            do_partial_update,
            PartialUpdate,
            PartialUpdateBlack,
            PartialUpdateBW,
            PartialUpdateHQ,
            PartialUpdateDU4,
            DynamicUpdate,
            DynamicUpdateBW,
            DynamicUpdateA2,
            ExitUpdateA2,
            IsInA2Update,
            FineUpdate,
            FineUpdateSupported,
            HQUpdateSupported,
            ScheduleUpdate,
            WaitForUpdateComplete,
            GetWaveformTimes,
            SetEventHandler,
            SetEventHandlerEx,
            GetEventHandler,
            SendEvent,
            SendEventEx,
            GetCurrentEventExData,
            ProcessEventLoop,
            ProcessEventLoopQuick,
            FlushEvents,
            iv_evttype,
            IsAnyEvents,
            PrepareForLoop,
            ClearOnExit,
            OpenMenu,
            OpenMenuEx,
            UpdateMenuEx,
            OpenContextMenu,
            OpenMenu3x3,
            GetMenuRect,
            GetMenuRectEx,
            OpenList,
            GetListHeaderLevel,
            OpenDummyList,
            GetKeyboardFlags,
            OpenKeyboard,
            OpenKeyboardEx,
            DrawKeyboard,
            OpenCustomKeyboard,
            GetKeyboardRect,
            GetKeyboardRectWithParams,
            setDrawTopLine,
            OpenPageSelector,
            OpenTimeEdit,
            OpenDirectorySelector,
            OpenFontSelector,
            OpenFontSelectorEx,
            GetFontMenuStruct,
            OpenBookmarks,
            OpenRotateBox,
            OpenProgressbar,
            UpdateProgressbar,
            SetManualPanelUpdates,
            SetPanelType,
            GetPanelType,
            SetShowPanelReader,
            IsShowPanelReader,
            SetPanelSeparatorEnabled,
            IsPanelSeparatorEnabled,
            InitPanel,
            SetPanelKeyForFullScreenEnabled,
            SetPanelTransparent,
            StartPanelProgress,
            StopPanelProgress,
            ShowPanelPackageProgress,
            DrawPanel,
            DrawPanel2,
            DrawPanel3,
            DrawPanel4,
            DrawPanel5,
            OpenControlPanel,
            PanelHeight,
            PanelHeightFBOffset,
            DrawApplicationCaption,
            GetCaptionHeight,
            SetApplicationCaptionHeight,
            LoadApplicationCaptionProperties,
            LoadTaskManagerProperties,
            GetAppGlobalStyle,
            GetAppStyle,
            GetAppStyleEx,
            GetFontSelectorProperties,
            GetCustomFontString,
            GetGlobalConfig,
            OpenConfig,
            OpenConfigEditor,
            OpenConfigSubmenuExt,
            OpenConfigSubmenu,
            UpdateCurrentConfigPage,
            UpdateConfigPage,
            GetKeyMapping,
            GetKeyMappingEx,
            GetKeyMappingExtended,
            NewTask,
            NewTaskEx,
            OpenTask,
            GetCurrentTask,
            GetActiveTask,
            IsTaskActive,
            GetPreviousTask,
            GetPreviousTaskInStack,
            GetTaskList,
            GetTaskInfo,
            FindTaskByBook,
            FindTaskByAppName,
            SetTaskParameters,
            SetActiveTask,
            CloseTask,
            SendEventTo,
            SendEventSyncTo,
            SendRequest,
            SendRequestNoWait,
            SendRequestTo,
            SendRequestToNoWait,
            SendGlobalRequest,
            SetMessageHandler,
            OpenTaskList,
            GetTaskFramebuffer,
            GetTaskFramebufferInfo,
            ReleaseTaskFramebuffer,
            iv_wait_task_activation,
            CopyTaskFb,
            GetFrontlightVersion,
            GetFrontlightState,
            GetFrontlightEnabled,
            OpenFrontLightConfig,
            GetFrontlightColor,
            iv_stat,
            iv_access,
            iv_fopen,
            iv_fread,
            iv_fwrite,
            iv_fseek,
            iv_ftell,
            iv_fclose,
            iv_fclose_no_sync,
            iv_fgetc,
            iv_fgets,
            iv_mkdir,
            iv_buildpath,
            iv_opendir,
            iv_readdir,
            iv_closedir,
            iv_unlink,
            iv_rmdir,
            iv_truncate,
            iv_rename,
            iv_preload,
            iv_sync,
            iv_validate_name,
            iv_setbgresponse,
            iv_ipc_request,
            iv_ipc_request_secure,
            iv_ipc_cmd,
            iv_ipc_request_with_timeout,
            AddTranslation,
            GetCurrentLangText,
            GetLangText,
            GetLangTextF,
            GetLangTextPlural,
            iv_lang_format,
            GetLangTime,
            GetProfileType,
            GetProfileAvatar,
            GetCurrentProfile,
            GetProfilesCountAfterEnum,
            OpenProfileSelector,
            GetLocalProfilesLimit,
            GetSDProfilesLimit,
            GetProfilesLimit,
            GetProfilesList,
            GetCurrentProfileEx,
            GetProfilesCount,
            OpenTheme,
            GetResource,
            GetThemeInt,
            GetThemeString,
            GetLayoutFromTheme,
            GetThemeFont,
            GetThemeRect,
            GetKeyResource,
            GetSupportedFileTypes,
            GetSupportedFileTypesLength,
            GetBookInfo,
            GetBookInfoExt,
            GetBookISBN,
            GetBookCover,
            GetBookCoverEx,
            GetBookSyncStatus,
            GetAssociatedFile,
            SetFileHandler,
            GetFileHandler,
            OpenBook,
            OpenBook2,
            GetLastOpen,
            AddLastOpen,
            OpenLastBooks,
            OpenPlayer,
            GetPlaylist,
            GetCurrentTrack,
            GetTrackSize,
            GetTrackPosition,
            GetPlayerState,
            GetPlayerMode,
            GetVolume,
            GetEqualizer,
            GetAudioPlayingInfo,
            GetHighVolumeTimeout,
            GetSafeVolumeLimit,
            GetHighVolumeMaxInterval,
            GetKeyboardLayoutForOpenedDictionary,
            OpenDictionary,
            GetWordListWithPrefix,
            OpenDictionaryView,
            OpenControlledDictionaryView,
            OpenFastTranslation,
            iv_reflow_start,
            iv_reflow_bt,
            iv_reflow_et,
            iv_reflow_div,
            iv_reflow_addchar,
            iv_reflow_addimage,
            iv_reflow_subpages,
            iv_reflow_render,
            iv_reflow_getchar,
            iv_reflow_getimage,
            iv_reflow_words,
            iv_reflow_getword,
            iv_reflow_clear,
            AddScrolledArea,
            RemoveScrolledArea,
            ClearAllScrolledAreas,
            SetMinimalXScrollIndent,
            SetMinimalYScrollIndent,
            IsAnyScrolledArea,
            SetCurrentApplicationAttribute,
            TestCurrentApplicationAttribute,
            iv_fullscreen,
            iv_nofullscreen,
            iv_sleepmode,
            GetSleepmode,
            GetBatteryPower,
            GetTemperature,
            GetDeviceModel,
            GetHardwareType,
            GetSoftwareVersion,
            GetSerialSoftwareInfo,
            GetSerialNumber,
            GetExternalCardSerialNumber,
            GetWaveformFilename,
            GetDeviceKey,
            GetDeviceFingerprint,
            OpenMainMenu,
            CloseAllTasks,
            OpenCalendar,
            StartSoftwareUpdate,
            HavePowerForSoftwareUpdate,
            GetWiFiScanResults,
            GetHwAddress,
            GetHwBTAddress,
            GetHw3GIMEI,
            GetBluetoothMode,
            GetBluetoothStatus,
            OpenBTdevicesMenu,
            GetBTservice,
            OpenNetworkInfo,
            GetUserAgent,
            GetDefaultUserAgent,
            GetProxyUrl,
            GetSessionStatus,
            GetHeader,
            GetSessionInfo,
            GetA2dpStatus,
            GetTouchInfoI,
            GetTouchContainerLength,
            GetTouchSection,
            GetLastTouchSection,
            iv_strcmp,
            iv_strncmp,
            iv_strcasecmp,
            iv_strncasecmp,
            get_encoding_table,
            LeaveInkViewMain,
            GetDialogShow,
            iv_get_obreey_status,
            get_proxy,
            GetNetInfo,
            GetNetGateway,
            GetNetDNS,
            GetNetSignalQuality,
            GetNetState,
            GetLastNetConnectionError,
            GetNetList,
            get_partner_id,
            get_keylock,
            get_file_extension,
            get_screen_dpi,
            get_screen_scale_factor,
            DebugResourceBitmaps_trackBitmapDrawing,
            iv_usleep,
            IsUpdateInProcess,
            PendingHwEventsCount,
            get_audio_status,
            setTaskOomPriority,
            needCanvasLock,
            lockCanvasDrawing,
            unlockCanvasDrawing,
            GetCustomGattSessionStatus,
            GetSoftwareLocalizationType,
        })
    }
    pub unsafe fn get_nprocs_conf(&self) -> ::std::os::raw::c_int {
        (self
            .get_nprocs_conf
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_nprocs(&self) -> ::std::os::raw::c_int {
        (self
            .get_nprocs
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_phys_pages(&self) -> ::std::os::raw::c_long {
        (self
            .get_phys_pages
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_avphys_pages(&self) -> ::std::os::raw::c_long {
        (self
            .get_avphys_pages
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_crc_table(&self) -> *const z_crc_t {
        (self
            .get_crc_table
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_get_default_font(&self, fonttype: FONT_TYPE) -> *mut ::std::os::raw::c_char {
        (self
            .iv_get_default_font
            .as_ref()
            .expect("Expected function, got error."))(fonttype)
    }
    pub unsafe fn GetHardwareDepth(&self) -> ::std::os::raw::c_int {
        (self
            .GetHardwareDepth
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenScreen(&self) {
        (self
            .OpenScreen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenScreenExt(&self) {
        (self
            .OpenScreenExt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn InkViewMain(&self, h: iv_handler) {
        (self
            .InkViewMain
            .as_ref()
            .expect("Expected function, got error."))(h)
    }
    pub unsafe fn CloseApp(&self) {
        (self
            .CloseApp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn InitInkview(&self, reg_flags: ::std::os::raw::c_int) {
        (self
            .InitInkview
            .as_ref()
            .expect("Expected function, got error."))(reg_flags)
    }
    pub unsafe fn GetOrientation(&self) -> ::std::os::raw::c_int {
        (self
            .GetOrientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetGlobalOrientation(&self) -> ::std::os::raw::c_int {
        (self
            .GetGlobalOrientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetGSensorOrientation(&self) -> ::std::os::raw::c_int {
        (self
            .GetGSensorOrientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ClearScreen(&self) {
        (self
            .ClearScreen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetClip(
        &self,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) {
        (self
            .GetClip
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn GetClipRect(&self) -> irect {
        (self
            .GetClipRect
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DrawPixel(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawPixel
            .as_ref()
            .expect("Expected function, got error."))(x, y, color)
    }
    pub unsafe fn DrawLine(
        &self,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawLine
            .as_ref()
            .expect("Expected function, got error."))(x1, y1, x2, y2, color)
    }
    pub unsafe fn DrawLineEx(
        &self,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
    ) {
        (self
            .DrawLineEx
            .as_ref()
            .expect("Expected function, got error."))(x1, y1, x2, y2, color, step)
    }
    pub unsafe fn DrawDashLine(
        &self,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        fill: ::std::os::raw::c_uint,
        space: ::std::os::raw::c_uint,
    ) {
        (self
            .DrawDashLine
            .as_ref()
            .expect("Expected function, got error."))(x1, y1, x2, y2, color, fill, space)
    }
    pub unsafe fn DrawRect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawRect
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, color)
    }
    pub unsafe fn DrawRectRound(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) {
        (self
            .DrawRectRound
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4, arg5, arg6)
    }
    pub unsafe fn DrawSelection(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawSelection
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, color)
    }
    pub unsafe fn DrawCircle(
        &self,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawCircle
            .as_ref()
            .expect("Expected function, got error."))(x0, y0, radius, color)
    }
    pub unsafe fn DrawHorizontalSeparator(
        &self,
        x0: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) {
        (self
            .DrawHorizontalSeparator
            .as_ref()
            .expect("Expected function, got error."))(x0, y, w, type_)
    }
    #[doc = " @brief DrawCircleQuarter - draw smooth circle (background is considered white)\n @param x0 - x coordinate of center\n @param y0 - y coordinate of center\n @param radius - outer radius ( so if width > 0 then inner radius is radius - width + 1)\n @param direction - part of circle to draw\n @param thickness - circle line width\n @param color - circle color\n @param bg_color - background color (use with flag ROUND_FILL_OUTSIDE_BG)"]
    pub unsafe fn DrawCircleQuarter(
        &self,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
        thickness: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        bg_color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawCircleQuarter
            .as_ref()
            .expect("Expected function, got error."))(
            x0, y0, radius, direction, thickness, color, bg_color,
        )
    }
    #[doc = " @brief GetDefaultFrameCertifiedThickness\n @param thickness - negative value - certified default thickness\n @return certified thickness according \"edef_thickness\""]
    pub unsafe fn GetDefaultFrameCertifiedThickness(
        &self,
        thickness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetDefaultFrameCertifiedThickness
            .as_ref()
            .expect("Expected function, got error."))(thickness)
    }
    #[doc = " @brief getDefaultFrameCertifiedRadius\n @param thickness - using line thickness for line (-1 - use certified default thickness)\n @return certified radius according \"thickness\""]
    pub unsafe fn GetDefaultFrameCertifiedRadius(
        &self,
        thickness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetDefaultFrameCertifiedRadius
            .as_ref()
            .expect("Expected function, got error."))(thickness)
    }
    #[doc = " @brief DrawFrameCertified - draw rect (x, y, w, h) with round corners\n call DrawFrameCertifiedEx(x, y, w, h, thickness, SIDE_ALL, ROUND_DEFAULT, RADIUS_DEPEND_ON_THICKNESS, BLACK, WHITE);"]
    pub unsafe fn DrawFrameCertified(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        thickness: ::std::os::raw::c_int,
    ) {
        (self
            .DrawFrameCertified
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, thickness)
    }
    #[doc = " @brief DrawFrameRectCertified - draw rect (x, y, w, h) with round corners\n call DrawFrameCertified(x, y, w, h, thickness);"]
    pub unsafe fn DrawFrameRectCertified(&self, rect: irect, thickness: ::std::os::raw::c_int) {
        (self
            .DrawFrameRectCertified
            .as_ref()
            .expect("Expected function, got error."))(rect, thickness)
    }
    #[doc = " @brief DrawFrameCertified - draw rect straight lines on \"sides\" in rect(x, y, w, h) and with round corners in \"direction\"\n @param x, y, w, h - rect margins\n @param thickness - line thickness\n @param sides - draw straight line sides\n @param direction - round corners\n @param radius - round radius of corners (RADIUS_DEPEND_ON_THICKNESS - default value, negative value depend on THICKNESS_DEF_*)\n @param color - line color\n @param bg_color - background color (use with flag ROUND_FILL_OUTSIDE_BG)"]
    pub unsafe fn DrawFrameCertifiedEx(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        thickness: ::std::os::raw::c_int,
        sides: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        bg_color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawFrameCertifiedEx
            .as_ref()
            .expect("Expected function, got error."))(
            x, y, w, h, thickness, sides, direction, radius, color, bg_color,
        )
    }
    #[doc = " @brief DrawFrameRectCertified - draw rect straight lines on \"sides\" in rect(x, y, w, h) and with round corners in \"direction\"\n @param rect - rect margins\n @param thickness - line thickness\n @param sides - draw straight line sides\n @param direction - round corners\n @param radius - round radius of corners (RADIUS_DEPEND_ON_THICKNESS - default value, negative value depend on THICKNESS_DEF_*)\n @param color - line color\n @param bg_color - background color (use with flag ROUND_FILL_OUTSIDE_BG)"]
    pub unsafe fn DrawFrameRectCertifiedEx(
        &self,
        rect: irect,
        thickness: ::std::os::raw::c_int,
        sides: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        bg_color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawFrameRectCertifiedEx
            .as_ref()
            .expect("Expected function, got error."))(
            rect, thickness, sides, direction, radius, color, bg_color,
        )
    }
    pub unsafe fn DrawPickOut(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_char,
    ) {
        (self
            .DrawPickOut
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, key)
    }
    pub unsafe fn DrawPickOutEx(&self, rect: *const irect, key: *const ::std::os::raw::c_char) {
        (self
            .DrawPickOutEx
            .as_ref()
            .expect("Expected function, got error."))(rect, key)
    }
    pub unsafe fn SetCanvas(&self, c: *mut icanvas) {
        (self
            .SetCanvas
            .as_ref()
            .expect("Expected function, got error."))(c)
    }
    pub unsafe fn GetCanvas(&self) -> *mut icanvas {
        (self
            .GetCanvas
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DrawFrame(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        icon: *mut ibitmap,
        title: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        clientarea: *mut irect,
    ) {
        (self
            .DrawFrame
            .as_ref()
            .expect("Expected function, got error."))(
            x, y, w, h, icon, title, flags, clientarea
        )
    }
    pub unsafe fn DrawFrameDialog(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        icon: *mut ibitmap,
        title: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        clientarea: *mut irect,
    ) {
        (self
            .DrawFrameDialog
            .as_ref()
            .expect("Expected function, got error."))(
            x, y, w, h, icon, title, flags, clientarea
        )
    }
    pub unsafe fn DrawBorder(
        &self,
        border_rect: *const irect,
        border_size: ::std::os::raw::c_int,
        style: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawBorder
            .as_ref()
            .expect("Expected function, got error."))(
            border_rect,
            border_size,
            style,
            radius,
            color,
        )
    }
    pub unsafe fn DrawPager(&self, pager: *mut ipager) {
        (self
            .DrawPager
            .as_ref()
            .expect("Expected function, got error."))(pager)
    }
    pub unsafe fn GetPagerRect(&self, pager: *mut ipager) -> irect {
        (self
            .GetPagerRect
            .as_ref()
            .expect("Expected function, got error."))(pager)
    }
    pub unsafe fn GetPagerHeight(&self, pager: *mut ipager) -> ::std::os::raw::c_int {
        (self
            .GetPagerHeight
            .as_ref()
            .expect("Expected function, got error."))(pager)
    }
    pub unsafe fn IsPagerEvent(
        &self,
        pager: *mut ipager,
        type_: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .IsPagerEvent
            .as_ref()
            .expect("Expected function, got error."))(pager, type_, x, y)
    }
    pub unsafe fn PagerHandler(
        &self,
        pager: *mut ipager,
        type_: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PagerHandler
            .as_ref()
            .expect("Expected function, got error."))(pager, type_, x, y)
    }
    #[doc = " Draw diagonal hatch in area. step should be positive and (step - 1) is horizontal distance in pixels between hatches\n (e.g. step 1 means no distance)\n IMPORTANT! this function works incorrectly and actually uses width = w + 1"]
    pub unsafe fn DrawDiagonalHatch(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawDiagonalHatch
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, step, color)
    }
    pub unsafe fn DrawDiagonalHatchLimits(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        limit: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) {
        (self
            .DrawDiagonalHatchLimits
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, step, color, limit)
    }
    pub unsafe fn BitmapFromCanvas(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rotate: ::std::os::raw::c_int,
        canvas: *mut icanvas,
    ) -> *mut ibitmap {
        (self
            .BitmapFromCanvas
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, rotate, canvas)
    }
    pub unsafe fn GetImageType(&self, path: *const ::std::os::raw::c_char) -> ImageSignatureType {
        (self
            .GetImageType
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn ApplyContrastToBitmap8(
        &self,
        bmp: *mut ibitmap,
        contrast: ::std::os::raw::c_int,
    ) {
        (self
            .ApplyContrastToBitmap8
            .as_ref()
            .expect("Expected function, got error."))(bmp, contrast)
    }
    pub unsafe fn DrawBitmap(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        b: *const ibitmap,
    ) {
        (self
            .DrawBitmap
            .as_ref()
            .expect("Expected function, got error."))(x, y, b)
    }
    pub unsafe fn DrawBitmapArea(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        b: *const ibitmap,
        bx: ::std::os::raw::c_int,
        by: ::std::os::raw::c_int,
        bw: ::std::os::raw::c_int,
        bh: ::std::os::raw::c_int,
    ) {
        (self
            .DrawBitmapArea
            .as_ref()
            .expect("Expected function, got error."))(x, y, b, bx, by, bw, bh)
    }
    pub unsafe fn DrawBitmapRect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        b: *const ibitmap,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .DrawBitmapRect
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, b, flags)
    }
    pub unsafe fn DrawBitmapRect2(&self, rect: *const irect, b: *const ibitmap) {
        (self
            .DrawBitmapRect2
            .as_ref()
            .expect("Expected function, got error."))(rect, b)
    }
    pub unsafe fn OpenFont(
        &self,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        aa: ::std::os::raw::c_int,
    ) -> *mut ifont {
        (self
            .OpenFont
            .as_ref()
            .expect("Expected function, got error."))(name, size, aa)
    }
    pub unsafe fn OpenFontEx(
        &self,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        line_height: ::std::os::raw::c_int,
        aa: ::std::os::raw::c_int,
    ) -> *mut ifont {
        (self
            .OpenFontEx
            .as_ref()
            .expect("Expected function, got error."))(name, size, line_height, aa)
    }
    pub unsafe fn GetFont(&self) -> *const ifont {
        (self
            .GetFont
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DrawString(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
    ) {
        (self
            .DrawString
            .as_ref()
            .expect("Expected function, got error."))(x, y, s)
    }
    pub unsafe fn DrawStringR(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
    ) {
        (self
            .DrawStringR
            .as_ref()
            .expect("Expected function, got error."))(x, y, s)
    }
    pub unsafe fn DrawTextRect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .DrawTextRect
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, s, flags)
    }
    pub unsafe fn DrawTextRect2(
        &self,
        rect: *const irect,
        s: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .DrawTextRect2
            .as_ref()
            .expect("Expected function, got error."))(rect, s)
    }
    pub unsafe fn DrawTextRect3(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .DrawTextRect3
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, s, flags, height)
    }
    pub unsafe fn GetMultilineStringWidth(
        &self,
        str_: *const ::std::os::raw::c_char,
        area_width: ::std::os::raw::c_int,
        font: *mut ifont,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetMultilineStringWidth
            .as_ref()
            .expect("Expected function, got error."))(str_, area_width, font, flags)
    }
    pub unsafe fn DrawSymbol(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        symbol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawSymbol
            .as_ref()
            .expect("Expected function, got error."))(x, y, symbol)
    }
    pub unsafe fn FullUpdate(&self) {
        (self
            .FullUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FullUpdateHQ(&self) {
        (self
            .FullUpdateHQ
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SoftUpdate(&self) {
        (self
            .SoftUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SoftUpdateHQ(&self) {
        (self
            .SoftUpdateHQ
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn do_partial_update(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flag: ::std::os::raw::c_uint,
        dynamic: ::std::os::raw::c_int,
    ) {
        (self
            .do_partial_update
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, flag, dynamic)
    }
    pub unsafe fn PartialUpdate(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdate
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn PartialUpdateBlack(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdateBlack
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn PartialUpdateBW(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdateBW
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn PartialUpdateHQ(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdateHQ
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn PartialUpdateDU4(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdateDU4
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn DynamicUpdate(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .DynamicUpdate
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn DynamicUpdateBW(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .DynamicUpdateBW
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    #[doc = " Fast update of the screen area. This function call is asyncronous (return before update finished).\n It takes some time (hardware dependent, for 622 it is 125 ms) to actually update screen and calling any screen update function\n during this time for the intersected screen area may lead to artefacts on resulting image.\n TODO clarify is it neccesary to call dithering before the call?"]
    pub unsafe fn DynamicUpdateA2(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .DynamicUpdateA2
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn ExitUpdateA2(&self) {
        (self
            .ExitUpdateA2
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsInA2Update(&self) -> ::std::os::raw::c_int {
        (self
            .IsInA2Update
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FineUpdate(&self) {
        (self
            .FineUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FineUpdateSupported(&self) -> ::std::os::raw::c_int {
        (self
            .FineUpdateSupported
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn HQUpdateSupported(&self) -> ::std::os::raw::c_int {
        (self
            .HQUpdateSupported
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ScheduleUpdate(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        bw: ::std::os::raw::c_int,
    ) {
        (self
            .ScheduleUpdate
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, bw)
    }
    pub unsafe fn WaitForUpdateComplete(&self) {
        (self
            .WaitForUpdateComplete
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetWaveformTimes(&self, result: *mut ::std::os::raw::c_ushort) {
        (self
            .GetWaveformTimes
            .as_ref()
            .expect("Expected function, got error."))(result)
    }
    pub unsafe fn SetEventHandler(&self, hproc: iv_handler) -> iv_handler {
        (self
            .SetEventHandler
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn SetEventHandlerEx(&self, hproc: iv_handler) -> iv_handler {
        (self
            .SetEventHandlerEx
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn GetEventHandler(&self) -> iv_handler {
        (self
            .GetEventHandler
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SendEvent(
        &self,
        hproc: iv_handler,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) {
        (self
            .SendEvent
            .as_ref()
            .expect("Expected function, got error."))(hproc, type_, par1, par2)
    }
    pub unsafe fn SendEventEx(
        &self,
        hproc: iv_handler,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) {
        (self
            .SendEventEx
            .as_ref()
            .expect("Expected function, got error."))(hproc, type_, par1, par2, data)
    }
    pub unsafe fn GetCurrentEventExData(&self) -> *mut ::std::os::raw::c_void {
        (self
            .GetCurrentEventExData
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ProcessEventLoop(&self) {
        (self
            .ProcessEventLoop
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ProcessEventLoopQuick(&self) {
        (self
            .ProcessEventLoopQuick
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FlushEvents(&self) {
        (self
            .FlushEvents
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_evttype(&self, type_: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .iv_evttype
            .as_ref()
            .expect("Expected function, got error."))(type_)
    }
    pub unsafe fn IsAnyEvents(&self) -> ::std::os::raw::c_char {
        (self
            .IsAnyEvents
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PrepareForLoop(&self, hproc: iv_handler) {
        (self
            .PrepareForLoop
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn ClearOnExit(&self) {
        (self
            .ClearOnExit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenMenu(
        &self,
        menu: *mut imenu,
        pos: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        hproc: iv_menuhandler,
    ) {
        (self
            .OpenMenu
            .as_ref()
            .expect("Expected function, got error."))(menu, pos, x, y, hproc)
    }
    pub unsafe fn OpenMenuEx(
        &self,
        menu: *mut imenuex,
        pos: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        hproc: iv_menuhandler,
    ) {
        (self
            .OpenMenuEx
            .as_ref()
            .expect("Expected function, got error."))(menu, pos, x, y, hproc)
    }
    pub unsafe fn UpdateMenuEx(&self, menu: *mut imenuex) {
        (self
            .UpdateMenuEx
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn OpenContextMenu(&self, menu: *const icontext_menu) {
        (self
            .OpenContextMenu
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn OpenMenu3x3(
        &self,
        mbitmap: *const ibitmap,
        strings: *mut *const ::std::os::raw::c_char,
        hproc: iv_menuhandler,
    ) {
        (self
            .OpenMenu3x3
            .as_ref()
            .expect("Expected function, got error."))(mbitmap, strings, hproc)
    }
    pub unsafe fn GetMenuRect(&self, menu: *const imenu) -> irect {
        (self
            .GetMenuRect
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn GetMenuRectEx(&self, menu: *const imenuex) -> irect {
        (self
            .GetMenuRectEx
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn OpenList(
        &self,
        title: *const ::std::os::raw::c_char,
        background: *const ibitmap,
        itemw: ::std::os::raw::c_int,
        itemh: ::std::os::raw::c_int,
        itemcount: ::std::os::raw::c_int,
        cpos: ::std::os::raw::c_int,
        hproc: iv_listhandler,
    ) {
        (self
            .OpenList
            .as_ref()
            .expect("Expected function, got error."))(
            title, background, itemw, itemh, itemcount, cpos, hproc,
        )
    }
    pub unsafe fn GetListHeaderLevel(&self) -> ::std::os::raw::c_int {
        (self
            .GetListHeaderLevel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenDummyList(
        &self,
        title: *const ::std::os::raw::c_char,
        background: *const ibitmap,
        text: *mut ::std::os::raw::c_char,
        hproc: iv_listhandler,
    ) {
        (self
            .OpenDummyList
            .as_ref()
            .expect("Expected function, got error."))(title, background, text, hproc)
    }
    #[doc = " @brief GetKeyboardFlags is thread safe in device environment\n @return flags with wich keyboard was opened"]
    pub unsafe fn GetKeyboardFlags(&self) -> ::std::os::raw::c_int {
        (self
            .GetKeyboardFlags
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenKeyboard(
        &self,
        title: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        hproc: iv_keyboardhandler,
    ) {
        (self
            .OpenKeyboard
            .as_ref()
            .expect("Expected function, got error."))(title, buffer, maxlen, flags, hproc)
    }
    pub unsafe fn OpenKeyboardEx(
        &self,
        title: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        hproc: iv_keyboardhandlerex,
        cb_data: *mut ::std::os::raw::c_void,
    ) {
        (self
            .OpenKeyboardEx
            .as_ref()
            .expect("Expected function, got error."))(
            title, buffer, maxlen, flags, hproc, cb_data
        )
    }
    pub unsafe fn DrawKeyboard(&self) {
        (self
            .DrawKeyboard
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenCustomKeyboard(
        &self,
        filename: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        hproc: iv_keyboardhandler,
    ) {
        (self
            .OpenCustomKeyboard
            .as_ref()
            .expect("Expected function, got error."))(
            filename, title, buffer, maxlen, flags, hproc
        )
    }
    pub unsafe fn GetKeyboardRect(&self, rect: *mut irect) {
        (self
            .GetKeyboardRect
            .as_ref()
            .expect("Expected function, got error."))(rect)
    }
    pub unsafe fn GetKeyboardRectWithParams(
        &self,
        title: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> irect {
        (self
            .GetKeyboardRectWithParams
            .as_ref()
            .expect("Expected function, got error."))(title, buffer, flags)
    }
    pub unsafe fn setDrawTopLine(&self, kbd_draw_top_line_: ::std::os::raw::c_int) {
        (self
            .setDrawTopLine
            .as_ref()
            .expect("Expected function, got error."))(kbd_draw_top_line_)
    }
    pub unsafe fn OpenPageSelector(&self, hproc: iv_pageselecthandler) {
        (self
            .OpenPageSelector
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn OpenTimeEdit(
        &self,
        title: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        intime: ::std::os::raw::c_long,
        hproc: iv_timeedithandler,
    ) {
        (self
            .OpenTimeEdit
            .as_ref()
            .expect("Expected function, got error."))(title, x, y, intime, hproc)
    }
    pub unsafe fn OpenDirectorySelector(
        &self,
        title: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        hproc: iv_dirselecthandler,
    ) {
        (self
            .OpenDirectorySelector
            .as_ref()
            .expect("Expected function, got error."))(title, buf, len, hproc)
    }
    pub unsafe fn OpenFontSelector(
        &self,
        title: *const ::std::os::raw::c_char,
        font: *const ::std::os::raw::c_char,
        with_size: ::std::os::raw::c_int,
        hproc: iv_fontselecthandler,
    ) {
        (self
            .OpenFontSelector
            .as_ref()
            .expect("Expected function, got error."))(title, font, with_size, hproc)
    }
    pub unsafe fn OpenFontSelectorEx(&self, menu: *const ifont_menu) {
        (self
            .OpenFontSelectorEx
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn GetFontMenuStruct(&self) -> ifont_menu {
        (self
            .GetFontMenuStruct
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenBookmarks(
        &self,
        page: ::std::os::raw::c_int,
        position: ::std::os::raw::c_longlong,
        bmklist: *mut ::std::os::raw::c_int,
        poslist: *mut ::std::os::raw::c_longlong,
        bmkcount: *mut ::std::os::raw::c_int,
        maxbmks: ::std::os::raw::c_int,
        hproc: iv_bmkhandler,
    ) {
        (self
            .OpenBookmarks
            .as_ref()
            .expect("Expected function, got error."))(
            page, position, bmklist, poslist, bmkcount, maxbmks, hproc,
        )
    }
    pub unsafe fn OpenRotateBox(&self, hproc: iv_rotatehandler) {
        (self
            .OpenRotateBox
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn OpenProgressbar(
        &self,
        icon: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
        hproc: iv_dialoghandler,
    ) {
        (self
            .OpenProgressbar
            .as_ref()
            .expect("Expected function, got error."))(icon, title, text, percent, hproc)
    }
    pub unsafe fn UpdateProgressbar(
        &self,
        text: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .UpdateProgressbar
            .as_ref()
            .expect("Expected function, got error."))(text, percent)
    }
    pub unsafe fn SetManualPanelUpdates(
        &self,
        enable: ::std::os::raw::c_int,
        handler: iv_panelupdateshandler,
    ) {
        (self
            .SetManualPanelUpdates
            .as_ref()
            .expect("Expected function, got error."))(enable, handler)
    }
    #[doc = " Function changes panel working style\n @param type when is 0 panel is completely off, otherwise it is a set of PANEL_FLAGS\n @see enum PANEL_FLAGS"]
    pub unsafe fn SetPanelType(&self, type_: ::std::os::raw::c_int) {
        (self
            .SetPanelType
            .as_ref()
            .expect("Expected function, got error."))(type_)
    }
    pub unsafe fn GetPanelType(&self) -> ::std::os::raw::c_int {
        (self
            .GetPanelType
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief SetShowStatusBar is called to show enable/disable showing status bar in reader\n @param show takes 0 to disable status bar, othe value to enable"]
    pub unsafe fn SetShowPanelReader(&self, show: ::std::os::raw::c_int) {
        (self
            .SetShowPanelReader
            .as_ref()
            .expect("Expected function, got error."))(show)
    }
    pub unsafe fn IsShowPanelReader(&self) -> ::std::os::raw::c_int {
        (self
            .IsShowPanelReader
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetPanelSeparatorEnabled(
        &self,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SetPanelSeparatorEnabled
            .as_ref()
            .expect("Expected function, got error."))(enable)
    }
    pub unsafe fn IsPanelSeparatorEnabled(&self) -> ::std::os::raw::c_int {
        (self
            .IsPanelSeparatorEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn InitPanel(&self) {
        (self
            .InitPanel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetPanelKeyForFullScreenEnabled(&self, key: *const ::std::os::raw::c_char) {
        (self
            .SetPanelKeyForFullScreenEnabled
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn SetPanelTransparent(&self, value: ::std::os::raw::c_int) {
        (self
            .SetPanelTransparent
            .as_ref()
            .expect("Expected function, got error."))(value)
    }
    #[doc = " @brief StartPanelProgress start gui animation on panel\n @param progress currently not used, but may be used in future, values between 0 - 100\n after @param timeoutMs will be automatically stoped, negative value meens animation will run always"]
    pub unsafe fn StartPanelProgress(
        &self,
        progress: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) {
        (self
            .StartPanelProgress
            .as_ref()
            .expect("Expected function, got error."))(progress, timeoutMs)
    }
    #[doc = " @brief StopPanelProgress stops gui animation"]
    pub unsafe fn StopPanelProgress(&self) {
        (self
            .StopPanelProgress
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ShowPanelPackageProgress(
        &self,
        progress: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) {
        (self
            .ShowPanelPackageProgress
            .as_ref()
            .expect("Expected function, got error."))(progress, timeout)
    }
    pub unsafe fn DrawPanel(
        &self,
        icon: *const ibitmap,
        text: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel
            .as_ref()
            .expect("Expected function, got error."))(icon, text, title, percent)
    }
    pub unsafe fn DrawPanel2(
        &self,
        icon: *const ibitmap,
        text: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
        readingModeEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel2
            .as_ref()
            .expect("Expected function, got error."))(
            icon, text, title, percent, readingModeEnable
        )
    }
    pub unsafe fn DrawPanel3(
        &self,
        icon: *const ibitmap,
        currentPage: ::std::os::raw::c_int,
        totalPages: ::std::os::raw::c_int,
        readingModeEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel3
            .as_ref()
            .expect("Expected function, got error."))(
            icon,
            currentPage,
            totalPages,
            readingModeEnable,
        )
    }
    pub unsafe fn DrawPanel4(
        &self,
        icon: *const ibitmap,
        bookName: *const ::std::os::raw::c_char,
        currentPage: ::std::os::raw::c_int,
        totalPages: ::std::os::raw::c_int,
        readingModeEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel4
            .as_ref()
            .expect("Expected function, got error."))(
            icon,
            bookName,
            currentPage,
            totalPages,
            readingModeEnable,
        )
    }
    pub unsafe fn DrawPanel5(
        &self,
        icon: *const ibitmap,
        text: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
        readingModeEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel5
            .as_ref()
            .expect("Expected function, got error."))(
            icon, text, title, percent, readingModeEnable
        )
    }
    #[doc = " @brief OpenControlPanel calls control panel application\n @param ctx is parameter wich contains\n special panel configurations options"]
    pub unsafe fn OpenControlPanel(&self, ctx: *mut control_panel) {
        (self
            .OpenControlPanel
            .as_ref()
            .expect("Expected function, got error."))(ctx)
    }
    pub unsafe fn PanelHeight(&self) -> ::std::os::raw::c_int {
        (self
            .PanelHeight
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PanelHeightFBOffset(&self) -> ::std::os::raw::c_int {
        (self
            .PanelHeightFBOffset
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DrawApplicationCaption(
        &self,
        caption: *const ::std::os::raw::c_char,
        title_rect: *const irect,
    ) {
        (self
            .DrawApplicationCaption
            .as_ref()
            .expect("Expected function, got error."))(caption, title_rect)
    }
    pub unsafe fn GetCaptionHeight(&self) -> ::std::os::raw::c_int {
        (self
            .GetCaptionHeight
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetApplicationCaptionHeight(&self, h: ::std::os::raw::c_int) {
        (self
            .SetApplicationCaptionHeight
            .as_ref()
            .expect("Expected function, got error."))(h)
    }
    pub unsafe fn LoadApplicationCaptionProperties(&self) -> *mut iapp_caption {
        (self
            .LoadApplicationCaptionProperties
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LoadTaskManagerProperties(&self) -> *mut itaskmgr {
        (self
            .LoadTaskManagerProperties
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetAppGlobalStyle(&self) -> AppStyles {
        (self
            .GetAppGlobalStyle
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetAppStyle(&self, key: *const ::std::os::raw::c_char) -> AppStyles {
        (self
            .GetAppStyle
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn GetAppStyleEx(&self, key: *const ::std::os::raw::c_char) -> *mut iappstyle {
        (self
            .GetAppStyleEx
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn GetFontSelectorProperties(&self) -> *mut font_selector_properties {
        (self
            .GetFontSelectorProperties
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetCustomFontString(&self) -> *const ::std::os::raw::c_char {
        (self
            .GetCustomFontString
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetGlobalConfig(&self) -> *mut iconfig {
        (self
            .GetGlobalConfig
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenConfig(
        &self,
        path: *const ::std::os::raw::c_char,
        ce: *mut iconfigedit,
    ) -> *mut iconfig {
        (self
            .OpenConfig
            .as_ref()
            .expect("Expected function, got error."))(path, ce)
    }
    pub unsafe fn OpenConfigEditor(
        &self,
        header: *const ::std::os::raw::c_char,
        cfg: *mut iconfig,
        ce: *mut iconfigedit,
        hproc: iv_confighandler,
        cproc: iv_itemchangehandler,
    ) {
        (self
            .OpenConfigEditor
            .as_ref()
            .expect("Expected function, got error."))(header, cfg, ce, hproc, cproc)
    }
    pub unsafe fn OpenConfigSubmenuExt(
        &self,
        title: *const ::std::os::raw::c_char,
        ice: *mut iconfigedit,
        pos: ::std::os::raw::c_int,
    ) {
        (self
            .OpenConfigSubmenuExt
            .as_ref()
            .expect("Expected function, got error."))(title, ice, pos)
    }
    pub unsafe fn OpenConfigSubmenu(
        &self,
        title: *const ::std::os::raw::c_char,
        ice: *mut iconfigedit,
    ) {
        (self
            .OpenConfigSubmenu
            .as_ref()
            .expect("Expected function, got error."))(title, ice)
    }
    pub unsafe fn UpdateCurrentConfigPage(&self) {
        (self
            .UpdateCurrentConfigPage
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn UpdateConfigPage(
        &self,
        title: *const ::std::os::raw::c_char,
        ice: *mut iconfigedit,
    ) {
        (self
            .UpdateConfigPage
            .as_ref()
            .expect("Expected function, got error."))(title, ice)
    }
    #[doc = " @brief GetKeyMapping used to read TEXT key mapping from default config\n @param act0 and @param act1 are are arrays of CSTtring wich look like \"@KA_...\"\n FOR EXAMPLE act0[KEY_PREV] will contain an action wich should happen when user PRESSES IV_KEY_PREV,\n act1[KEY_PREV] will contain an action wich should happen when user HOLS IV_KEY_PREV,\n IMPORTANT !! pointers are not always valid, use strdup to handle it"]
    pub unsafe fn GetKeyMapping(
        &self,
        act0: *mut *const ::std::os::raw::c_char,
        act1: *mut *const ::std::os::raw::c_char,
    ) {
        (self
            .GetKeyMapping
            .as_ref()
            .expect("Expected function, got error."))(act0, act1)
    }
    #[doc = " @brief GetKeyMappingEx is similar to GetKeyMapping\n @param what may be KEYMAPPING_GLOBAL or KEYMAPPING_TXT or KEYMAPPING_PDF\n @param act0 @see GetKeyMapping\n @param act1 @see GetKeyMapping\n @param count contains key count, it is the size of act0 and act1 maximal size\n IMPORTANT !! pointers are not always valid, use strdup to handle it"]
    pub unsafe fn GetKeyMappingEx(
        &self,
        what: ::std::os::raw::c_int,
        act0: *mut *const ::std::os::raw::c_char,
        act1: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) {
        (self
            .GetKeyMappingEx
            .as_ref()
            .expect("Expected function, got error."))(what, act0, act1, count)
    }
    pub unsafe fn GetKeyMappingExtended(
        &self,
        type_: keymap_t,
        act0: *mut *const ::std::os::raw::c_char,
        act1: *mut *const ::std::os::raw::c_char,
        act2: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) {
        (self
            .GetKeyMappingExtended
            .as_ref()
            .expect("Expected function, got error."))(type_, act0, act1, act2, count)
    }
    pub unsafe fn NewTask(
        &self,
        path: *const ::std::os::raw::c_char,
        args: *const *const ::std::os::raw::c_char,
        appname: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        icon: *const ibitmap,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .NewTask
            .as_ref()
            .expect("Expected function, got error."))(path, args, appname, name, icon, flags)
    }
    pub unsafe fn NewTaskEx(
        &self,
        path: *const ::std::os::raw::c_char,
        args: *const *mut ::std::os::raw::c_char,
        appname: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        icon: *const ibitmap,
        flags: ::std::os::raw::c_uint,
        run_as_reader_if_needed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .NewTaskEx
            .as_ref()
            .expect("Expected function, got error."))(
            path,
            args,
            appname,
            name,
            icon,
            flags,
            run_as_reader_if_needed,
        )
    }
    #[doc = " @brief OpenTask runs child process or make active existing process of specified exe if exist\n @param path - path/to/exe\n @param argc - args ptr\n @param argv - args count\n @param flags - TASK_* macros\n @return 0 if created | 1 if already exist | -1 if fail"]
    pub unsafe fn OpenTask(
        &self,
        path: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .OpenTask
            .as_ref()
            .expect("Expected function, got error."))(path, argc, argv, flags)
    }
    pub unsafe fn GetCurrentTask(&self) -> ::std::os::raw::c_int {
        (self
            .GetCurrentTask
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetActiveTask(
        &self,
        task: *mut ::std::os::raw::c_int,
        subtask: *mut ::std::os::raw::c_int,
    ) {
        (self
            .GetActiveTask
            .as_ref()
            .expect("Expected function, got error."))(task, subtask)
    }
    pub unsafe fn IsTaskActive(&self) -> ::std::os::raw::c_int {
        (self
            .IsTaskActive
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetPreviousTask(
        &self,
        task: *mut ::std::os::raw::c_int,
        subtask: *mut ::std::os::raw::c_int,
    ) {
        (self
            .GetPreviousTask
            .as_ref()
            .expect("Expected function, got error."))(task, subtask)
    }
    pub unsafe fn GetPreviousTaskInStack(
        &self,
        task: *mut ::std::os::raw::c_int,
        subtask: *mut ::std::os::raw::c_int,
    ) {
        (self
            .GetPreviousTaskInStack
            .as_ref()
            .expect("Expected function, got error."))(task, subtask)
    }
    pub unsafe fn GetTaskList(
        &self,
        list: *mut ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetTaskList
            .as_ref()
            .expect("Expected function, got error."))(list, size)
    }
    pub unsafe fn GetTaskInfo(&self, task: ::std::os::raw::c_int) -> *mut taskinfo {
        (self
            .GetTaskInfo
            .as_ref()
            .expect("Expected function, got error."))(task)
    }
    pub unsafe fn FindTaskByBook(
        &self,
        name: *const ::std::os::raw::c_char,
        task: *mut ::std::os::raw::c_int,
        subtask: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .FindTaskByBook
            .as_ref()
            .expect("Expected function, got error."))(name, task, subtask)
    }
    pub unsafe fn FindTaskByAppName(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .FindTaskByAppName
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn SetTaskParameters(
        &self,
        task: ::std::os::raw::c_int,
        appname: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        icon: *mut ibitmap,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .SetTaskParameters
            .as_ref()
            .expect("Expected function, got error."))(task, appname, name, icon, flags)
    }
    pub unsafe fn SetActiveTask(
        &self,
        task: ::std::os::raw::c_int,
        subtask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SetActiveTask
            .as_ref()
            .expect("Expected function, got error."))(task, subtask)
    }
    pub unsafe fn CloseTask(
        &self,
        task: ::std::os::raw::c_int,
        subtask: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .CloseTask
            .as_ref()
            .expect("Expected function, got error."))(task, subtask, force)
    }
    pub unsafe fn SendEventTo(
        &self,
        task: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendEventTo
            .as_ref()
            .expect("Expected function, got error."))(task, type_, par1, par2)
    }
    pub unsafe fn SendEventSyncTo(
        &self,
        task: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendEventSyncTo
            .as_ref()
            .expect("Expected function, got error."))(task, type_, par1, par2)
    }
    pub unsafe fn SendRequest(
        &self,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendRequest
            .as_ref()
            .expect("Expected function, got error."))(request, data, inlen, outlen, timeout)
    }
    pub unsafe fn SendRequestNoWait(
        &self,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendRequestNoWait
            .as_ref()
            .expect("Expected function, got error."))(request, data, inlen, outlen)
    }
    pub unsafe fn SendRequestTo(
        &self,
        task: ::std::os::raw::c_int,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendRequestTo
            .as_ref()
            .expect("Expected function, got error."))(
            task, request, data, inlen, outlen, timeout
        )
    }
    pub unsafe fn SendRequestToNoWait(
        &self,
        task: ::std::os::raw::c_int,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendRequestToNoWait
            .as_ref()
            .expect("Expected function, got error."))(task, request, data, inlen, outlen)
    }
    pub unsafe fn SendGlobalRequest(&self, param: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .SendGlobalRequest
            .as_ref()
            .expect("Expected function, got error."))(param)
    }
    pub unsafe fn SetMessageHandler(&self, hproc: iv_msghandler) {
        (self
            .SetMessageHandler
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn OpenTaskList(&self) {
        (self
            .OpenTaskList
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetTaskFramebuffer(&self, task: ::std::os::raw::c_int) -> *mut icanvas {
        (self
            .GetTaskFramebuffer
            .as_ref()
            .expect("Expected function, got error."))(task)
    }
    pub unsafe fn GetTaskFramebufferInfo(&self, task: ::std::os::raw::c_int) -> *mut iv_fbinfo {
        (self
            .GetTaskFramebufferInfo
            .as_ref()
            .expect("Expected function, got error."))(task)
    }
    pub unsafe fn ReleaseTaskFramebuffer(&self, fb: *mut icanvas) {
        (self
            .ReleaseTaskFramebuffer
            .as_ref()
            .expect("Expected function, got error."))(fb)
    }
    pub unsafe fn iv_wait_task_activation(&self, timeout: ::std::os::raw::c_int) {
        (self
            .iv_wait_task_activation
            .as_ref()
            .expect("Expected function, got error."))(timeout)
    }
    pub unsafe fn CopyTaskFb(&self, task: ::std::os::raw::c_int) {
        (self
            .CopyTaskFb
            .as_ref()
            .expect("Expected function, got error."))(task)
    }
    pub unsafe fn GetFrontlightVersion(&self) -> ::std::os::raw::c_int {
        (self
            .GetFrontlightVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetFrontlightState(&self) -> ::std::os::raw::c_int {
        (self
            .GetFrontlightState
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetFrontlightEnabled(&self) -> ::std::os::raw::c_int {
        (self
            .GetFrontlightEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenFrontLightConfig(&self) {
        (self
            .OpenFrontLightConfig
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetFrontlightColor(&self) -> ::std::os::raw::c_int {
        (self
            .GetFrontlightColor
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_stat(
        &self,
        name: *const ::std::os::raw::c_char,
        st: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_stat
            .as_ref()
            .expect("Expected function, got error."))(name, st)
    }
    pub unsafe fn iv_access(
        &self,
        pathname: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_access
            .as_ref()
            .expect("Expected function, got error."))(pathname, mode)
    }
    pub unsafe fn iv_fopen(
        &self,
        name: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self
            .iv_fopen
            .as_ref()
            .expect("Expected function, got error."))(name, mode)
    }
    pub unsafe fn iv_fread(
        &self,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        f: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_fread
            .as_ref()
            .expect("Expected function, got error."))(buffer, size, count, f)
    }
    pub unsafe fn iv_fwrite(
        &self,
        buffer: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        f: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_fwrite
            .as_ref()
            .expect("Expected function, got error."))(buffer, size, count, f)
    }
    pub unsafe fn iv_fseek(
        &self,
        f: *mut FILE,
        offset: ::std::os::raw::c_long,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_fseek
            .as_ref()
            .expect("Expected function, got error."))(f, offset, whence)
    }
    pub unsafe fn iv_ftell(&self, f: *mut FILE) -> ::std::os::raw::c_long {
        (self
            .iv_ftell
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn iv_fclose(&self, f: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .iv_fclose
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn iv_fclose_no_sync(&self, f: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .iv_fclose_no_sync
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn iv_fgetc(&self, f: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .iv_fgetc
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn iv_fgets(
        &self,
        string: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        f: *mut FILE,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .iv_fgets
            .as_ref()
            .expect("Expected function, got error."))(string, n, f)
    }
    pub unsafe fn iv_mkdir(
        &self,
        pathname: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_mkdir
            .as_ref()
            .expect("Expected function, got error."))(pathname, mode)
    }
    pub unsafe fn iv_buildpath(&self, filename: *const ::std::os::raw::c_char) {
        (self
            .iv_buildpath
            .as_ref()
            .expect("Expected function, got error."))(filename)
    }
    pub unsafe fn iv_opendir(&self, dirname: *const ::std::os::raw::c_char) -> *mut DIR {
        (self
            .iv_opendir
            .as_ref()
            .expect("Expected function, got error."))(dirname)
    }
    pub unsafe fn iv_readdir(&self, dir: *mut DIR) -> *mut dirent {
        (self
            .iv_readdir
            .as_ref()
            .expect("Expected function, got error."))(dir)
    }
    pub unsafe fn iv_closedir(&self, dir: *mut DIR) -> ::std::os::raw::c_int {
        (self
            .iv_closedir
            .as_ref()
            .expect("Expected function, got error."))(dir)
    }
    pub unsafe fn iv_unlink(&self, name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .iv_unlink
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn iv_rmdir(&self, name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .iv_rmdir
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn iv_truncate(
        &self,
        name: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_truncate
            .as_ref()
            .expect("Expected function, got error."))(name, length)
    }
    pub unsafe fn iv_rename(
        &self,
        oldname: *const ::std::os::raw::c_char,
        newname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_rename
            .as_ref()
            .expect("Expected function, got error."))(oldname, newname)
    }
    pub unsafe fn iv_preload(
        &self,
        name: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) {
        (self
            .iv_preload
            .as_ref()
            .expect("Expected function, got error."))(name, count)
    }
    pub unsafe fn iv_sync(&self) {
        (self
            .iv_sync
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_validate_name(
        &self,
        s: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_validate_name
            .as_ref()
            .expect("Expected function, got error."))(s, flags)
    }
    pub unsafe fn iv_setbgresponse(&self, t: ::std::os::raw::c_int) {
        (self
            .iv_setbgresponse
            .as_ref()
            .expect("Expected function, got error."))(t)
    }
    pub unsafe fn iv_ipc_request(
        &self,
        type_: ::std::os::raw::c_long,
        attr: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .iv_ipc_request
            .as_ref()
            .expect("Expected function, got error."))(type_, attr, data, inlen, outlen)
    }
    pub unsafe fn iv_ipc_request_secure(
        &self,
        type_: ::std::os::raw::c_long,
        param: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .iv_ipc_request_secure
            .as_ref()
            .expect("Expected function, got error."))(type_, param, data, inlen, outlen)
    }
    pub unsafe fn iv_ipc_cmd(
        &self,
        type_: ::std::os::raw::c_long,
        param: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long {
        (self
            .iv_ipc_cmd
            .as_ref()
            .expect("Expected function, got error."))(type_, param)
    }
    pub unsafe fn iv_ipc_request_with_timeout(
        &self,
        type_: ::std::os::raw::c_long,
        param: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .iv_ipc_request_with_timeout
            .as_ref()
            .expect("Expected function, got error."))(
            type_, param, data, inlen, outlen, timeout_ms
        )
    }
    pub unsafe fn AddTranslation(
        &self,
        label: *const ::std::os::raw::c_char,
        trans: *const ::std::os::raw::c_char,
    ) {
        (self
            .AddTranslation
            .as_ref()
            .expect("Expected function, got error."))(label, trans)
    }
    pub unsafe fn GetCurrentLangText(
        &self,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetCurrentLangText
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn GetLangText(
        &self,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetLangText
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn GetLangTextPlural(
        &self,
        s: *const ::std::os::raw::c_char,
        amount: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetLangTextPlural
            .as_ref()
            .expect("Expected function, got error."))(s, amount)
    }
    #[doc = " localized value by key should be in part of \"strftime\" format\n return localized time in variable \"buf\" or empty string if \"key\" not found\n return value \"0\" - ok\n return value \"-1\" - no key found (key may be a format)\n return value \"-2\" - not found any replacement of time format\n return value \"-3\" - result not fit in buffer\n return value \"-100\" - not supported format\n Notice: function try to add \"_12\" to key if AM/PM time format turned on in settings\n Requirments for keys:\n \"@TimeFormat\" + <key_words1> + <options> + <key_words2> + <am.pm>\n <options>:\n \"Date\"/\"SDate\" - month name and month day number / short month name and month day number (ex. January/Jan)\n \"Time\" - hours and minutes\n \"WDay\"/\"SWDay\" - Week day name / short week day name (ex. Monday/Mon)\n \"Year\" - year number\n others - other options like \"Seconds\", \"Month\", \"SMonth\", \"SMDay\", etc\n <key_words1>, <key_words2> - optional if need for detalize key\n <am.pm> - if AM/PM time format turned on in settings, auto add \"_12\" in function."]
    pub unsafe fn GetLangTime(
        &self,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_char,
        t: *mut tm,
    ) -> ::std::os::raw::c_int {
        (self
            .GetLangTime
            .as_ref()
            .expect("Expected function, got error."))(buf, size, key, t)
    }
    pub unsafe fn GetProfileType(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .GetProfileType
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn GetProfileAvatar(&self, name: *const ::std::os::raw::c_char) -> *mut ibitmap {
        (self
            .GetProfileAvatar
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn GetCurrentProfile(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetCurrentProfile
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetProfilesCountAfterEnum(&self) -> ::std::os::raw::c_int {
        (self
            .GetProfilesCountAfterEnum
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenProfileSelector(&self) {
        (self
            .OpenProfileSelector
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetLocalProfilesLimit(&self) -> ::std::os::raw::c_int {
        (self
            .GetLocalProfilesLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSDProfilesLimit(&self) -> ::std::os::raw::c_int {
        (self
            .GetSDProfilesLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetProfilesLimit(&self) -> ::std::os::raw::c_int {
        (self
            .GetProfilesLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetProfilesList(&self, profiles: *mut iprofiles) -> ::std::os::raw::c_int {
        (self
            .GetProfilesList
            .as_ref()
            .expect("Expected function, got error."))(profiles)
    }
    pub unsafe fn GetCurrentProfileEx(&self, profile: *mut iprofile) -> ::std::os::raw::c_int {
        (self
            .GetCurrentProfileEx
            .as_ref()
            .expect("Expected function, got error."))(profile)
    }
    pub unsafe fn GetProfilesCount(&self) -> ::std::os::raw::c_int {
        (self
            .GetProfilesCount
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenTheme(&self, path: *const ::std::os::raw::c_char) {
        (self
            .OpenTheme
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn GetResource(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: *const ibitmap,
    ) -> *mut ibitmap {
        (self
            .GetResource
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn GetThemeInt(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetThemeInt
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn GetThemeString(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetThemeString
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn GetLayoutFromTheme(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .GetLayoutFromTheme
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn GetThemeFont(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: *const ::std::os::raw::c_char,
    ) -> *mut ifont {
        (self
            .GetThemeFont
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn GetThemeRect(
        &self,
        name: *const ::std::os::raw::c_char,
        rect: *mut irect,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .GetThemeRect
            .as_ref()
            .expect("Expected function, got error."))(name, rect, x, y, w, h, flags)
    }
    pub unsafe fn GetKeyResource(
        &self,
        key: *const ::std::os::raw::c_char,
        deflt: *const ibitmap,
    ) -> *mut ibitmap {
        (self
            .GetKeyResource
            .as_ref()
            .expect("Expected function, got error."))(key, deflt)
    }
    pub unsafe fn GetSupportedFileTypes(&self) -> *mut iv_filetype {
        (self
            .GetSupportedFileTypes
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSupportedFileTypesLength(&self) -> ::std::os::raw::c_int {
        (self
            .GetSupportedFileTypesLength
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetBookInfo(&self, name: *const ::std::os::raw::c_char) -> *mut bookinfo {
        (self
            .GetBookInfo
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn GetBookInfoExt(
        &self,
        path: *const ::std::os::raw::c_char,
        separator: *const ::std::os::raw::c_char,
    ) -> *mut bookinfo {
        (self
            .GetBookInfoExt
            .as_ref()
            .expect("Expected function, got error."))(path, separator)
    }
    pub unsafe fn GetBookISBN(
        &self,
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .GetBookISBN
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn GetBookCover(
        &self,
        name: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .GetBookCover
            .as_ref()
            .expect("Expected function, got error."))(name, width, height)
    }
    pub unsafe fn GetBookCoverEx(
        &self,
        name: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        pixel_format: PixelFormat,
    ) -> *mut ibitmap {
        (self
            .GetBookCoverEx
            .as_ref()
            .expect("Expected function, got error."))(name, width, height, pixel_format)
    }
    pub unsafe fn GetBookSyncStatus(&self, path: *const ::std::os::raw::c_char) -> BookSyncStatus {
        (self
            .GetBookSyncStatus
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn GetAssociatedFile(
        &self,
        name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .GetAssociatedFile
            .as_ref()
            .expect("Expected function, got error."))(name, index)
    }
    pub unsafe fn SetFileHandler(
        &self,
        path: *const ::std::os::raw::c_char,
        handler: *const ::std::os::raw::c_char,
    ) {
        (self
            .SetFileHandler
            .as_ref()
            .expect("Expected function, got error."))(path, handler)
    }
    pub unsafe fn GetFileHandler(
        &self,
        path: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetFileHandler
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn OpenBook(
        &self,
        path: *const ::std::os::raw::c_char,
        parameters: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .OpenBook
            .as_ref()
            .expect("Expected function, got error."))(path, parameters, flags)
    }
    pub unsafe fn OpenBook2(
        &self,
        path: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .OpenBook2
            .as_ref()
            .expect("Expected function, got error."))(path, argc, argv, flags)
    }
    pub unsafe fn GetLastOpen(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .GetLastOpen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn AddLastOpen(&self, path: *const ::std::os::raw::c_char) {
        (self
            .AddLastOpen
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn OpenLastBooks(&self) {
        (self
            .OpenLastBooks
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenPlayer(&self) {
        (self
            .OpenPlayer
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetPlaylist(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .GetPlaylist
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetCurrentTrack(&self) -> ::std::os::raw::c_int {
        (self
            .GetCurrentTrack
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetTrackSize(&self) -> ::std::os::raw::c_int {
        (self
            .GetTrackSize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetTrackPosition(&self) -> ::std::os::raw::c_int {
        (self
            .GetTrackPosition
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetPlayerState(&self) -> ::std::os::raw::c_int {
        (self
            .GetPlayerState
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetPlayerMode(&self) -> ::std::os::raw::c_int {
        (self
            .GetPlayerMode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetVolume(&self) -> ::std::os::raw::c_int {
        (self
            .GetVolume
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetEqualizer(&self, eq: *mut ::std::os::raw::c_int) {
        (self
            .GetEqualizer
            .as_ref()
            .expect("Expected function, got error."))(eq)
    }
    pub unsafe fn GetAudioPlayingInfo(&self, info: *mut AudioPlayingInfo) -> ::std::os::raw::c_int {
        (self
            .GetAudioPlayingInfo
            .as_ref()
            .expect("Expected function, got error."))(info)
    }
    pub unsafe fn GetHighVolumeTimeout(&self) -> ::std::os::raw::c_int {
        (self
            .GetHighVolumeTimeout
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSafeVolumeLimit(&self) -> ::std::os::raw::c_int {
        (self
            .GetSafeVolumeLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHighVolumeMaxInterval(&self) -> ::std::os::raw::c_int {
        (self
            .GetHighVolumeMaxInterval
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetKeyboardLayoutForOpenedDictionary(&self) -> *const ::std::os::raw::c_char {
        (self
            .GetKeyboardLayoutForOpenedDictionary
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenDictionary(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .OpenDictionary
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    #[doc = " @brief GetWordListWithPrefix get up to maxWords words with given prefix from current dictionary.\n  Function is not reentrant\n @param prefix - prefix to find words (in utf-8)\n @param maxWords - maximum words to find (should not be > 255)\n @param wordList - resulting list of words (in utf-8), caller should not free the list\n @return number of words found or 0 on error"]
    pub unsafe fn GetWordListWithPrefix(
        &self,
        prefix_utf8: *const ::std::os::raw::c_char,
        maxWords: ::std::os::raw::c_int,
        wordList: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .GetWordListWithPrefix
            .as_ref()
            .expect("Expected function, got error."))(prefix_utf8, maxWords, wordList)
    }
    pub unsafe fn OpenDictionaryView(
        &self,
        wordlist: *mut iv_wlist,
        dicname: *const ::std::os::raw::c_char,
    ) {
        (self
            .OpenDictionaryView
            .as_ref()
            .expect("Expected function, got error."))(wordlist, dicname)
    }
    pub unsafe fn OpenControlledDictionaryView(
        &self,
        pointer_handler: pointer_to_word_hand_t,
        wordlist: *mut iv_wlist,
        dicname: *const ::std::os::raw::c_char,
    ) {
        (self
            .OpenControlledDictionaryView
            .as_ref()
            .expect("Expected function, got error."))(pointer_handler, wordlist, dicname)
    }
    pub unsafe fn OpenFastTranslation(
        &self,
        pointer_handler: pointer_to_word_hand_t,
        wordlist: *mut iv_wlist,
        pos: ::std::os::raw::c_int,
        dicname: *const ::std::os::raw::c_char,
    ) {
        (self
            .OpenFastTranslation
            .as_ref()
            .expect("Expected function, got error."))(
            pointer_handler, wordlist, pos, dicname
        )
    }
    pub unsafe fn iv_reflow_start(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        scale: ::std::os::raw::c_int,
    ) {
        (self
            .iv_reflow_start
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, scale)
    }
    pub unsafe fn iv_reflow_bt(&self) {
        (self
            .iv_reflow_bt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_et(&self) {
        (self
            .iv_reflow_et
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_div(&self) {
        (self
            .iv_reflow_div
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_addchar(
        &self,
        code: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .iv_reflow_addchar
            .as_ref()
            .expect("Expected function, got error."))(code, x, y, w, h)
    }
    pub unsafe fn iv_reflow_addimage(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .iv_reflow_addimage
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, flags)
    }
    pub unsafe fn iv_reflow_subpages(&self) -> ::std::os::raw::c_int {
        (self
            .iv_reflow_subpages
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_render(&self, spnum: ::std::os::raw::c_int) {
        (self
            .iv_reflow_render
            .as_ref()
            .expect("Expected function, got error."))(spnum)
    }
    pub unsafe fn iv_reflow_getchar(
        &self,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_reflow_getchar
            .as_ref()
            .expect("Expected function, got error."))(x, y)
    }
    pub unsafe fn iv_reflow_getimage(
        &self,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        scale: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_reflow_getimage
            .as_ref()
            .expect("Expected function, got error."))(x, y, scale)
    }
    pub unsafe fn iv_reflow_words(&self) -> ::std::os::raw::c_int {
        (self
            .iv_reflow_words
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_getword(
        &self,
        n: ::std::os::raw::c_int,
        spnum: *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .iv_reflow_getword
            .as_ref()
            .expect("Expected function, got error."))(n, spnum, x, y, w, h)
    }
    pub unsafe fn iv_reflow_clear(&self) {
        (self
            .iv_reflow_clear
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn AddScrolledArea(
        &self,
        area: *mut irect,
        receivePointerUp: ::std::os::raw::c_int,
    ) {
        (self
            .AddScrolledArea
            .as_ref()
            .expect("Expected function, got error."))(area, receivePointerUp)
    }
    pub unsafe fn RemoveScrolledArea(&self, area: *mut irect) {
        (self
            .RemoveScrolledArea
            .as_ref()
            .expect("Expected function, got error."))(area)
    }
    pub unsafe fn ClearAllScrolledAreas(&self) {
        (self
            .ClearAllScrolledAreas
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetMinimalXScrollIndent(&self, area: *mut irect, Xindent: ::std::os::raw::c_int) {
        (self
            .SetMinimalXScrollIndent
            .as_ref()
            .expect("Expected function, got error."))(area, Xindent)
    }
    pub unsafe fn SetMinimalYScrollIndent(&self, area: *mut irect, Yindent: ::std::os::raw::c_int) {
        (self
            .SetMinimalYScrollIndent
            .as_ref()
            .expect("Expected function, got error."))(area, Yindent)
    }
    pub unsafe fn IsAnyScrolledArea(&self) -> ::std::os::raw::c_int {
        (self
            .IsAnyScrolledArea
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetCurrentApplicationAttribute(
        &self,
        attribute: APPLICATION_ATTRIBUTE,
        on: ::std::os::raw::c_int,
    ) {
        (self
            .SetCurrentApplicationAttribute
            .as_ref()
            .expect("Expected function, got error."))(attribute, on)
    }
    pub unsafe fn TestCurrentApplicationAttribute(
        &self,
        attribute: APPLICATION_ATTRIBUTE,
    ) -> ::std::os::raw::c_int {
        (self
            .TestCurrentApplicationAttribute
            .as_ref()
            .expect("Expected function, got error."))(attribute)
    }
    pub unsafe fn iv_fullscreen(&self) {
        (self
            .iv_fullscreen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_nofullscreen(&self) {
        (self
            .iv_nofullscreen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_sleepmode(&self, on: ::std::os::raw::c_int) {
        (self
            .iv_sleepmode
            .as_ref()
            .expect("Expected function, got error."))(on)
    }
    pub unsafe fn GetSleepmode(&self) -> ::std::os::raw::c_int {
        (self
            .GetSleepmode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetBatteryPower(&self) -> ::std::os::raw::c_int {
        (self
            .GetBatteryPower
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetTemperature(&self) -> ::std::os::raw::c_int {
        (self
            .GetTemperature
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetDeviceModel(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetDeviceModel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHardwareType(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetHardwareType
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSoftwareVersion(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetSoftwareVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSerialSoftwareInfo(
        &self,
        device_model: *mut *mut ::std::os::raw::c_char,
        major_version: *mut ::std::os::raw::c_int,
        minor_version: *mut ::std::os::raw::c_int,
        build_version: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetSerialSoftwareInfo
            .as_ref()
            .expect("Expected function, got error."))(
            device_model,
            major_version,
            minor_version,
            build_version,
        )
    }
    pub unsafe fn GetSerialNumber(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetSerialNumber
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetExternalCardSerialNumber(&self) -> *const ::std::os::raw::c_char {
        (self
            .GetExternalCardSerialNumber
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetWaveformFilename(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetWaveformFilename
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetDeviceKey(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetDeviceKey
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetDeviceFingerprint(&self) -> *mut ::std::os::raw::c_uchar {
        (self
            .GetDeviceFingerprint
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenMainMenu(&self) {
        (self
            .OpenMainMenu
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CloseAllTasks(&self) {
        (self
            .CloseAllTasks
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenCalendar(&self) {
        (self
            .OpenCalendar
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn StartSoftwareUpdate(&self) -> ::std::os::raw::c_int {
        (self
            .StartSoftwareUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn HavePowerForSoftwareUpdate(&self) -> ::std::os::raw::c_int {
        (self
            .HavePowerForSoftwareUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetWiFiScanResults(&self, aps: *mut iv_wifi_ap_list) -> *mut iv_wifi_ap_list {
        (self
            .GetWiFiScanResults
            .as_ref()
            .expect("Expected function, got error."))(aps)
    }
    pub unsafe fn GetHwAddress(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetHwAddress
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHwBTAddress(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetHwBTAddress
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHw3GIMEI(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetHw3GIMEI
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetBluetoothMode(&self) -> ::std::os::raw::c_int {
        (self
            .GetBluetoothMode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetBluetoothStatus(&self) -> bt_state {
        (self
            .GetBluetoothStatus
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenBTdevicesMenu(
        &self,
        title: *mut ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        hproc: iv_itemchangehandler,
    ) {
        (self
            .OpenBTdevicesMenu
            .as_ref()
            .expect("Expected function, got error."))(title, x, y, hproc)
    }
    pub unsafe fn GetBTservice(
        &self,
        mac: *const ::std::os::raw::c_char,
        service: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .GetBTservice
            .as_ref()
            .expect("Expected function, got error."))(mac, service)
    }
    pub unsafe fn OpenNetworkInfo(&self) {
        (self
            .OpenNetworkInfo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetUserAgent(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetUserAgent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetDefaultUserAgent(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetDefaultUserAgent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetProxyUrl(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetProxyUrl
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSessionStatus(&self, id: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .GetSessionStatus
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn GetHeader(
        &self,
        id: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetHeader
            .as_ref()
            .expect("Expected function, got error."))(id, name)
    }
    pub unsafe fn GetSessionInfo(&self, id: ::std::os::raw::c_int) -> *mut iv_sessioninfo {
        (self
            .GetSessionInfo
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn GetA2dpStatus(&self) -> ::std::os::raw::c_int {
        (self
            .GetA2dpStatus
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetTouchInfoI(&self, index: ::std::os::raw::c_uint) -> *mut iv_mtinfo {
        (self
            .GetTouchInfoI
            .as_ref()
            .expect("Expected function, got error."))(index)
    }
    pub unsafe fn GetTouchContainerLength(
        &self,
        index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .GetTouchContainerLength
            .as_ref()
            .expect("Expected function, got error."))(index)
    }
    pub unsafe fn GetTouchSection(
        &self,
        index: ::std::os::raw::c_uint,
        section: ::std::os::raw::c_uint,
    ) -> *mut iv_mtinfo_section {
        (self
            .GetTouchSection
            .as_ref()
            .expect("Expected function, got error."))(index, section)
    }
    pub unsafe fn GetLastTouchSection(
        &self,
        index: ::std::os::raw::c_uint,
    ) -> *mut iv_mtinfo_section {
        (self
            .GetLastTouchSection
            .as_ref()
            .expect("Expected function, got error."))(index)
    }
    pub unsafe fn iv_strcmp(
        &self,
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_strcmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2)
    }
    pub unsafe fn iv_strncmp(
        &self,
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_strncmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2, n)
    }
    pub unsafe fn iv_strcasecmp(
        &self,
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_strcasecmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2)
    }
    pub unsafe fn iv_strncasecmp(
        &self,
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_strncasecmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2, n)
    }
    pub unsafe fn get_encoding_table(
        &self,
        enc: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_ushort {
        (self
            .get_encoding_table
            .as_ref()
            .expect("Expected function, got error."))(enc)
    }
    pub unsafe fn LeaveInkViewMain(&self) {
        (self
            .LeaveInkViewMain
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetDialogShow(&self) -> ::std::os::raw::c_int {
        (self
            .GetDialogShow
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " \\brief Get status for obreey sync. If obreey sync is not available than status is 0"]
    pub unsafe fn iv_get_obreey_status(&self) -> ::std::os::raw::c_int {
        (self
            .iv_get_obreey_status
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_proxy(&self) -> *mut proxy_settings {
        (self
            .get_proxy
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetNetInfo(
        &self,
        interface: *const network_interface,
    ) -> *mut network_interface_info {
        (self
            .GetNetInfo
            .as_ref()
            .expect("Expected function, got error."))(interface)
    }
    pub unsafe fn GetNetGateway(
        &self,
        interface: *const network_interface,
    ) -> *mut network_interface {
        (self
            .GetNetGateway
            .as_ref()
            .expect("Expected function, got error."))(interface)
    }
    pub unsafe fn GetNetDNS(&self) -> *mut network_interface_array {
        (self
            .GetNetDNS
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetNetSignalQuality(&self) -> ::std::os::raw::c_int {
        (self
            .GetNetSignalQuality
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetNetState(&self) -> NET_STATE {
        (self
            .GetNetState
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetLastNetConnectionError(&self) -> ::std::os::raw::c_int {
        (self
            .GetLastNetConnectionError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetNetList(&self, path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .GetNetList
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn get_partner_id(&self) -> *const ::std::os::raw::c_char {
        (self
            .get_partner_id
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_keylock(&self) -> ::std::os::raw::c_int {
        (self
            .get_keylock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_file_extension(
        &self,
        filename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .get_file_extension
            .as_ref()
            .expect("Expected function, got error."))(filename)
    }
    pub unsafe fn get_screen_dpi(&self) -> ::std::os::raw::c_int {
        (self
            .get_screen_dpi
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_screen_scale_factor(&self) -> f64 {
        (self
            .get_screen_scale_factor
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DebugResourceBitmaps_trackBitmapDrawing(
        &self,
        bmp: *const ibitmap,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) {
        (self
            .DebugResourceBitmaps_trackBitmapDrawing
            .as_ref()
            .expect("Expected function, got error."))(bmp, x, y)
    }
    pub unsafe fn iv_usleep(&self, __useconds: __useconds_t) -> ::std::os::raw::c_int {
        (self
            .iv_usleep
            .as_ref()
            .expect("Expected function, got error."))(__useconds)
    }
    pub unsafe fn IsUpdateInProcess(&self) -> ::std::os::raw::c_int {
        (self
            .IsUpdateInProcess
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PendingHwEventsCount(&self) -> ::std::os::raw::c_int {
        (self
            .PendingHwEventsCount
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief get_audio_status (this function can take some time)\n @param status\n @return 1 - on success"]
    pub unsafe fn get_audio_status(&self, status: *mut audio_output_info) -> ::std::os::raw::c_int {
        (self
            .get_audio_status
            .as_ref()
            .expect("Expected function, got error."))(status)
    }
    pub unsafe fn setTaskOomPriority(&self, value: TaskOomPriority) -> ::std::os::raw::c_int {
        (self
            .setTaskOomPriority
            .as_ref()
            .expect("Expected function, got error."))(value)
    }
    pub unsafe fn needCanvasLock(&self) {
        (self
            .needCanvasLock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn lockCanvasDrawing(&self) {
        (self
            .lockCanvasDrawing
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn unlockCanvasDrawing(&self) {
        (self
            .unlockCanvasDrawing
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetCustomGattSessionStatus(
        &self,
        obj: *mut CustomGattSession,
    ) -> CustomGattSessionStatus_e {
        (self
            .GetCustomGattSessionStatus
            .as_ref()
            .expect("Expected function, got error."))(obj)
    }
    pub unsafe fn GetSoftwareLocalizationType(&self) -> software_localization_type {
        (self
            .GetSoftwareLocalizationType
            .as_ref()
            .expect("Expected function, got error."))()
    }
}
