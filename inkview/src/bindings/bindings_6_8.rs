/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __FILE_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const _G_config_h: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const _SIGSET_H_types: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const _STRUCT_TIMEVAL: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 36;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 24;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_COND_COMPAT_T: u32 = 12;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 32;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 20;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __have_pthread_attr_t: u32 = 1;
pub const __PTHREAD_SPINS: u32 = 0;
pub const __PTHREAD_RWLOCK_ELISION_EXTRA: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _XLOCALE_H: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_ILP32_OFF32: u32 = 1;
pub const _POSIX_V7_ILP32_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: u32 = 1;
pub const _POSIX_V6_ILP32_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: u32 = 1;
pub const _XBS5_ILP32_OFFBIG: u32 = 1;
pub const _POSIX_V7_LP64_OFF64: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 43] = b"-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_LINUX_OLD: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 1;
pub const _STAT_VER_SVR4: u32 = 2;
pub const _STAT_VER_LINUX: u32 = 3;
pub const _STAT_VER: u32 = 3;
pub const _MKNOD_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_SVR4: u32 = 2;
pub const _MKNOD_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _SYS_WAIT_H: u32 = 1;
pub const _SIGSET_H_fns: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGBUS: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGUSR1: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGUSR2: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGSTKFLT: u32 = 16;
pub const SIGCHLD: u32 = 17;
pub const SIGCONT: u32 = 18;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGURG: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGPWR: u32 = 30;
pub const SIGSYS: u32 = 31;
pub const SIGUNUSED: u32 = 31;
pub const _NSIG: u32 = 65;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 64;
pub const __have_sigval_t: u32 = 1;
pub const __have_siginfo_t: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const __have_sigevent_t: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const NSIG: u32 = 65;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const NGREG: u32 = 18;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const WCOREFLAG: u32 = 128;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _DIRENT_H: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const MAXNAMLEN: u32 = 255;
pub const _FCNTL_H: u32 = 1;
pub const __O_DIRECTORY: u32 = 16384;
pub const __O_NOFOLLOW: u32 = 32768;
pub const __O_DIRECT: u32 = 65536;
pub const __O_LARGEFILE: u32 = 131072;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4210688;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const F_GETLK64: u32 = 12;
pub const F_SETLK64: u32 = 13;
pub const F_SETLKW64: u32 = 14;
pub const O_DIRECTORY: u32 = 16384;
pub const O_NOFOLLOW: u32 = 32768;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _GRP_H: u32 = 1;
pub const NSS_BUFLEN_GROUP: u32 = 1024;
pub const _SYS_IPC_H: u32 = 1;
pub const _BITS_IPCTYPES_H: u32 = 1;
pub const IPC_CREAT: u32 = 512;
pub const IPC_EXCL: u32 = 1024;
pub const IPC_NOWAIT: u32 = 2048;
pub const IPC_RMID: u32 = 0;
pub const IPC_SET: u32 = 1;
pub const IPC_STAT: u32 = 2;
pub const _SYS_SHM_H: u32 = 1;
pub const SHM_R: u32 = 256;
pub const SHM_W: u32 = 128;
pub const SHM_RDONLY: u32 = 4096;
pub const SHM_RND: u32 = 8192;
pub const SHM_REMAP: u32 = 16384;
pub const SHM_EXEC: u32 = 32768;
pub const SHM_LOCK: u32 = 11;
pub const SHM_UNLOCK: u32 = 12;
pub const SHM_STAT: u32 = 13;
pub const SHM_INFO: u32 = 14;
pub const SHM_DEST: u32 = 512;
pub const SHM_LOCKED: u32 = 1024;
pub const SHM_HUGETLB: u32 = 2048;
pub const SHM_NORESERVE: u32 = 4096;
pub const MSG_NOERROR: u32 = 4096;
pub const MSG_STAT: u32 = 11;
pub const MSG_INFO: u32 = 12;
pub const _SYS_SYSINFO_H: u32 = 1;
pub const __BITS_PER_LONG: u32 = 32;
pub const SI_LOAD_SHIFT: u32 = 16;
pub const _ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const MAX_MEM_LEVEL: u32 = 9;
pub const MAX_WBITS: u32 = 15;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const CHAR_MIN: u32 = 0;
pub const ZLIB_VERSION: &[u8; 7] = b"1.2.11\0";
pub const ZLIB_VERNUM: u32 = 4784;
pub const ZLIB_VER_MAJOR: u32 = 1;
pub const ZLIB_VER_MINOR: u32 = 2;
pub const ZLIB_VER_REVISION: u32 = 11;
pub const ZLIB_VER_SUBREVISION: u32 = 0;
pub const Z_NO_FLUSH: u32 = 0;
pub const Z_PARTIAL_FLUSH: u32 = 1;
pub const Z_SYNC_FLUSH: u32 = 2;
pub const Z_FULL_FLUSH: u32 = 3;
pub const Z_FINISH: u32 = 4;
pub const Z_BLOCK: u32 = 5;
pub const Z_TREES: u32 = 6;
pub const Z_OK: u32 = 0;
pub const Z_STREAM_END: u32 = 1;
pub const Z_NEED_DICT: u32 = 2;
pub const Z_ERRNO: i32 = -1;
pub const Z_STREAM_ERROR: i32 = -2;
pub const Z_DATA_ERROR: i32 = -3;
pub const Z_MEM_ERROR: i32 = -4;
pub const Z_BUF_ERROR: i32 = -5;
pub const Z_VERSION_ERROR: i32 = -6;
pub const Z_NO_COMPRESSION: u32 = 0;
pub const Z_BEST_SPEED: u32 = 1;
pub const Z_BEST_COMPRESSION: u32 = 9;
pub const Z_DEFAULT_COMPRESSION: i32 = -1;
pub const Z_FILTERED: u32 = 1;
pub const Z_HUFFMAN_ONLY: u32 = 2;
pub const Z_RLE: u32 = 3;
pub const Z_FIXED: u32 = 4;
pub const Z_DEFAULT_STRATEGY: u32 = 0;
pub const Z_BINARY: u32 = 0;
pub const Z_TEXT: u32 = 1;
pub const Z_ASCII: u32 = 1;
pub const Z_UNKNOWN: u32 = 2;
pub const Z_DEFLATED: u32 = 8;
pub const Z_NULL: u32 = 0;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const __defined_schedparam: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _SYS_IOCTL_H: u32 = 1;
pub const FIOQSIZE: u32 = 21598;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const TCGETS: u32 = 21505;
pub const TCSETS: u32 = 21506;
pub const TCSETSW: u32 = 21507;
pub const TCSETSF: u32 = 21508;
pub const TCGETA: u32 = 21509;
pub const TCSETA: u32 = 21510;
pub const TCSETAW: u32 = 21511;
pub const TCSETAF: u32 = 21512;
pub const TCSBRK: u32 = 21513;
pub const TCXONC: u32 = 21514;
pub const TCFLSH: u32 = 21515;
pub const TIOCEXCL: u32 = 21516;
pub const TIOCNXCL: u32 = 21517;
pub const TIOCSCTTY: u32 = 21518;
pub const TIOCGPGRP: u32 = 21519;
pub const TIOCSPGRP: u32 = 21520;
pub const TIOCOUTQ: u32 = 21521;
pub const TIOCSTI: u32 = 21522;
pub const TIOCGWINSZ: u32 = 21523;
pub const TIOCSWINSZ: u32 = 21524;
pub const TIOCMGET: u32 = 21525;
pub const TIOCMBIS: u32 = 21526;
pub const TIOCMBIC: u32 = 21527;
pub const TIOCMSET: u32 = 21528;
pub const TIOCGSOFTCAR: u32 = 21529;
pub const TIOCSSOFTCAR: u32 = 21530;
pub const FIONREAD: u32 = 21531;
pub const TIOCINQ: u32 = 21531;
pub const TIOCLINUX: u32 = 21532;
pub const TIOCCONS: u32 = 21533;
pub const TIOCGSERIAL: u32 = 21534;
pub const TIOCSSERIAL: u32 = 21535;
pub const TIOCPKT: u32 = 21536;
pub const FIONBIO: u32 = 21537;
pub const TIOCNOTTY: u32 = 21538;
pub const TIOCSETD: u32 = 21539;
pub const TIOCGETD: u32 = 21540;
pub const TCSBRKP: u32 = 21541;
pub const TIOCSBRK: u32 = 21543;
pub const TIOCCBRK: u32 = 21544;
pub const TIOCGSID: u32 = 21545;
pub const TIOCGRS485: u32 = 21550;
pub const TIOCSRS485: u32 = 21551;
pub const TCGETX: u32 = 21554;
pub const TCSETX: u32 = 21555;
pub const TCSETXF: u32 = 21556;
pub const TCSETXW: u32 = 21557;
pub const TIOCVHANGUP: u32 = 21559;
pub const FIONCLEX: u32 = 21584;
pub const FIOCLEX: u32 = 21585;
pub const FIOASYNC: u32 = 21586;
pub const TIOCSERCONFIG: u32 = 21587;
pub const TIOCSERGWILD: u32 = 21588;
pub const TIOCSERSWILD: u32 = 21589;
pub const TIOCGLCKTRMIOS: u32 = 21590;
pub const TIOCSLCKTRMIOS: u32 = 21591;
pub const TIOCSERGSTRUCT: u32 = 21592;
pub const TIOCSERGETLSR: u32 = 21593;
pub const TIOCSERGETMULTI: u32 = 21594;
pub const TIOCSERSETMULTI: u32 = 21595;
pub const TIOCMIWAIT: u32 = 21596;
pub const TIOCGICOUNT: u32 = 21597;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TIOCSER_TEMT: u32 = 1;
pub const SIOCADDRT: u32 = 35083;
pub const SIOCDELRT: u32 = 35084;
pub const SIOCRTMSG: u32 = 35085;
pub const SIOCGIFNAME: u32 = 35088;
pub const SIOCSIFLINK: u32 = 35089;
pub const SIOCGIFCONF: u32 = 35090;
pub const SIOCGIFFLAGS: u32 = 35091;
pub const SIOCSIFFLAGS: u32 = 35092;
pub const SIOCGIFADDR: u32 = 35093;
pub const SIOCSIFADDR: u32 = 35094;
pub const SIOCGIFDSTADDR: u32 = 35095;
pub const SIOCSIFDSTADDR: u32 = 35096;
pub const SIOCGIFBRDADDR: u32 = 35097;
pub const SIOCSIFBRDADDR: u32 = 35098;
pub const SIOCGIFNETMASK: u32 = 35099;
pub const SIOCSIFNETMASK: u32 = 35100;
pub const SIOCGIFMETRIC: u32 = 35101;
pub const SIOCSIFMETRIC: u32 = 35102;
pub const SIOCGIFMEM: u32 = 35103;
pub const SIOCSIFMEM: u32 = 35104;
pub const SIOCGIFMTU: u32 = 35105;
pub const SIOCSIFMTU: u32 = 35106;
pub const SIOCSIFNAME: u32 = 35107;
pub const SIOCSIFHWADDR: u32 = 35108;
pub const SIOCGIFENCAP: u32 = 35109;
pub const SIOCSIFENCAP: u32 = 35110;
pub const SIOCGIFHWADDR: u32 = 35111;
pub const SIOCGIFSLAVE: u32 = 35113;
pub const SIOCSIFSLAVE: u32 = 35120;
pub const SIOCADDMULTI: u32 = 35121;
pub const SIOCDELMULTI: u32 = 35122;
pub const SIOCGIFINDEX: u32 = 35123;
pub const SIOGIFINDEX: u32 = 35123;
pub const SIOCSIFPFLAGS: u32 = 35124;
pub const SIOCGIFPFLAGS: u32 = 35125;
pub const SIOCDIFADDR: u32 = 35126;
pub const SIOCSIFHWBROADCAST: u32 = 35127;
pub const SIOCGIFCOUNT: u32 = 35128;
pub const SIOCGIFBR: u32 = 35136;
pub const SIOCSIFBR: u32 = 35137;
pub const SIOCGIFTXQLEN: u32 = 35138;
pub const SIOCSIFTXQLEN: u32 = 35139;
pub const SIOCDARP: u32 = 35155;
pub const SIOCGARP: u32 = 35156;
pub const SIOCSARP: u32 = 35157;
pub const SIOCDRARP: u32 = 35168;
pub const SIOCGRARP: u32 = 35169;
pub const SIOCSRARP: u32 = 35170;
pub const SIOCGIFMAP: u32 = 35184;
pub const SIOCSIFMAP: u32 = 35185;
pub const SIOCADDDLCI: u32 = 35200;
pub const SIOCDELDLCI: u32 = 35201;
pub const SIOCDEVPRIVATE: u32 = 35312;
pub const SIOCPROTOPRIVATE: u32 = 35296;
pub const NCC: u32 = 8;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RI: u32 = 128;
pub const N_TTY: u32 = 0;
pub const N_SLIP: u32 = 1;
pub const N_MOUSE: u32 = 2;
pub const N_PPP: u32 = 3;
pub const N_STRIP: u32 = 4;
pub const N_AX25: u32 = 5;
pub const N_X25: u32 = 6;
pub const N_6PACK: u32 = 7;
pub const N_MASC: u32 = 8;
pub const N_R3964: u32 = 9;
pub const N_PROFIBUS_FDL: u32 = 10;
pub const N_IRDA: u32 = 11;
pub const N_SMSBLOCK: u32 = 12;
pub const N_HDLC: u32 = 13;
pub const N_SYNC_PPP: u32 = 14;
pub const N_HCI: u32 = 15;
pub const CEOL: u8 = 0u8;
pub const CERASE: u32 = 127;
pub const CSTATUS: u8 = 0u8;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u8 = 0u8;
pub const EV_VERSION: u32 = 65537;
pub const INPUT_KEYMAP_BY_INDEX: u32 = 1;
pub const INPUT_PROP_POINTER: u32 = 0;
pub const INPUT_PROP_DIRECT: u32 = 1;
pub const INPUT_PROP_BUTTONPAD: u32 = 2;
pub const INPUT_PROP_SEMI_MT: u32 = 3;
pub const INPUT_PROP_MAX: u32 = 31;
pub const INPUT_PROP_CNT: u32 = 32;
pub const EV_SYN: u32 = 0;
pub const EV_KEY: u32 = 1;
pub const EV_REL: u32 = 2;
pub const EV_ABS: u32 = 3;
pub const EV_MSC: u32 = 4;
pub const EV_SW: u32 = 5;
pub const EV_LED: u32 = 17;
pub const EV_SND: u32 = 18;
pub const EV_REP: u32 = 20;
pub const EV_FF: u32 = 21;
pub const EV_PWR: u32 = 22;
pub const EV_FF_STATUS: u32 = 23;
pub const EV_MAX: u32 = 31;
pub const EV_CNT: u32 = 32;
pub const SYN_REPORT: u32 = 0;
pub const SYN_CONFIG: u32 = 1;
pub const SYN_MT_REPORT: u32 = 2;
pub const SYN_DROPPED: u32 = 3;
pub const KEY_RESERVED: u32 = 0;
pub const KEY_ESC: u32 = 1;
pub const KEY_1: u32 = 2;
pub const KEY_2: u32 = 3;
pub const KEY_3: u32 = 4;
pub const KEY_4: u32 = 5;
pub const KEY_5: u32 = 6;
pub const KEY_6: u32 = 7;
pub const KEY_7: u32 = 8;
pub const KEY_8: u32 = 9;
pub const KEY_9: u32 = 10;
pub const KEY_0: u32 = 11;
pub const KEY_MINUS: u32 = 12;
pub const KEY_EQUAL: u32 = 13;
pub const KEY_BACKSPACE: u32 = 14;
pub const KEY_TAB: u32 = 15;
pub const KEY_Q: u32 = 16;
pub const KEY_W: u32 = 17;
pub const KEY_E: u32 = 18;
pub const KEY_R: u32 = 19;
pub const KEY_T: u32 = 20;
pub const KEY_Y: u32 = 21;
pub const KEY_U: u32 = 22;
pub const KEY_I: u32 = 23;
pub const KEY_O: u32 = 24;
pub const KEY_P: u32 = 25;
pub const KEY_LEFTBRACE: u32 = 26;
pub const KEY_RIGHTBRACE: u32 = 27;
pub const KEY_ENTER: u32 = 28;
pub const KEY_LEFTCTRL: u32 = 29;
pub const KEY_A: u32 = 30;
pub const KEY_S: u32 = 31;
pub const KEY_D: u32 = 32;
pub const KEY_F: u32 = 33;
pub const KEY_G: u32 = 34;
pub const KEY_H: u32 = 35;
pub const KEY_J: u32 = 36;
pub const KEY_K: u32 = 37;
pub const KEY_L: u32 = 38;
pub const KEY_SEMICOLON: u32 = 39;
pub const KEY_APOSTROPHE: u32 = 40;
pub const KEY_GRAVE: u32 = 41;
pub const KEY_LEFTSHIFT: u32 = 42;
pub const KEY_BACKSLASH: u32 = 43;
pub const KEY_Z: u32 = 44;
pub const KEY_X: u32 = 45;
pub const KEY_C: u32 = 46;
pub const KEY_V: u32 = 47;
pub const KEY_B: u32 = 48;
pub const KEY_N: u32 = 49;
pub const KEY_M: u32 = 50;
pub const KEY_COMMA: u32 = 51;
pub const KEY_DOT: u32 = 52;
pub const KEY_SLASH: u32 = 53;
pub const KEY_RIGHTSHIFT: u32 = 54;
pub const KEY_KPASTERISK: u32 = 55;
pub const KEY_LEFTALT: u32 = 56;
pub const KEY_SPACE: u32 = 57;
pub const KEY_CAPSLOCK: u32 = 58;
pub const KEY_F1: u32 = 59;
pub const KEY_F2: u32 = 60;
pub const KEY_F3: u32 = 61;
pub const KEY_F4: u32 = 62;
pub const KEY_F5: u32 = 63;
pub const KEY_F6: u32 = 64;
pub const KEY_F7: u32 = 65;
pub const KEY_F8: u32 = 66;
pub const KEY_F9: u32 = 67;
pub const KEY_F10: u32 = 68;
pub const KEY_NUMLOCK: u32 = 69;
pub const KEY_SCROLLLOCK: u32 = 70;
pub const KEY_KP7: u32 = 71;
pub const KEY_KP8: u32 = 72;
pub const KEY_KP9: u32 = 73;
pub const KEY_KPMINUS: u32 = 74;
pub const KEY_KP4: u32 = 75;
pub const KEY_KP5: u32 = 76;
pub const KEY_KP6: u32 = 77;
pub const KEY_KPPLUS: u32 = 78;
pub const KEY_KP1: u32 = 79;
pub const KEY_KP2: u32 = 80;
pub const KEY_KP3: u32 = 81;
pub const KEY_KP0: u32 = 82;
pub const KEY_KPDOT: u32 = 83;
pub const KEY_ZENKAKUHANKAKU: u32 = 85;
pub const KEY_102ND: u32 = 86;
pub const KEY_F11: u32 = 87;
pub const KEY_F12: u32 = 88;
pub const KEY_RO: u32 = 89;
pub const KEY_KATAKANA: u32 = 90;
pub const KEY_HIRAGANA: u32 = 91;
pub const KEY_HENKAN: u32 = 92;
pub const KEY_KATAKANAHIRAGANA: u32 = 93;
pub const KEY_MUHENKAN: u32 = 94;
pub const KEY_KPJPCOMMA: u32 = 95;
pub const KEY_KPENTER: u32 = 96;
pub const KEY_RIGHTCTRL: u32 = 97;
pub const KEY_KPSLASH: u32 = 98;
pub const KEY_SYSRQ: u32 = 99;
pub const KEY_RIGHTALT: u32 = 100;
pub const KEY_LINEFEED: u32 = 101;
pub const KEY_HOME: u32 = 102;
pub const KEY_UP: u32 = 103;
pub const KEY_PAGEUP: u32 = 104;
pub const KEY_LEFT: u32 = 105;
pub const KEY_RIGHT: u32 = 106;
pub const KEY_END: u32 = 107;
pub const KEY_DOWN: u32 = 108;
pub const KEY_PAGEDOWN: u32 = 109;
pub const KEY_INSERT: u32 = 110;
pub const KEY_DELETE: u32 = 111;
pub const KEY_MACRO: u32 = 112;
pub const KEY_MUTE: u32 = 113;
pub const KEY_VOLUMEDOWN: u32 = 114;
pub const KEY_VOLUMEUP: u32 = 115;
pub const KEY_POWER: u32 = 116;
pub const KEY_KPEQUAL: u32 = 117;
pub const KEY_KPPLUSMINUS: u32 = 118;
pub const KEY_PAUSE: u32 = 119;
pub const KEY_SCALE: u32 = 120;
pub const KEY_KPCOMMA: u32 = 121;
pub const KEY_HANGEUL: u32 = 122;
pub const KEY_HANGUEL: u32 = 122;
pub const KEY_HANJA: u32 = 123;
pub const KEY_YEN: u32 = 124;
pub const KEY_LEFTMETA: u32 = 125;
pub const KEY_RIGHTMETA: u32 = 126;
pub const KEY_COMPOSE: u32 = 127;
pub const KEY_STOP: u32 = 128;
pub const KEY_AGAIN: u32 = 129;
pub const KEY_PROPS: u32 = 130;
pub const KEY_UNDO: u32 = 131;
pub const KEY_FRONT: u32 = 132;
pub const KEY_COPY: u32 = 133;
pub const KEY_OPEN: u32 = 134;
pub const KEY_PASTE: u32 = 135;
pub const KEY_FIND: u32 = 136;
pub const KEY_CUT: u32 = 137;
pub const KEY_HELP: u32 = 138;
pub const KEY_MENU: u32 = 139;
pub const KEY_CALC: u32 = 140;
pub const KEY_SETUP: u32 = 141;
pub const KEY_SLEEP: u32 = 142;
pub const KEY_WAKEUP: u32 = 143;
pub const KEY_FILE: u32 = 144;
pub const KEY_SENDFILE: u32 = 145;
pub const KEY_DELETEFILE: u32 = 146;
pub const KEY_XFER: u32 = 147;
pub const KEY_PROG1: u32 = 148;
pub const KEY_PROG2: u32 = 149;
pub const KEY_WWW: u32 = 150;
pub const KEY_MSDOS: u32 = 151;
pub const KEY_COFFEE: u32 = 152;
pub const KEY_SCREENLOCK: u32 = 152;
pub const KEY_DIRECTION: u32 = 153;
pub const KEY_CYCLEWINDOWS: u32 = 154;
pub const KEY_MAIL: u32 = 155;
pub const KEY_BOOKMARKS: u32 = 156;
pub const KEY_COMPUTER: u32 = 157;
pub const KEY_BACK: u32 = 158;
pub const KEY_FORWARD: u32 = 159;
pub const KEY_CLOSECD: u32 = 160;
pub const KEY_EJECTCD: u32 = 161;
pub const KEY_EJECTCLOSECD: u32 = 162;
pub const KEY_NEXTSONG: u32 = 163;
pub const KEY_PLAYPAUSE: u32 = 164;
pub const KEY_PREVIOUSSONG: u32 = 165;
pub const KEY_STOPCD: u32 = 166;
pub const KEY_RECORD: u32 = 167;
pub const KEY_REWIND: u32 = 168;
pub const KEY_PHONE: u32 = 169;
pub const KEY_ISO: u32 = 170;
pub const KEY_CONFIG: u32 = 171;
pub const KEY_HOMEPAGE: u32 = 172;
pub const KEY_REFRESH: u32 = 173;
pub const KEY_EXIT: u32 = 174;
pub const KEY_MOVE: u32 = 175;
pub const KEY_EDIT: u32 = 176;
pub const KEY_SCROLLUP: u32 = 177;
pub const KEY_SCROLLDOWN: u32 = 178;
pub const KEY_KPLEFTPAREN: u32 = 179;
pub const KEY_KPRIGHTPAREN: u32 = 180;
pub const KEY_NEW: u32 = 181;
pub const KEY_REDO: u32 = 182;
pub const KEY_F13: u32 = 183;
pub const KEY_F14: u32 = 184;
pub const KEY_F15: u32 = 185;
pub const KEY_F16: u32 = 186;
pub const KEY_F17: u32 = 187;
pub const KEY_F18: u32 = 188;
pub const KEY_F19: u32 = 189;
pub const KEY_F20: u32 = 190;
pub const KEY_F21: u32 = 191;
pub const KEY_F22: u32 = 192;
pub const KEY_F23: u32 = 193;
pub const KEY_F24: u32 = 194;
pub const KEY_PLAYCD: u32 = 200;
pub const KEY_PAUSECD: u32 = 201;
pub const KEY_PROG3: u32 = 202;
pub const KEY_PROG4: u32 = 203;
pub const KEY_DASHBOARD: u32 = 204;
pub const KEY_SUSPEND: u32 = 205;
pub const KEY_CLOSE: u32 = 206;
pub const KEY_PLAY: u32 = 207;
pub const KEY_FASTFORWARD: u32 = 208;
pub const KEY_BASSBOOST: u32 = 209;
pub const KEY_PRINT: u32 = 210;
pub const KEY_HP: u32 = 211;
pub const KEY_CAMERA: u32 = 212;
pub const KEY_SOUND: u32 = 213;
pub const KEY_QUESTION: u32 = 214;
pub const KEY_EMAIL: u32 = 215;
pub const KEY_CHAT: u32 = 216;
pub const KEY_SEARCH: u32 = 217;
pub const KEY_CONNECT: u32 = 218;
pub const KEY_FINANCE: u32 = 219;
pub const KEY_SPORT: u32 = 220;
pub const KEY_SHOP: u32 = 221;
pub const KEY_ALTERASE: u32 = 222;
pub const KEY_CANCEL: u32 = 223;
pub const KEY_BRIGHTNESSDOWN: u32 = 224;
pub const KEY_BRIGHTNESSUP: u32 = 225;
pub const KEY_MEDIA: u32 = 226;
pub const KEY_SWITCHVIDEOMODE: u32 = 227;
pub const KEY_KBDILLUMTOGGLE: u32 = 228;
pub const KEY_KBDILLUMDOWN: u32 = 229;
pub const KEY_KBDILLUMUP: u32 = 230;
pub const KEY_SEND: u32 = 231;
pub const KEY_REPLY: u32 = 232;
pub const KEY_FORWARDMAIL: u32 = 233;
pub const KEY_SAVE: u32 = 234;
pub const KEY_DOCUMENTS: u32 = 235;
pub const KEY_BATTERY: u32 = 236;
pub const KEY_BLUETOOTH: u32 = 237;
pub const KEY_WLAN: u32 = 238;
pub const KEY_UWB: u32 = 239;
pub const KEY_UNKNOWN: u32 = 240;
pub const KEY_VIDEO_NEXT: u32 = 241;
pub const KEY_VIDEO_PREV: u32 = 242;
pub const KEY_BRIGHTNESS_CYCLE: u32 = 243;
pub const KEY_BRIGHTNESS_ZERO: u32 = 244;
pub const KEY_DISPLAY_OFF: u32 = 245;
pub const KEY_WIMAX: u32 = 246;
pub const KEY_RFKILL: u32 = 247;
pub const KEY_MICMUTE: u32 = 248;
pub const BTN_MISC: u32 = 256;
pub const BTN_0: u32 = 256;
pub const BTN_1: u32 = 257;
pub const BTN_2: u32 = 258;
pub const BTN_3: u32 = 259;
pub const BTN_4: u32 = 260;
pub const BTN_5: u32 = 261;
pub const BTN_6: u32 = 262;
pub const BTN_7: u32 = 263;
pub const BTN_8: u32 = 264;
pub const BTN_9: u32 = 265;
pub const BTN_MOUSE: u32 = 272;
pub const BTN_LEFT: u32 = 272;
pub const BTN_RIGHT: u32 = 273;
pub const BTN_MIDDLE: u32 = 274;
pub const BTN_SIDE: u32 = 275;
pub const BTN_EXTRA: u32 = 276;
pub const BTN_FORWARD: u32 = 277;
pub const BTN_BACK: u32 = 278;
pub const BTN_TASK: u32 = 279;
pub const BTN_JOYSTICK: u32 = 288;
pub const BTN_TRIGGER: u32 = 288;
pub const BTN_THUMB: u32 = 289;
pub const BTN_THUMB2: u32 = 290;
pub const BTN_TOP: u32 = 291;
pub const BTN_TOP2: u32 = 292;
pub const BTN_PINKIE: u32 = 293;
pub const BTN_BASE: u32 = 294;
pub const BTN_BASE2: u32 = 295;
pub const BTN_BASE3: u32 = 296;
pub const BTN_BASE4: u32 = 297;
pub const BTN_BASE5: u32 = 298;
pub const BTN_BASE6: u32 = 299;
pub const BTN_DEAD: u32 = 303;
pub const BTN_GAMEPAD: u32 = 304;
pub const BTN_A: u32 = 304;
pub const BTN_B: u32 = 305;
pub const BTN_C: u32 = 306;
pub const BTN_X: u32 = 307;
pub const BTN_Y: u32 = 308;
pub const BTN_Z: u32 = 309;
pub const BTN_TL: u32 = 310;
pub const BTN_TR: u32 = 311;
pub const BTN_TL2: u32 = 312;
pub const BTN_TR2: u32 = 313;
pub const BTN_SELECT: u32 = 314;
pub const BTN_START: u32 = 315;
pub const BTN_MODE: u32 = 316;
pub const BTN_THUMBL: u32 = 317;
pub const BTN_THUMBR: u32 = 318;
pub const BTN_DIGI: u32 = 320;
pub const BTN_TOOL_PEN: u32 = 320;
pub const BTN_TOOL_RUBBER: u32 = 321;
pub const BTN_TOOL_BRUSH: u32 = 322;
pub const BTN_TOOL_PENCIL: u32 = 323;
pub const BTN_TOOL_AIRBRUSH: u32 = 324;
pub const BTN_TOOL_FINGER: u32 = 325;
pub const BTN_TOOL_MOUSE: u32 = 326;
pub const BTN_TOOL_LENS: u32 = 327;
pub const BTN_TOOL_QUINTTAP: u32 = 328;
pub const BTN_TOUCH: u32 = 330;
pub const BTN_STYLUS: u32 = 331;
pub const BTN_STYLUS2: u32 = 332;
pub const BTN_TOOL_DOUBLETAP: u32 = 333;
pub const BTN_TOOL_TRIPLETAP: u32 = 334;
pub const BTN_TOOL_QUADTAP: u32 = 335;
pub const BTN_WHEEL: u32 = 336;
pub const BTN_GEAR_DOWN: u32 = 336;
pub const BTN_GEAR_UP: u32 = 337;
pub const KEY_OK: u32 = 352;
pub const KEY_SELECT: u32 = 353;
pub const KEY_GOTO: u32 = 354;
pub const KEY_CLEAR: u32 = 355;
pub const KEY_POWER2: u32 = 356;
pub const KEY_OPTION: u32 = 357;
pub const KEY_INFO: u32 = 358;
pub const KEY_TIME: u32 = 359;
pub const KEY_VENDOR: u32 = 360;
pub const KEY_ARCHIVE: u32 = 361;
pub const KEY_PROGRAM: u32 = 362;
pub const KEY_CHANNEL: u32 = 363;
pub const KEY_FAVORITES: u32 = 364;
pub const KEY_EPG: u32 = 365;
pub const KEY_PVR: u32 = 366;
pub const KEY_MHP: u32 = 367;
pub const KEY_LANGUAGE: u32 = 368;
pub const KEY_TITLE: u32 = 369;
pub const KEY_SUBTITLE: u32 = 370;
pub const KEY_ANGLE: u32 = 371;
pub const KEY_ZOOM: u32 = 372;
pub const KEY_MODE: u32 = 373;
pub const KEY_KEYBOARD: u32 = 374;
pub const KEY_SCREEN: u32 = 375;
pub const KEY_PC: u32 = 376;
pub const KEY_TV: u32 = 377;
pub const KEY_TV2: u32 = 378;
pub const KEY_VCR: u32 = 379;
pub const KEY_VCR2: u32 = 380;
pub const KEY_SAT: u32 = 381;
pub const KEY_SAT2: u32 = 382;
pub const KEY_CD: u32 = 383;
pub const KEY_TAPE: u32 = 384;
pub const KEY_RADIO: u32 = 385;
pub const KEY_TUNER: u32 = 386;
pub const KEY_PLAYER: u32 = 387;
pub const KEY_TEXT: u32 = 388;
pub const KEY_DVD: u32 = 389;
pub const KEY_AUX: u32 = 390;
pub const KEY_MP3: u32 = 391;
pub const KEY_AUDIO: u32 = 392;
pub const KEY_VIDEO: u32 = 393;
pub const KEY_DIRECTORY: u32 = 394;
pub const KEY_LIST: u32 = 395;
pub const KEY_MEMO: u32 = 396;
pub const KEY_CALENDAR: u32 = 397;
pub const KEY_RED: u32 = 398;
pub const KEY_GREEN: u32 = 399;
pub const KEY_YELLOW: u32 = 400;
pub const KEY_BLUE: u32 = 401;
pub const KEY_CHANNELUP: u32 = 402;
pub const KEY_CHANNELDOWN: u32 = 403;
pub const KEY_FIRST: u32 = 404;
pub const KEY_LAST: u32 = 405;
pub const KEY_AB: u32 = 406;
pub const KEY_NEXT: u32 = 407;
pub const KEY_RESTART: u32 = 408;
pub const KEY_SLOW: u32 = 409;
pub const KEY_SHUFFLE: u32 = 410;
pub const KEY_BREAK: u32 = 411;
pub const KEY_PREVIOUS: u32 = 412;
pub const KEY_DIGITS: u32 = 413;
pub const KEY_TEEN: u32 = 414;
pub const KEY_TWEN: u32 = 415;
pub const KEY_VIDEOPHONE: u32 = 416;
pub const KEY_GAMES: u32 = 417;
pub const KEY_ZOOMIN: u32 = 418;
pub const KEY_ZOOMOUT: u32 = 419;
pub const KEY_ZOOMRESET: u32 = 420;
pub const KEY_WORDPROCESSOR: u32 = 421;
pub const KEY_EDITOR: u32 = 422;
pub const KEY_SPREADSHEET: u32 = 423;
pub const KEY_GRAPHICSEDITOR: u32 = 424;
pub const KEY_PRESENTATION: u32 = 425;
pub const KEY_DATABASE: u32 = 426;
pub const KEY_NEWS: u32 = 427;
pub const KEY_VOICEMAIL: u32 = 428;
pub const KEY_ADDRESSBOOK: u32 = 429;
pub const KEY_MESSENGER: u32 = 430;
pub const KEY_DISPLAYTOGGLE: u32 = 431;
pub const KEY_SPELLCHECK: u32 = 432;
pub const KEY_LOGOFF: u32 = 433;
pub const KEY_DOLLAR: u32 = 434;
pub const KEY_EURO: u32 = 435;
pub const KEY_FRAMEBACK: u32 = 436;
pub const KEY_FRAMEFORWARD: u32 = 437;
pub const KEY_CONTEXT_MENU: u32 = 438;
pub const KEY_MEDIA_REPEAT: u32 = 439;
pub const KEY_10CHANNELSUP: u32 = 440;
pub const KEY_10CHANNELSDOWN: u32 = 441;
pub const KEY_IMAGES: u32 = 442;
pub const KEY_DEL_EOL: u32 = 448;
pub const KEY_DEL_EOS: u32 = 449;
pub const KEY_INS_LINE: u32 = 450;
pub const KEY_DEL_LINE: u32 = 451;
pub const KEY_FN: u32 = 464;
pub const KEY_FN_ESC: u32 = 465;
pub const KEY_FN_F1: u32 = 466;
pub const KEY_FN_F2: u32 = 467;
pub const KEY_FN_F3: u32 = 468;
pub const KEY_FN_F4: u32 = 469;
pub const KEY_FN_F5: u32 = 470;
pub const KEY_FN_F6: u32 = 471;
pub const KEY_FN_F7: u32 = 472;
pub const KEY_FN_F8: u32 = 473;
pub const KEY_FN_F9: u32 = 474;
pub const KEY_FN_F10: u32 = 475;
pub const KEY_FN_F11: u32 = 476;
pub const KEY_FN_F12: u32 = 477;
pub const KEY_FN_1: u32 = 478;
pub const KEY_FN_2: u32 = 479;
pub const KEY_FN_D: u32 = 480;
pub const KEY_FN_E: u32 = 481;
pub const KEY_FN_F: u32 = 482;
pub const KEY_FN_S: u32 = 483;
pub const KEY_FN_B: u32 = 484;
pub const KEY_BRL_DOT1: u32 = 497;
pub const KEY_BRL_DOT2: u32 = 498;
pub const KEY_BRL_DOT3: u32 = 499;
pub const KEY_BRL_DOT4: u32 = 500;
pub const KEY_BRL_DOT5: u32 = 501;
pub const KEY_BRL_DOT6: u32 = 502;
pub const KEY_BRL_DOT7: u32 = 503;
pub const KEY_BRL_DOT8: u32 = 504;
pub const KEY_BRL_DOT9: u32 = 505;
pub const KEY_BRL_DOT10: u32 = 506;
pub const KEY_NUMERIC_0: u32 = 512;
pub const KEY_NUMERIC_1: u32 = 513;
pub const KEY_NUMERIC_2: u32 = 514;
pub const KEY_NUMERIC_3: u32 = 515;
pub const KEY_NUMERIC_4: u32 = 516;
pub const KEY_NUMERIC_5: u32 = 517;
pub const KEY_NUMERIC_6: u32 = 518;
pub const KEY_NUMERIC_7: u32 = 519;
pub const KEY_NUMERIC_8: u32 = 520;
pub const KEY_NUMERIC_9: u32 = 521;
pub const KEY_NUMERIC_STAR: u32 = 522;
pub const KEY_NUMERIC_POUND: u32 = 523;
pub const KEY_CAMERA_FOCUS: u32 = 528;
pub const KEY_WPS_BUTTON: u32 = 529;
pub const KEY_TOUCHPAD_TOGGLE: u32 = 530;
pub const KEY_TOUCHPAD_ON: u32 = 531;
pub const KEY_TOUCHPAD_OFF: u32 = 532;
pub const KEY_CAMERA_ZOOMIN: u32 = 533;
pub const KEY_CAMERA_ZOOMOUT: u32 = 534;
pub const KEY_CAMERA_UP: u32 = 535;
pub const KEY_CAMERA_DOWN: u32 = 536;
pub const KEY_CAMERA_LEFT: u32 = 537;
pub const KEY_CAMERA_RIGHT: u32 = 538;
pub const KEY_ATTENDANT_ON: u32 = 539;
pub const KEY_ATTENDANT_OFF: u32 = 540;
pub const KEY_ATTENDANT_TOGGLE: u32 = 541;
pub const KEY_LIGHTS_TOGGLE: u32 = 542;
pub const BTN_TRIGGER_HAPPY: u32 = 704;
pub const BTN_TRIGGER_HAPPY1: u32 = 704;
pub const BTN_TRIGGER_HAPPY2: u32 = 705;
pub const BTN_TRIGGER_HAPPY3: u32 = 706;
pub const BTN_TRIGGER_HAPPY4: u32 = 707;
pub const BTN_TRIGGER_HAPPY5: u32 = 708;
pub const BTN_TRIGGER_HAPPY6: u32 = 709;
pub const BTN_TRIGGER_HAPPY7: u32 = 710;
pub const BTN_TRIGGER_HAPPY8: u32 = 711;
pub const BTN_TRIGGER_HAPPY9: u32 = 712;
pub const BTN_TRIGGER_HAPPY10: u32 = 713;
pub const BTN_TRIGGER_HAPPY11: u32 = 714;
pub const BTN_TRIGGER_HAPPY12: u32 = 715;
pub const BTN_TRIGGER_HAPPY13: u32 = 716;
pub const BTN_TRIGGER_HAPPY14: u32 = 717;
pub const BTN_TRIGGER_HAPPY15: u32 = 718;
pub const BTN_TRIGGER_HAPPY16: u32 = 719;
pub const BTN_TRIGGER_HAPPY17: u32 = 720;
pub const BTN_TRIGGER_HAPPY18: u32 = 721;
pub const BTN_TRIGGER_HAPPY19: u32 = 722;
pub const BTN_TRIGGER_HAPPY20: u32 = 723;
pub const BTN_TRIGGER_HAPPY21: u32 = 724;
pub const BTN_TRIGGER_HAPPY22: u32 = 725;
pub const BTN_TRIGGER_HAPPY23: u32 = 726;
pub const BTN_TRIGGER_HAPPY24: u32 = 727;
pub const BTN_TRIGGER_HAPPY25: u32 = 728;
pub const BTN_TRIGGER_HAPPY26: u32 = 729;
pub const BTN_TRIGGER_HAPPY27: u32 = 730;
pub const BTN_TRIGGER_HAPPY28: u32 = 731;
pub const BTN_TRIGGER_HAPPY29: u32 = 732;
pub const BTN_TRIGGER_HAPPY30: u32 = 733;
pub const BTN_TRIGGER_HAPPY31: u32 = 734;
pub const BTN_TRIGGER_HAPPY32: u32 = 735;
pub const BTN_TRIGGER_HAPPY33: u32 = 736;
pub const BTN_TRIGGER_HAPPY34: u32 = 737;
pub const BTN_TRIGGER_HAPPY35: u32 = 738;
pub const BTN_TRIGGER_HAPPY36: u32 = 739;
pub const BTN_TRIGGER_HAPPY37: u32 = 740;
pub const BTN_TRIGGER_HAPPY38: u32 = 741;
pub const BTN_TRIGGER_HAPPY39: u32 = 742;
pub const BTN_TRIGGER_HAPPY40: u32 = 743;
pub const KEY_MIN_INTERESTING: u32 = 113;
pub const KEY_MAX: u32 = 767;
pub const KEY_CNT: u32 = 768;
pub const REL_X: u32 = 0;
pub const REL_Y: u32 = 1;
pub const REL_Z: u32 = 2;
pub const REL_RX: u32 = 3;
pub const REL_RY: u32 = 4;
pub const REL_RZ: u32 = 5;
pub const REL_HWHEEL: u32 = 6;
pub const REL_DIAL: u32 = 7;
pub const REL_WHEEL: u32 = 8;
pub const REL_MISC: u32 = 9;
pub const REL_MAX: u32 = 15;
pub const REL_CNT: u32 = 16;
pub const ABS_X: u32 = 0;
pub const ABS_Y: u32 = 1;
pub const ABS_Z: u32 = 2;
pub const ABS_RX: u32 = 3;
pub const ABS_RY: u32 = 4;
pub const ABS_RZ: u32 = 5;
pub const ABS_THROTTLE: u32 = 6;
pub const ABS_RUDDER: u32 = 7;
pub const ABS_WHEEL: u32 = 8;
pub const ABS_GAS: u32 = 9;
pub const ABS_BRAKE: u32 = 10;
pub const ABS_HAT0X: u32 = 16;
pub const ABS_HAT0Y: u32 = 17;
pub const ABS_HAT1X: u32 = 18;
pub const ABS_HAT1Y: u32 = 19;
pub const ABS_HAT2X: u32 = 20;
pub const ABS_HAT2Y: u32 = 21;
pub const ABS_HAT3X: u32 = 22;
pub const ABS_HAT3Y: u32 = 23;
pub const ABS_PRESSURE: u32 = 24;
pub const ABS_DISTANCE: u32 = 25;
pub const ABS_TILT_X: u32 = 26;
pub const ABS_TILT_Y: u32 = 27;
pub const ABS_TOOL_WIDTH: u32 = 28;
pub const ABS_VOLUME: u32 = 32;
pub const ABS_MISC: u32 = 40;
pub const ABS_MT_SLOT: u32 = 47;
pub const ABS_MT_TOUCH_MAJOR: u32 = 48;
pub const ABS_MT_TOUCH_MINOR: u32 = 49;
pub const ABS_MT_WIDTH_MAJOR: u32 = 50;
pub const ABS_MT_WIDTH_MINOR: u32 = 51;
pub const ABS_MT_ORIENTATION: u32 = 52;
pub const ABS_MT_POSITION_X: u32 = 53;
pub const ABS_MT_POSITION_Y: u32 = 54;
pub const ABS_MT_TOOL_TYPE: u32 = 55;
pub const ABS_MT_BLOB_ID: u32 = 56;
pub const ABS_MT_TRACKING_ID: u32 = 57;
pub const ABS_MT_PRESSURE: u32 = 58;
pub const ABS_MT_DISTANCE: u32 = 59;
pub const ABS_MT_TOOL_X: u32 = 60;
pub const ABS_MT_TOOL_Y: u32 = 61;
pub const ABS_MAX: u32 = 63;
pub const ABS_CNT: u32 = 64;
pub const SW_LID: u32 = 0;
pub const SW_TABLET_MODE: u32 = 1;
pub const SW_HEADPHONE_INSERT: u32 = 2;
pub const SW_RFKILL_ALL: u32 = 3;
pub const SW_RADIO: u32 = 3;
pub const SW_MICROPHONE_INSERT: u32 = 4;
pub const SW_DOCK: u32 = 5;
pub const SW_LINEOUT_INSERT: u32 = 6;
pub const SW_JACK_PHYSICAL_INSERT: u32 = 7;
pub const SW_VIDEOOUT_INSERT: u32 = 8;
pub const SW_CAMERA_LENS_COVER: u32 = 9;
pub const SW_KEYPAD_SLIDE: u32 = 10;
pub const SW_FRONT_PROXIMITY: u32 = 11;
pub const SW_ROTATE_LOCK: u32 = 12;
pub const SW_LINEIN_INSERT: u32 = 13;
pub const SW_MAX: u32 = 15;
pub const SW_CNT: u32 = 16;
pub const MSC_SERIAL: u32 = 0;
pub const MSC_PULSELED: u32 = 1;
pub const MSC_GESTURE: u32 = 2;
pub const MSC_RAW: u32 = 3;
pub const MSC_SCAN: u32 = 4;
pub const MSC_TIMESTAMP: u32 = 5;
pub const MSC_MAX: u32 = 7;
pub const MSC_CNT: u32 = 8;
pub const LED_NUML: u32 = 0;
pub const LED_CAPSL: u32 = 1;
pub const LED_SCROLLL: u32 = 2;
pub const LED_COMPOSE: u32 = 3;
pub const LED_KANA: u32 = 4;
pub const LED_SLEEP: u32 = 5;
pub const LED_SUSPEND: u32 = 6;
pub const LED_MUTE: u32 = 7;
pub const LED_MISC: u32 = 8;
pub const LED_MAIL: u32 = 9;
pub const LED_CHARGING: u32 = 10;
pub const LED_MAX: u32 = 15;
pub const LED_CNT: u32 = 16;
pub const REP_DELAY: u32 = 0;
pub const REP_PERIOD: u32 = 1;
pub const REP_MAX: u32 = 1;
pub const REP_CNT: u32 = 2;
pub const SND_CLICK: u32 = 0;
pub const SND_BELL: u32 = 1;
pub const SND_TONE: u32 = 2;
pub const SND_MAX: u32 = 7;
pub const SND_CNT: u32 = 8;
pub const ID_BUS: u32 = 0;
pub const ID_VENDOR: u32 = 1;
pub const ID_PRODUCT: u32 = 2;
pub const ID_VERSION: u32 = 3;
pub const BUS_PCI: u32 = 1;
pub const BUS_ISAPNP: u32 = 2;
pub const BUS_USB: u32 = 3;
pub const BUS_HIL: u32 = 4;
pub const BUS_BLUETOOTH: u32 = 5;
pub const BUS_VIRTUAL: u32 = 6;
pub const BUS_ISA: u32 = 16;
pub const BUS_I8042: u32 = 17;
pub const BUS_XTKBD: u32 = 18;
pub const BUS_RS232: u32 = 19;
pub const BUS_GAMEPORT: u32 = 20;
pub const BUS_PARPORT: u32 = 21;
pub const BUS_AMIGA: u32 = 22;
pub const BUS_ADB: u32 = 23;
pub const BUS_I2C: u32 = 24;
pub const BUS_HOST: u32 = 25;
pub const BUS_GSC: u32 = 26;
pub const BUS_ATARI: u32 = 27;
pub const BUS_SPI: u32 = 28;
pub const MT_TOOL_FINGER: u32 = 0;
pub const MT_TOOL_PEN: u32 = 1;
pub const MT_TOOL_MAX: u32 = 1;
pub const FF_STATUS_STOPPED: u32 = 0;
pub const FF_STATUS_PLAYING: u32 = 1;
pub const FF_STATUS_MAX: u32 = 1;
pub const FF_RUMBLE: u32 = 80;
pub const FF_PERIODIC: u32 = 81;
pub const FF_CONSTANT: u32 = 82;
pub const FF_SPRING: u32 = 83;
pub const FF_FRICTION: u32 = 84;
pub const FF_DAMPER: u32 = 85;
pub const FF_INERTIA: u32 = 86;
pub const FF_RAMP: u32 = 87;
pub const FF_EFFECT_MIN: u32 = 80;
pub const FF_EFFECT_MAX: u32 = 87;
pub const FF_SQUARE: u32 = 88;
pub const FF_TRIANGLE: u32 = 89;
pub const FF_SINE: u32 = 90;
pub const FF_SAW_UP: u32 = 91;
pub const FF_SAW_DOWN: u32 = 92;
pub const FF_CUSTOM: u32 = 93;
pub const FF_WAVEFORM_MIN: u32 = 88;
pub const FF_WAVEFORM_MAX: u32 = 93;
pub const FF_GAIN: u32 = 96;
pub const FF_AUTOCENTER: u32 = 97;
pub const FF_MAX: u32 = 127;
pub const FF_CNT: u32 = 128;
pub const HWCONFIG_PATH: &[u8; 14] = b"/etc/hwconfig\0";
pub const UPDATE_MODE_PARTIAL: u32 = 0;
pub const UPDATE_MODE_FULL: u32 = 1;
pub const UPDATE_MODE_PARTIALHQ: u32 = 2;
pub const UPDATE_MODE_FULLHQ: u32 = 3;
pub const HWLIB_FRONTLIGHT_CHANNEL_MAX: u32 = 3;
pub const INKVIEW_FL_BRIGHTNESS_MAX: u32 = 100;
pub const INKVIEW_FL_COLOR_MAX: u32 = 100;
pub const APP_UID: u32 = 101;
pub const APP_GID: u32 = 101;
pub const SECAPP_UID: u32 = 102;
pub const SECAPP_GID: u32 = 102;
pub const DIRPREFIX: &[u8; 1] = b"\0";
pub const FLASHDIR: &[u8; 10] = b"/mnt/ext1\0";
pub const SDCARDDIR: &[u8; 10] = b"/mnt/ext2\0";
pub const USBDIR: &[u8; 10] = b"/mnt/ext3\0";
pub const SYSTEMDATA: &[u8; 9] = b"/ebrmain\0";
pub const USERDATA: &[u8; 17] = b"/mnt/ext1/system\0";
pub const USERDATA2: &[u8; 17] = b"/mnt/ext2/system\0";
pub const TEMPDIR: &[u8; 5] = b"/tmp\0";
pub const SECUREDIR: &[u8; 12] = b"/mnt/secure\0";
pub const VARRUNDIR: &[u8; 9] = b"/var/run\0";
pub const SYSTEMFONTDIR: &[u8; 15] = b"/ebrmain/fonts\0";
pub const USERFONTDIR: &[u8; 23] = b"/mnt/ext1/system/fonts\0";
pub const TEMPFONTPATH: &[u8; 11] = b"/tmp/fonts\0";
pub const PHOTOTEMPDIR: &[u8; 11] = b"/tmp/photo\0";
pub const USERPROFILES: &[u8; 26] = b"/mnt/ext1/system/profiles\0";
pub const USERPROFILES2: &[u8; 26] = b"/mnt/ext2/system/profiles\0";
pub const CURRENTPROFILE: &[u8; 35] = b"/mnt/ext1/system/profiles/.current\0";
pub const LASTPROFILE: &[u8; 32] = b"/mnt/ext1/system/profiles/.last\0";
pub const SALVAGEPROFILES: &[u8; 35] = b"/mnt/ext1/system/profiles/.salvage\0";
pub const CONFIGPATH: &[u8; 24] = b"/mnt/ext1/system/config\0";
pub const STATEPATH: &[u8; 23] = b"/mnt/ext1/system/state\0";
pub const SYSTEMTHEMESPATH: &[u8; 16] = b"/ebrmain/themes\0";
pub const USERTHEMESPATH: &[u8; 24] = b"/mnt/ext1/system/themes\0";
pub const CUSTOMRESOURCEPATH: &[u8; 27] = b"/mnt/ext1/system/resources\0";
pub const GLOBALCONFIGFILE: &[u8; 35] = b"/mnt/ext1/system/config/global.cfg\0";
pub const NETWORKCONFIGFILE: &[u8; 36] = b"/mnt/ext1/system/config/network.cfg\0";
pub const TSCALDATA: &[u8; 32] = b"/mnt/ext1/system/config/tsc.dat\0";
pub const TSCALDATA2: &[u8; 13] = b"/tmp/tsc.dat\0";
pub const SYSTEMLANGPATH: &[u8; 18] = b"/ebrmain/language\0";
pub const USERLANGPATH: &[u8; 26] = b"/mnt/ext1/system/language\0";
pub const SYSTEMKBDPATH: &[u8; 27] = b"/ebrmain/language/keyboard\0";
pub const USERKBDPATH: &[u8; 35] = b"/mnt/ext1/system/language/keyboard\0";
pub const SYSTEMDICTPATH: &[u8; 22] = b"/ebrmain/dictionaries\0";
pub const SECUREDICTPATH: &[u8; 25] = b"/mnt/secure/dictionaries\0";
pub const USERDICTPATH1: &[u8; 30] = b"/mnt/ext1/system/dictionaries\0";
pub const USERDICTPATH2: &[u8; 30] = b"/mnt/ext2/system/dictionaries\0";
pub const SYSTEMBOOTLOGOPATH: &[u8; 23] = b"/ebrmain/logo/bootlogo\0";
pub const SYSTEMOFFLOGOPATH: &[u8; 22] = b"/ebrmain/logo/offlogo\0";
pub const USERBOOTLOGOPATH: &[u8; 31] = b"/mnt/ext1/system/logo/bootlogo\0";
pub const USEROFFLOGOPATH: &[u8; 30] = b"/mnt/ext1/system/logo/offlogo\0";
pub const USERCOMPATLOGOPATH: &[u8; 22] = b"/mnt/ext1/system/logo\0";
pub const NOTESPATH: &[u8; 16] = b"/mnt/ext1/notes\0";
pub const NOTESPATH2: &[u8; 16] = b"/mnt/ext2/notes\0";
pub const GAMEPATH: &[u8; 23] = b"/mnt/ext1/applications\0";
pub const OLDGAMEPATH: &[u8; 16] = b"/mnt/ext1/games\0";
pub const USERAPPDIR: &[u8; 21] = b"/mnt/ext1/system/bin\0";
pub const CACHEPATH: &[u8; 23] = b"/mnt/ext1/system/cache\0";
pub const BACKUPDIR: &[u8; 17] = b"/mnt/ext2/backup\0";
pub const USERBOOKSHELF: &[u8; 35] = b"/mnt/ext1/system/bin/bookshelf.app\0";
pub const SYSTEMBOOKSHELF: &[u8; 27] = b"/ebrmain/bin/bookshelf.app\0";
pub const USERMPD: &[u8; 29] = b"/mnt/ext1/system/bin/mpd.app\0";
pub const SYSTEMMPD: &[u8; 21] = b"/ebrmain/bin/mpd.app\0";
pub const OBREEYSYNC_APP_PATH: &[u8; 28] = b"/ebrmain/bin/obreeysync.app\0";
pub const READER_CONTROLLER_APP_PATH: &[u8; 35] = b"/ebrmain/bin/reader_controller.app\0";
pub const DB_SERVER_APP_PATH: &[u8; 27] = b"/ebrmain/bin/db-server.app\0";
pub const READER_APP_PATH: &[u8; 29] = b"/ebrmain/bin/eink-reader.app\0";
pub const READER_CACHE_APP_PATH: &[u8; 35] = b"/ebrmain/bin/eink-cache-reader.app\0";
pub const OBREEYSYNC_V2_APP_PATH: &[u8; 32] = b"/ebrmain/bin/universal_sync.app\0";
pub const OBREEYSOCIAL_APP_PATH: &[u8; 30] = b"/ebrmain/bin/obreeysocial.app\0";
pub const USAGE_STAT_APP_PATH: &[u8; 28] = b"/ebrmain/bin/usage_stat.app\0";
pub const CONTROL_PANEL_APP_PATH: &[u8; 35] = b"/ebrmain/bin/control_panel_mgr.app\0";
pub const USEREXPLORER: &[u8; 34] = b"/mnt/ext1/system/bin/explorer.app\0";
pub const SYSTEMEXPLORER: &[u8; 26] = b"/ebrmain/bin/explorer.app\0";
pub const USERTASKMGR: &[u8; 33] = b"/mnt/ext1/system/bin/taskmgr.app\0";
pub const SYSTEMTASKMGR: &[u8; 25] = b"/ebrmain/bin/taskmgr.app\0";
pub const STATECLEANER: &[u8; 27] = b"/ebrmain/bin/cleanstate.sh\0";
pub const BACKUPSCRIPT: &[u8; 23] = b"/ebrmain/bin/backup.sh\0";
pub const RESTORESCRIPT: &[u8; 24] = b"/ebrmain/bin/restore.sh\0";
pub const NETAGENT: &[u8; 22] = b"/ebrmain/bin/netagent\0";
pub const BOOKLANDAPP: &[u8; 26] = b"/ebrmain/bin/bookland.app\0";
pub const USERMPLAYER: &[u8; 32] = b"/mnt/ext1/system/bin/mplayer.so\0";
pub const USERBOOKINFO: &[u8; 33] = b"/mnt/ext1/system/bin/bookinfo.so\0";
pub const POCKETBOOKSIG: &[u8; 29] = b"/mnt/ext1/system/.pocketbook\0";
pub const USERSCANNER: &[u8; 33] = b"/mnt/ext1/system/bin/scanner.app\0";
pub const SYSTEMSCANNER: &[u8; 25] = b"/ebrmain/bin/scanner.app\0";
pub const FRONTLIGHT_APP: &[u8; 16] = b"front-light.app\0";
pub const USERFRONTLIGHT: &[u8; 37] = b"/mnt/ext1/system/bin/front-light.app\0";
pub const SYSTEMSFRONTLIGHT: &[u8; 29] = b"/ebrmain/bin/front-light.app\0";
pub const LASTOPENBOOKS: &[u8; 36] = b"/mnt/ext1/system/state/lastopen.txt\0";
pub const CURRENTBOOK_SAVE: &[u8; 31] = b"/mnt/ext1/system/state/current\0";
pub const FAVORITES: &[u8; 26] = b"/mnt/ext1/system/favorite\0";
pub const CURRENTBOOK: &[u8; 14] = b"/tmp/.current\0";
pub const BOOKSHELFSTATE: &[u8; 14] = b"/tmp/.bsstate\0";
pub const BOOKSHELFSTATE_NV: &[u8; 32] = b"/mnt/ext1/system/state/.bsstate\0";
pub const HISTORYFILE: &[u8; 17] = b"/tmp/history.txt\0";
pub const DICKEYBOARD: &[u8; 20] = b"/tmp/dictionary.kbd\0";
pub const PLAYLISTFILE: &[u8; 18] = b"/tmp/playlist.pls\0";
pub const NETAGENTLOG: &[u8; 18] = b"/tmp/netagent.log\0";
pub const ADOBEPATH: &[u8; 34] = b"/mnt/ext1/.adobe-digital-editions\0";
pub const ADOBEPATH2: &[u8; 34] = b"/mnt/ext2/.adobe-digital-editions\0";
pub const HANDLERSPATH: &[u8; 37] = b"/mnt/ext1/system/config/handlers.cfg\0";
pub const URLHISTORY: &[u8; 38] = b"/mnt/ext1/system/cache/urlhistory.txt\0";
pub const WEBCACHE: &[u8; 14] = b"/tmp/webcache\0";
pub const WEBCACHEINDEX: &[u8; 20] = b"/tmp/webcache/index\0";
pub const WIDGETSCONFIG: &[u8; 32] = b"/mnt/ext1/system/config/widgets\0";
pub const WIDGETSOPEN: &[u8; 41] = b"/mnt/ext1/system/config/widgets/open.cfg\0";
pub const SWUPDATESTATUS: &[u8; 24] = b"/mnt/secure/swupdate.db\0";
pub const TASKINFOPATH: &[u8; 14] = b"/var/run/task\0";
pub const DOWNLOADFOLDER: &[u8; 20] = b"/mnt/ext1/Downloads\0";
pub const CERTIFICATESFOLDER: &[u8; 30] = b"/mnt/ext1/system/Certificates\0";
pub const PROXYCONFIGFILE: &[u8; 15] = b"/var/etc/proxy\0";
pub const AUTO_CONNECT_APP: &[u8; 30] = b"/ebrmain/bin/auto_connect.app\0";
pub const SILENT_CONNECT_CFG: &[u8; 46] = b"/mnt/ext1/system/config/silent_connection.cfg\0";
pub const TRACK_METADATA_CONFIG: &[u8; 24] = b"/tmp/track_metadata.cfg\0";
pub const SOCIAL_DIRECTORY: &[u8; 33] = b"/mnt/ext1/system/config/readrate\0";
pub const SOCIAL_PENDING_ACTIONS_FILE: &[u8; 52] =
    b"/mnt/ext1/system/config/readrate/pending_action.dat\0";
pub const SOCIALCONFIG: &[u8; 44] = b"/mnt/ext1/system/config/readrate/social.cfg\0";
pub const UNIVERSAL_SYNC_DIRECTORY: &[u8; 39] = b"/mnt/ext1/system/config/universal_sync\0";
pub const UNIVERSAL_SYNC_CONFIG: &[u8; 48] = b"/mnt/ext1/system/config/universal_sync/sync.cfg\0";
pub const DROPBOX_DIRECTORY: &[u8; 32] = b"/mnt/ext1/system/config/dropbox\0";
pub const DROPBOX_CONFIG: &[u8; 44] = b"/mnt/ext1/system/config/dropbox/dropbox.cfg\0";
pub const PBCLOUD_CONFIG_FILE: &[u8; 36] = b"/mnt/ext1/system/config/pbcloud.cfg\0";
pub const DEMO_APP_PATH: &[u8; 27] = b"/ebrmain/bin/picviewer.app\0";
pub const DEMO_IMAGES_PATH: &[u8; 22] = b"/mnt/ext1/system/demo\0";
pub const CHECKUPDATE_INFO_PATH: &[u8; 16] = b"/tmp/newsw.info\0";
pub const DEVICE_VARIABLE_CFG: &[u8; 23] = b"/mnt/secure/device.cfg\0";
pub const CONFIGURED_DEVICE_CFG: &[u8; 20] = b"/var/run/device.cfg\0";
pub const LOGO_APP_PATH: &[u8; 32] = b"/ebrmain/bin/power_off_logo.app\0";
pub const RESTORE_DEFAULT_BOOT_LOGO_APP_PATH: &[u8; 43] =
    b"/ebrmain/bin/restore_default_boot_logo.app\0";
pub const BROWSER_FOR_AUTH: &[u8; 25] = b"/ebrmain/bin/browser.app\0";
pub const READER_MANAGER_SOCKET_NAME: &[u8; 28] = b"\0reader_manager_socket_name\0";
pub const READER_CACHE_SOCKET_NAME: &[u8; 26] = b"\0reader_cache_socket_name\0";
pub const AUDIOBOOKS_DEFAULT_PATH: &[u8; 22] = b"/mnt/ext1/Audio Books\0";
pub const AUDIOBOOKS_CONFIG_DIRECTORY: &[u8; 35] = b"/mnt/ext1/system/config/audiobooks\0";
pub const AUDIOBOOKS_CONFIG_FILE: &[u8; 50] =
    b"/mnt/ext1/system/config/audiobooks/audiobooks.cfg\0";
pub const IMAGES_PARAM_PATH: &[u8; 46] = b"/mnt/ext1/system/config/images_parameters.cfg\0";
pub const SYSTEM_IMAGES_PARAM_PATH: &[u8; 38] = b"/ebrmain/config/images_parameters.cfg\0";
pub const USER_MENU_ICON_PATH: &[u8; 42] = b"/mnt/ext1/system/config/UserLoginIcon.png\0";
pub const BOOKSTORE2_APP_PATH: &[u8; 29] = b"/ebrmain/bin/bookstore-2.app\0";
pub const BOOKSTORE2_CONFIG: &[u8; 38] = b"/mnt/ext1/system/config/bookstore.cfg\0";
pub const BOOKSTORE2_FEEDS_CACHE_NAME: &[u8; 22] = b"bookstore_feeds_cache\0";
pub const BOOKSTORE2_FEEDS_CACHE_PATH: &[u8; 45] =
    b"/mnt/ext1/system/cache/bookstore_feeds_cache\0";
pub const BOOKSTORE2_COVERS_CACHE_NAME: &[u8; 23] = b"bookstore_covers_cache\0";
pub const BOOKSTORE2_COVERS_CACHE_PATH: &[u8; 46] =
    b"/mnt/ext1/system/cache/bookstore_covers_cache\0";
pub const BOOKSTORE2_DESKTOP_DATA_CONFIG: &[u8; 41] = b"/mnt/ext1/system/config/desktop_data.cfg\0";
pub const BOOKSTORE2_DESKTOP_DATA_CACHE_PATH: &[u8; 52] =
    b"/mnt/ext1/system/cache/bookstore_desktop_data_cache\0";
pub const OPTIMIZED_BOOKS_PATH: &[u8; 32] = b"/mnt/ext1/system/state/optimize\0";
pub const USBSTOR_SN_FILE: &[u8; 24] = b"/var/run/usb_storage_sn\0";
pub const PROFILE_LOCAL: u32 = 1;
pub const PROFILE_SDCARD: u32 = 2;
pub const SYSTEMDEPTH: u32 = 8;
pub const MAXMSGSIZE: u32 = 65520;
pub const MSG_REQUEST: u32 = 2147483647;
pub const MSG_XREQUEST: u32 = 2080374784;
pub const MSG_LAUNCH_APP: u32 = 2113929216;
pub const MSG_OK: u32 = 1;
pub const MSG_ERROR: u32 = 0;
pub const MSG_FORMAT: u32 = 257;
pub const MSG_SETTIME: u32 = 258;
pub const MSG_SETPROFILE: u32 = 259;
pub const MSG_PWENCRYPT: u32 = 260;
pub const MSG_PWDECRYPT: u32 = 261;
pub const MSG_RESTART: u32 = 262;
pub const MSG_REMOUNTFS: u32 = 263;
pub const MSG_WRITELOGO: u32 = 264;
pub const MSG_RESTORELOGO: u32 = 265;
pub const MSG_SUSPEND: u32 = 266;
pub const MSG_IOC_ENCRYPT: u32 = 267;
pub const MSG_IOC_DECRYPT: u32 = 268;
pub const MSG_REG_CHECK: u32 = 269;
pub const MSG_REG_WRITE: u32 = 270;
pub const MSG_GETSERIAL: u32 = 271;
pub const MSG_REBOOT: u32 = 272;
pub const MSG_REBOOT_AND_UPDATE: u32 = 273;
pub const MSG_TIMESTAMP: u32 = 274;
pub const MSG_UPDATESTATUS: u32 = 275;
pub const MSG_GSENSOR_MODE: u32 = 276;
pub const MSG_SCREEN_INVERT_MODE_CHANGED: u32 = 277;
pub const MSG_CONFIG_CHANGED: u32 = 278;
pub const MSG_SET_LED: u32 = 279;
pub const MSG_ENCRYPT_MEM: u32 = 280;
pub const MSG_DECRYPT_MEM: u32 = 281;
pub const MSG_GETDEVICEID: u32 = 282;
pub const MSG_SETFRONTLIGHT: u32 = 283;
pub const MSG_ACTUALIZEFRONTLIGHT: u32 = 284;
pub const MSG_UPDATE_SERVICE_STATUSES: u32 = 285;
pub const MSG_FACTORY_RESET: u32 = 286;
pub const MSG_SETTIME_FROM_NTP: u32 = 287;
pub const MSG_GET_IS_TIME_MONOTONIC_AFTER_LAST_NTP_SYNC: u32 = 288;
pub const MSG_GET_PARTNER_ID: u32 = 289;
pub const MSG_UPDATE_PARTNER_ID: u32 = 290;
pub const MSG_BAN_SUSPEND: u32 = 291;
pub const MSG_BACKUP: u32 = 292;
pub const MSG_RESTORE: u32 = 293;
pub const MSG_CALIBRATE_TP: u32 = 294;
pub const MSG_DROP_CACHES: u32 = 295;
pub const MSG_SHARE_DEVICE_CFG: u32 = 296;
pub const MSG_WRITE_LOW_POWER_LOGO: u32 = 297;
pub const MSG_DOSFSCK: u32 = 298;
pub const MSG_FBINFO: u32 = 513;
pub const MSG_ORIENTATION: u32 = 514;
pub const MSG_UPDPARTIAL: u32 = 515;
pub const MSG_UPDDYNAMIC: u32 = 516;
pub const MSG_UPDFULL: u32 = 517;
pub const MSG_EINKPM: u32 = 518;
pub const MSG_EINKTEMP: u32 = 519;
pub const MSG_AUDIO_STATUS: u32 = 768;
pub const MSG_AUDIO_RECONFIGURE: u32 = 769;
pub const MSG_TASK_REGISTER: u32 = 1281;
pub const MSG_TASK_NEWSUBTASK: u32 = 1282;
pub const MSG_TASK_SWITCHSUBTASK: u32 = 1283;
pub const MSG_TASK_ENDSUBTASK: u32 = 1284;
pub const MSG_TASK_SETPARAMETERS: u32 = 1285;
pub const MSG_TASK_SETSUBTASKINFO: u32 = 1286;
pub const MSG_TASK_FOREGROUND: u32 = 1287;
pub const MSG_TASK_BACKGROUND: u32 = 1288;
pub const MSG_TASK_CLOSE: u32 = 1289;
pub const MSG_TASK_LIST: u32 = 1290;
pub const MSG_TASK_PREVIOUS: u32 = 1291;
pub const MSG_TASK_INFO: u32 = 1292;
pub const MSG_TASK_SENDEVENT: u32 = 1293;
pub const MSG_TASK_SENDREQUEST: u32 = 1294;
pub const MSG_TASK_ADDREQLISTENER: u32 = 1296;
pub const MSG_TASK_DELREQLISTENER: u32 = 1297;
pub const MSG_TASK_GLOBALREQUEST: u32 = 1298;
pub const MSG_TASK_SENDEVENTSYNC: u32 = 1299;
pub const MSG_TASK_INITIALIZED: u32 = 1300;
pub const MSG_TASK_PREVIOUS_INSTACK: u32 = 1301;
pub const MSG_TASK_COPY_ACTIVE_FB: u32 = 1302;
pub const MSG_TASK_SEND_REQUEST_NOWAIT: u32 = 1303;
pub const MSG_START_SERVICES: u32 = 1536;
pub const MSG_LAST_OPEN_OPENED: u32 = 1537;
pub const MSG_START_TASKMGR: u32 = 1538;
pub const MSG_IOC_CONFIGSTORAGE: u32 = 1793;
pub const MSG_DEVICEKEY: u32 = 181452289;
pub const MSG_RESETKEY: u32 = 181452290;
pub const EVT_INIT: u32 = 21;
pub const EVT_EXIT: u32 = 22;
pub const EVT_SHOW: u32 = 23;
pub const EVT_HIDE: u32 = 24;
pub const EVT_KEYDOWN: u32 = 25;
pub const EVT_KEYPRESS: u32 = 25;
pub const EVT_KEYUP: u32 = 26;
pub const EVT_KEYRELEASE: u32 = 26;
pub const EVT_KEYREPEAT: u32 = 28;
pub const EVT_KEYPRESS_EXT: u32 = 40;
pub const EVT_KEYRELEASE_EXT: u32 = 41;
pub const EVT_KEYREPEAT_EXT: u32 = 42;
pub const EVT_POINTERUP: u32 = 29;
pub const EVT_POINTERDOWN: u32 = 30;
pub const EVT_POINTERMOVE: u32 = 31;
pub const EVT_SCROLL: u32 = 33;
pub const EVT_POINTERLONG: u32 = 34;
pub const EVT_POINTERHOLD: u32 = 35;
pub const EVT_POINTERDRAG: u32 = 44;
pub const EVT_POINTERCANCEL: u32 = 45;
pub const EVT_POINTERCHANGED: u32 = 46;
pub const EVT_ORIENTATION: u32 = 32;
pub const EVT_FOCUS: u32 = 36;
pub const EVT_UNFOCUS: u32 = 37;
pub const EVT_ACTIVATE: u32 = 38;
pub const EVT_MTSYNC: u32 = 39;
pub const EVT_TOUCHUP: u32 = 47;
pub const EVT_TOUCHDOWN: u32 = 48;
pub const EVT_TOUCHMOVE: u32 = 49;
pub const EVT_REPAINT: u32 = 43;
pub const EVT_QN_MOVE: u32 = 51;
pub const EVT_QN_RELEASE: u32 = 52;
pub const EVT_QN_BORDER: u32 = 53;
pub const EVT_SNAPSHOT: u32 = 71;
pub const EVT_FSINCOMING: u32 = 72;
pub const EVT_FSCHANGED: u32 = 73;
pub const EVT_MP_STATECHANGED: u32 = 81;
pub const EVT_MP_TRACKCHANGED: u32 = 82;
pub const EVT_PREVPAGE: u32 = 91;
pub const EVT_NEXTPAGE: u32 = 92;
pub const EVT_OPENDIC: u32 = 93;
pub const EVT_CONTROL_PANEL_ABOUT_TO_OPEN: u32 = 94;
pub const EVT_UPDATE: u32 = 95;
pub const EVT_PANEL_BLUETOOTH_A2DP: u32 = 118;
pub const EVT_TAB: u32 = 119;
pub const EVT_PANEL: u32 = 120;
pub const EVT_PANEL_ICON: u32 = 121;
pub const EVT_PANEL_TEXT: u32 = 122;
pub const EVT_PANEL_PROGRESS: u32 = 123;
pub const EVT_PANEL_MPLAYER: u32 = 124;
pub const EVT_PANEL_USBDRIVE: u32 = 125;
pub const EVT_PANEL_NETWORK: u32 = 126;
pub const EVT_PANEL_CLOCK: u32 = 127;
pub const EVT_PANEL_BLUETOOTH: u32 = 128;
pub const EVT_PANEL_TASKLIST: u32 = 129;
pub const EVT_PANEL_OBREEY_SYNC: u32 = 130;
pub const EVT_PANEL_SETREADINGMODE: u32 = 131;
pub const EVT_PANEL_SETREADINGMODE_INVERT: u32 = 132;
pub const EVT_PANEL_FRONT_LIGHT: u32 = 133;
pub const EVT_GLOBALREQUEST: u32 = 149;
pub const EVT_GLOBALACTION: u32 = 150;
pub const EVT_FOREGROUND: u32 = 151;
pub const EVT_BACKGROUND: u32 = 152;
pub const EVT_SUBTASKCLOSE: u32 = 153;
pub const EVT_CONFIGCHANGED: u32 = 154;
pub const EVT_SAVESTATE: u32 = 155;
pub const EVT_OBREEY_CONFIG_CHANGED: u32 = 156;
pub const EVT_SDIN: u32 = 161;
pub const EVT_SDOUT: u32 = 162;
pub const EVT_USBSTORE_IN: u32 = 163;
pub const EVT_USBSTORE_OUT: u32 = 164;
pub const EVT_BT_RXCOMPLETE: u32 = 171;
pub const EVT_BT_TXCOMPLETE: u32 = 172;
pub const EVT_SYNTH_ENDED: u32 = 200;
pub const EVT_DIC_CLOSED: u32 = 201;
pub const EVT_SHOW_KEYBOARD: u32 = 202;
pub const EVT_TEXTCLEAR: u32 = 209;
pub const EVT_EXT_KB: u32 = 210;
pub const EVT_LETTER: u32 = 211;
pub const EVT_CALLBACK: u32 = 212;
pub const EVT_SCANPROGRESS: u32 = 213;
pub const EVT_STOPSCAN: u32 = 214;
pub const EVT_STARTSCAN: u32 = 215;
pub const EVT_SCANSTOPPED: u32 = 216;
pub const EVT_POSTPONE_TIMED_POWEROFF: u32 = 217;
pub const EVT_FRAME_ACTIVATED: u32 = 218;
pub const EVT_FRAME_DEACTIVATED: u32 = 219;
pub const EVT_READ_PROGRESS_CHANGED: u32 = 220;
pub const EVT_DUMP_BITMAPS_DEBUG_INFO: u32 = 221;
pub const EVT_NET_CONNECTED: u32 = 256;
pub const EVT_NET_DISCONNECTED: u32 = 257;
pub const EVT_NET_FOUND_NEW_FW: u32 = 260;
pub const EVT_SYNTH_POSITION: u32 = 261;
pub const EVT_ASYNC_TASK_FINISHED: u32 = 262;
pub const EVT_STOP_PLAYING: u32 = 263;
pub const EVT_AVRCP_COMMAND: u32 = 264;
pub const EVT_AUDIO_CHANGED: u32 = 265;
pub const EVT_PACKAGE_JOB_CHANGED: u32 = 266;
pub const EVT_TTS_PLAY_ENDED: u32 = 267;
pub const EVT_SCREEN_INVERSION_MODE_CHANGED: u32 = 268;
pub const EVT_CUSTOM: u32 = 269;
pub const IV_KEY_POWER: u32 = 1;
pub const IV_KEY_DELETE: u32 = 8;
pub const IV_KEY_TAB: u32 = 9;
pub const IV_KEY_OK: u32 = 10;
pub const IV_KEY_UP: u32 = 17;
pub const IV_KEY_DOWN: u32 = 18;
pub const IV_KEY_LEFT: u32 = 19;
pub const IV_KEY_RIGHT: u32 = 20;
pub const IV_KEY_MINUS: u32 = 21;
pub const IV_KEY_PLUS: u32 = 22;
pub const IV_KEY_MENU: u32 = 23;
pub const IV_KEY_PREV: u32 = 24;
pub const IV_KEY_NEXT: u32 = 25;
pub const IV_KEY_HOME: u32 = 26;
pub const IV_KEY_BACK: u32 = 27;
pub const IV_KEY_PREV2: u32 = 28;
pub const IV_KEY_NEXT2: u32 = 29;
pub const IV_KEY_MUSIC: u32 = 30;
pub const IV_KEY_COVEROPEN: u32 = 2;
pub const IV_KEY_COVERCLOSE: u32 = 3;
pub const IV_KEY_ZOOMOUT: u32 = 6;
pub const IV_KEY_ZOOMIN: u32 = 7;
pub const IV_KEY_MENU_POWER: u32 = 4;
pub const IV_KEY_MAX: u32 = 32;
pub const IV_KEY_SHIFT: u32 = 14;
pub const IV_KEY_LANGUAGECHANGE: u32 = 15;
pub const IV_KEY_KEYBOARDCLOSE: u32 = 16;
pub const IV_KEY_0: u32 = 48;
pub const IV_KEY_1: u32 = 49;
pub const IV_KEY_2: u32 = 50;
pub const IV_KEY_3: u32 = 51;
pub const IV_KEY_4: u32 = 52;
pub const IV_KEY_5: u32 = 53;
pub const IV_KEY_6: u32 = 54;
pub const IV_KEY_7: u32 = 55;
pub const IV_KEY_8: u32 = 56;
pub const IV_KEY_9: u32 = 57;
pub const BLACK: u32 = 0;
pub const DGRAY: u32 = 5592405;
pub const LGRAY: u32 = 11184810;
pub const WHITE: u32 = 16777215;
pub const ITEM_HEADER: u32 = 1;
pub const ITEM_ACTIVE: u32 = 2;
pub const ITEM_INACTIVE: u32 = 3;
pub const ITEM_SUBMENU: u32 = 5;
pub const ITEM_SEPARATOR: u32 = 6;
pub const ITEM_BULLET: u32 = 7;
pub const ITEM_TYPEMASK: u32 = 31;
pub const ITEM_HIDDEN: u32 = 128;
pub const ITEM_OLDMENU: u32 = 32768;
pub const ITEM_ALTSTYLE: u32 = 64;
pub const KBD_NORMAL: u32 = 0;
pub const KBD_ENTEXT: u32 = 1;
pub const KBD_PHONE: u32 = 2;
pub const KBD_NUMERIC: u32 = 4;
pub const KBD_IPADDR: u32 = 5;
pub const KBD_FILENAME: u32 = 6;
pub const KBD_URL: u32 = 7;
pub const KBD_DATE: u32 = 8;
pub const KBD_TIME: u32 = 9;
pub const KBD_DATETIME: u32 = 10;
pub const KBD_HEX: u32 = 11;
pub const KBD_HOURS: u32 = 12;
pub const KBD_UPPER: u32 = 16;
pub const KBD_LOWER: u32 = 32;
pub const KBD_FIRSTUPPER: u32 = 48;
pub const KBD_PASSWORD: u32 = 256;
pub const KBD_NOSELECT: u32 = 512;
pub const KBD_SCREENTOP: u32 = 1024;
pub const KBD_NOHEADER: u32 = 2048;
pub const KBD_NOEVTSHOW: u32 = 4096;
pub const KBD_SENDKEYBOARDSTATEEVENTS: u32 = 8192;
pub const KBD_NOTOUCH: u32 = 16384;
pub const KBD_PASSEVENTS: u32 = 32768;
pub const KBD_NOUPDATE_AFTER_CLOSE: u32 = 65536;
pub const KBD_EN_DEFAULT: u32 = 131072;
pub const KBD_NOUPDATE_AFTER_OPEN: u32 = 262144;
pub const KBD_NO_SELFCLOSE_ON_OK: u32 = 524288;
pub const KBD_CUSTOM_ENTER_KEY: u32 = 1048576;
pub const KBD_MARKED_ENTER_KEY: u32 = 2097152;
pub const KBD_PASSWORD_WIFI: u32 = 4194304;
pub const KBD_NEXT: u32 = 8388608;
pub const KBD_ENTRY_AREA: u32 = 16777216;
pub const KBD_ICON_ENTER_KEY: u32 = 33554432;
pub const KBD_HIDE_SUGGESTIONS: u32 = 67108864;
pub const ICON_INFORMATION: u32 = 1;
pub const ICON_QUESTION: u32 = 2;
pub const ICON_WARNING: u32 = 3;
pub const ICON_ERROR: u32 = 4;
pub const ICON_WIFI: u32 = 5;
pub const DEF_BUTTON1: u32 = 0;
pub const DEF_BUTTON2: u32 = 4096;
pub const DEF_BUTTON3: u32 = 8192;
pub const NO_DISMISS: u32 = 32768;
pub const DLG_HW_BUTTON: u32 = 65536;
pub const WITH_SIZE: u32 = 1;
pub const LIST_BEGINPAINT: u32 = 1;
pub const LIST_PAINT: u32 = 2;
pub const LIST_ENDPAINT: u32 = 3;
pub const LIST_OPEN: u32 = 4;
pub const LIST_MENU: u32 = 5;
pub const LIST_DELETE: u32 = 6;
pub const LIST_EXIT: u32 = 7;
pub const LIST_ORIENTATION: u32 = 8;
pub const LIST_POINTER: u32 = 9;
pub const LIST_INFO: u32 = 11;
pub const LIST_SCROLL: u32 = 12;
pub const LISTFLAG_SCROLL: u32 = 1073741824;
pub const BMK_CLOSED: i32 = -1;
pub const BMK_SELECTED: u32 = 1;
pub const BMK_ADDED: u32 = 2;
pub const BMK_REMOVED: u32 = 3;
pub const BMK_PAINT: u32 = 4;
pub const CFG_TEXT: u32 = 1;
pub const CFG_CHOICE: u32 = 2;
pub const CFG_INDEX: u32 = 3;
pub const CFG_TIME: u32 = 4;
pub const CFG_FONT: u32 = 5;
pub const CFG_FONTFACE: u32 = 6;
pub const CFG_INFO: u32 = 7;
pub const CFG_NUMBER: u32 = 8;
pub const CFG_ENTEXT: u32 = 9;
pub const CFG_PASSWORD: u32 = 10;
pub const CFG_IPADDR: u32 = 11;
pub const CFG_URL: u32 = 12;
pub const CFG_PHONE: u32 = 13;
pub const CFG_ACTIONS: u32 = 14;
pub const CFG_CHOICE_SPECIAL_FONT: u32 = 15;
pub const CFG_DIRECTORY: u32 = 16;
pub const CFG_HOURS: u32 = 17;
pub const CFG_CHECKBOX: u32 = 18;
pub const CFG_SUBMENU_ACTION: u32 = 29;
pub const CFG_CUSTOM: u32 = 30;
pub const CFG_SUBMENU: u32 = 31;
pub const CFG_MASK: u32 = 127;
pub const CFG_FLAG_MASK: i32 = -128;
pub const CFG_HIDDEN: u32 = 128;
pub const CFG_READONLY: u32 = 256;
pub const CFG_BSCSPEC: u32 = 512;
pub const ALLTASKS: i32 = -1;
pub const MAINTASK: i32 = -2;
pub const OTHERTASKS: i32 = -3;
pub const THISTASK: i32 = -4;
pub const ACTIVETASK: i32 = -5;
pub const MPLAYERTASK: i32 = -6;
pub const DICTIONARYTASK: i32 = -7;
pub const ALLSUBTASKS: i32 = -1;
pub const CURRENTSUBTASK: i32 = -6;
pub const TASK_HIDDEN: u32 = 1;
pub const TASK_COPYLASTFB: u32 = 2;
pub const TASK_NOUPDATEONFOCUS: u32 = 4;
pub const TASK_SINGLEINSTANCE: u32 = 8;
pub const TASK_SPYEVENTS: u32 = 16;
pub const TASK_OUTOFSTACK: u32 = 32;
pub const TASK_NOFORCEDKILL: u32 = 64;
pub const TASK_MAKEACTIVE: u32 = 128;
pub const TASK_GROUP1: u32 = 256;
pub const TASK_GROUP2: u32 = 512;
pub const TASK_OOMPROOF: u32 = 16384;
pub const TASK_AUTORESTART: u32 = 32768;
pub const TASK_DONTSENDTASKMSG: u32 = 65536;
pub const TASK_LOW_PRIORITY_FOR_OOM_KILL: u32 = 131072;
pub const TASK_HIGH_PRIORITY_FOR_OOM_KILL: u32 = 262144;
pub const TASK_FB_MASK: u32 = 3145728;
pub const TASK_FB_GS8: u32 = 0;
pub const TASK_FB_RGB24: u32 = 1048576;
pub const TASK_SELFREGISTER: u32 = 1073741824;
pub const TASK_DONTCHANGE: u32 = 4294967295;
pub const TASK_BACKGROUND: u32 = 37;
pub const TASK_NOHANDLER: u32 = 65573;
pub const RQL_ADD: u32 = 1;
pub const RQL_REPLACE: u32 = 2;
pub const RQL_ADDIFNONE: u32 = 3;
pub const RQL_REMOVE: u32 = 4;
pub const REQ_KEYLOCK: u32 = 65;
pub const REQ_MAINMENU: u32 = 66;
pub const REQ_EXIT: u32 = 67;
pub const REQ_LASTOPEN: u32 = 68;
pub const REQ_PROFILES: u32 = 69;
pub const REQ_SCREENSHOT: u32 = 70;
pub const REQ_CALC: u32 = 71;
pub const REQ_PLAYER: u32 = 72;
pub const REQ_PLAYPAUSE: u32 = 73;
pub const REQ_VOLUMEUP: u32 = 74;
pub const REQ_VOLUMEDOWN: u32 = 75;
pub const REQ_NETWORK: u32 = 76;
pub const REQ_BTSWITCH: u32 = 77;
pub const REQ_DROPCONN: u32 = 78;
pub const REQ_TASKMGR: u32 = 79;
pub const REQ_SWITCHTASK: u32 = 80;
pub const REQ_FLIPTASK: u32 = 81;
pub const REQ_KILLTASK: u32 = 82;
pub const REQ_POWEROFF: u32 = 83;
pub const REQ_OPENBOOK: u32 = 84;
pub const REQ_BOOKSTATE: u32 = 85;
pub const REQ_BOOKOPENED: u32 = 86;
pub const REQ_HEADCHNG: u32 = 87;
pub const REQ_OPENBOOK2: u32 = 88;
pub const REQ_FRONTLIGHT: u32 = 89;
pub const REQ_KEYUNLOCK: u32 = 90;
pub const REQ_HOURGLASS: u32 = 91;
pub const REQ_MESSAGEBOX: u32 = 92;
pub const REQ_KEYHARDLOCK: u32 = 93;
pub const REQ_PB_CLOUD_NEW_POSITION: u32 = 94;
pub const REQ_PREVTRACK: u32 = 95;
pub const REQ_NEXTTRACK: u32 = 96;
pub const REQ_PB_CLOUD_BOOKMARKS_SYNCED: u32 = 97;
pub const REQ_TOUCHSCREEN: u32 = 98;
pub const REQ_EXPLORER: u32 = 99;
pub const REQ_OPEN_WITH_ARGS: u32 = 100;
pub const ALIGN_LEFT: u32 = 1;
pub const ALIGN_CENTER: u32 = 2;
pub const ALIGN_RIGHT: u32 = 4;
pub const ALIGN_FIT: u32 = 8;
pub const VALIGN_TOP: u32 = 16;
pub const VALIGN_MIDDLE: u32 = 32;
pub const VALIGN_BOTTOM: u32 = 64;
pub const ROTATE: u32 = 128;
pub const HYPHENS: u32 = 256;
pub const DOTS: u32 = 512;
pub const RTLAUTO: u32 = 1024;
pub const UNDERLINE: u32 = 2048;
pub const STRETCH: u32 = 4096;
pub const TILE: u32 = 8192;
pub const TO_UPPER: u32 = 16384;
pub const TEXT_OUTPUT_COMMAND: u32 = 8;
pub const TEXT_OUTPUT_CMD_LINEBREAK_ON_SPACE_ONLY_ON: u32 = 1;
pub const TEXT_OUTPUT_CMD_LINEBREAK_ON_SPACE_ONLY_OFF: u32 = 2;
pub const TEXT_OUTPUT_CMD_STRIKETHROUGH_TEXT_ON: u32 = 3;
pub const TEXT_OUTPUT_CMD_STRIKETHROUGH_TEXT_OFF: u32 = 4;
pub const FR_CLOSE: u32 = 1;
pub const FR_MOVEUP: u32 = 2;
pub const FR_MOVEDOWN: u32 = 4;
pub const FR_DICTIONARY: u32 = 67108864;
pub const FR_NOMARGIN: u32 = 134217728;
pub const FR_OVERLAP: u32 = 268435456;
pub const FR_HEADER: u32 = 536870912;
pub const FR_UPDATE: u32 = 1073741824;
pub const FR_INFO: u32 = 65536;
pub const FR_WARNING: u32 = 131072;
pub const FR_ERROR: u32 = 196608;
pub const FR_DIALOG: u32 = 262144;
pub const FR_APP: u32 = 327680;
pub const ARROW_LEFT: u32 = 1;
pub const ARROW_RIGHT: u32 = 2;
pub const ARROW_UP: u32 = 3;
pub const ARROW_DOWN: u32 = 4;
pub const SYMBOL_OK: u32 = 5;
pub const SYMBOL_PAUSE: u32 = 6;
pub const SYMBOL_BULLET: u32 = 7;
pub const ARROW_UPDOWN: u32 = 8;
pub const SYMBOL_MENU: u32 = 9;
pub const IMAGE_BW: u32 = 1;
pub const IMAGE_GRAY2: u32 = 2;
pub const IMAGE_GRAY4: u32 = 4;
pub const IMAGE_GRAY8: u32 = 8;
pub const IMAGE_RGB: u32 = 24;
pub const ROTATE0: u32 = 0;
pub const ROTATE90: u32 = 1;
pub const ROTATE270: u32 = 2;
pub const ROTATE180: u32 = 3;
pub const XMIRROR: u32 = 4;
pub const YMIRROR: u32 = 8;
pub const A2DITHER: u32 = 16;
pub const DITHER_THRESHOLD: u32 = 0;
pub const DITHER_PATTERN: u32 = 1;
pub const DITHER_DIFFUSION: u32 = 2;
pub const QN_X: u32 = 4096;
pub const QN_Y: u32 = 8192;
pub const QN_XY: u32 = 12288;
pub const QN_SWAIT: u32 = 16384;
pub const QN_RWAIT: u32 = 32768;
pub const QN_CLEANUP: u32 = 65536;
pub const MP_ONCE: u32 = 0;
pub const MP_CONTINUOUS: u32 = 1;
pub const MP_RANDOM: u32 = 2;
pub const FTYPE_UNKNOWN: u32 = 0;
pub const FTYPE_BOOK: u32 = 1;
pub const FTYPE_PICTURE: u32 = 2;
pub const FTYPE_MUSIC: u32 = 3;
pub const FTYPE_APPLICATION: u32 = 4;
pub const FTYPE_WEBLINK: u32 = 5;
pub const FTYPE_FOLDER: u32 = 255;
pub const OB_ADDTOLAST: u32 = 1;
pub const OB_WITHRETURN: u32 = 2;
pub const OB_PARAMSFIRST: u32 = 4;
pub const OB_NONEWTASK: u32 = 8;
pub const OB_SOFTUPDATE: u32 = 16;
pub const OB_NOHOURGLASS: u32 = 32;
pub const NET_BLUETOOTH: u32 = 1;
pub const NET_WIFI: u32 = 2;
pub const NET_CDMA3G: u32 = 4;
pub const NET_BTREADY: u32 = 256;
pub const NET_WIFIREADY: u32 = 512;
pub const NET_CDMA3GREADY: u32 = 1024;
pub const NET_CONNECTED: u32 = 3840;
pub const CONN_GPRS: u32 = 1;
pub const CONN_WIFI: u32 = 2;
pub const CONN_CDMA3G: u32 = 3;
pub const BLUETOOTH_OFF: u32 = 0;
pub const BLUETOOTH_HIDDEN: u32 = 1;
pub const BLUETOOTH_VISIBLE: u32 = 2;
pub const NET_OK: u32 = 0;
pub const NET_CONNECT: u32 = 1;
pub const NET_TRANSFER: u32 = 2;
pub const NET_FAIL: i32 = -11;
pub const NET_ABORTED: i32 = -12;
pub const NET_EINIT: i32 = -13;
pub const NET_EWRONGID: i32 = -14;
pub const NET_ENETWORK: i32 = -15;
pub const NET_EFILE: i32 = -16;
pub const NET_EPIPE: i32 = -17;
pub const NET_ETHREAD: i32 = -18;
pub const NET_EPROTO: i32 = -19;
pub const NET_EURL: i32 = -20;
pub const NET_ERESOLVE: i32 = -21;
pub const NET_ECONNECT: i32 = -22;
pub const NET_EACCESS: i32 = -23;
pub const NET_ENOTFOUND: i32 = -24;
pub const NET_EPARTIAL: i32 = -25;
pub const NET_EBROKEN: i32 = -26;
pub const NET_ETIMEOUT: i32 = -27;
pub const NET_ESERVER: i32 = -28;
pub const NET_EHTTP: i32 = -29;
pub const NET_EHARDWARE: i32 = -30;
pub const NET_ENOTCONF: i32 = -31;
pub const NET_EBADCONF: i32 = -32;
pub const NET_ENODEVICE: i32 = -33;
pub const NET_EPPP: i32 = -34;
pub const NET_EDISABLED: i32 = -35;
pub const NET_EDHCP: i32 = -36;
pub const NET_EWRONGKEY: i32 = -37;
pub const NET_EAUTH: i32 = -38;
pub const NET_EFLIGHTMODE: i32 = -39;
pub const VN_NOPATH: u32 = 1;
pub const VN_NOESCAPE: u32 = 2;
pub const VN_ABSOLUTE: u32 = 4;
pub const VN_RELATIVE: u32 = 8;
pub const A2DP_DISCONNECTED: u32 = 0;
pub const A2DP_CONNECTED_TO_SNK: u32 = 1;
pub const CF_CONFIG_RESUME: u32 = 1;
pub const FONT_ACTIVATE_CODE: u32 = 2410017735;
pub const IV_NULL_HANDLER_DESCRIPTOR: u32 = 0;
pub const MT_QUEUE_LEN: u32 = 10;
pub const MT_SECTION_LEN: u32 = 2;
pub const MT_CONTAINER_QUEUE_LEN: u32 = 10;
pub const MAX_BT_SERVICE_USER: u32 = 16;
pub const GSENSOR_OFF: u32 = 0;
pub const GSENSOR_ON: u32 = 1;
pub const GSENSOR_INTR: u32 = 2;
pub const LOOKUP_WORD_FOUND_EXACT: u32 = 2;
pub const LOOKUP_WORD_FOUND_SIMILAR: u32 = 1;
pub const LOOKUP_WORD_NOT_FOUND: u32 = 0;
pub const IV_OSY_STATUS_TURNED_OFF: u32 = 0;
pub const IV_OSY_STATUS_WRONG_LOGIN_PASSWORD: u32 = 1;
pub const IV_OSY_STATUS_DOWNLOADING: u32 = 2;
pub const IV_OSY_STATUS_PAUSED: u32 = 3;
pub const IV_OSY_STATUS_IDLE: u32 = 4;
pub const IV_OSY_STATUS_ERROR: u32 = 5;
pub const HIGH_PRIORITY_JOB_OPEN_STORE: u32 = 0;
pub const HIGH_PRIORITY_JOB_OPEN_BOOK: u32 = 1;
pub const BTGATT_CLIENT_PATH: &[u8; 23] = b"/usr/bin/btgatt-client\0";
pub const BTGATT_SERVICE_PATH: &[u8; 36] = b"/usr/libexec/bluetooth/gatt-service\0";
pub const BTGATT_SERVICE_RX_NODE: &[u8; 68] =
    b"/var/run/bt_gatt_services/0000ffff-0000-1000-8000-00805f9b34fb/0001\0";
pub const BTGATT_SERVICE_TX_NODE: &[u8; 68] =
    b"/var/run/bt_gatt_services/0000ffff-0000-1000-8000-00805f9b34fb/0002\0";
pub const BTGATT_SERVICE_STATUS_NODE: &[u8; 33] = b"/var/run/bt_gatt_services/status\0";
pub const CONFIGSTORAGESIZE: u32 = 4096;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __quad_t = ::std::os::raw::c_longlong;
pub type __u_quad_t = ::std::os::raw::c_ulonglong;
pub type __dev_t = __u_quad_t;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = __u_quad_t;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = __quad_t;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = __u_quad_t;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = __quad_t;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = __u_quad_t;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = __u_quad_t;
pub type __fsword_t = ::std::os::raw::c_int;
pub type __ssize_t = ::std::os::raw::c_int;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        12usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __gnuc_va_list = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_marker> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        12usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        4usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sbuf) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        152usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        71usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = _G_fpos_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub __wait_terminated: wait__bindgen_ty_1,
    pub __wait_stopped: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_termsig: ::std::os::raw::c_uint,
        __w_coredump: ::std::os::raw::c_uint,
        __w_retcode: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __w_termsig: u32 = unsafe { ::std::mem::transmute(__w_termsig) };
            __w_termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __w_coredump: u32 = unsafe { ::std::mem::transmute(__w_coredump) };
            __w_coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_retcode: u32 = unsafe { ::std::mem::transmute(__w_retcode) };
            __w_retcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_stopval: ::std::os::raw::c_uint,
        __w_stopsig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let __w_stopval: u32 = unsafe { ::std::mem::transmute(__w_stopval) };
            __w_stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_stopsig: u32 = unsafe { ::std::mem::transmute(__w_stopsig) };
            __w_stopsig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    const UNINIT: ::std::mem::MaybeUninit<wait> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wait_terminated) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_terminated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wait_stopped) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_stopped)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __WAIT_STATUS {
    pub __uptr: *mut wait,
    pub __iptr: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    const UNINIT: ::std::mem::MaybeUninit<__WAIT_STATUS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__WAIT_STATUS>(),
        4usize,
        concat!("Size of: ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<__WAIT_STATUS>(),
        4usize,
        concat!("Alignment of ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__uptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__uptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__iptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__iptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = ::std::os::raw::c_int;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 32usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        8usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        8usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        4usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 36usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        36usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        4usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 24usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __kind: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: pthread_mutex_t___pthread_mutex_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t___pthread_mutex_s__bindgen_ty_1 {
    pub __spins: ::std::os::raw::c_int,
    pub __list: __pthread_slist_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s__bindgen_ty_1),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t___pthread_mutex_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__futex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__total_seq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wakeup_seq) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__woken_seq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mutex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nwaiters) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__broadcast_seq) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__broadcast_seq)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __flags: ::std::os::raw::c_uchar,
    pub __shared: ::std::os::raw::c_uchar,
    pub __pad1: ::std::os::raw::c_uchar,
    pub __pad2: ::std::os::raw::c_uchar,
    pub __writer: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nr_readers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers_wakeup) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writer_wakeup) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nr_readers_queued) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nr_writers_queued) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writer) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 20usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        20usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        28usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        4usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        116usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        4usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
pub const _ISupper: _bindgen_ty_1 = 256;
pub const _ISlower: _bindgen_ty_1 = 512;
pub const _ISalpha: _bindgen_ty_1 = 1024;
pub const _ISdigit: _bindgen_ty_1 = 2048;
pub const _ISxdigit: _bindgen_ty_1 = 4096;
pub const _ISspace: _bindgen_ty_1 = 8192;
pub const _ISprint: _bindgen_ty_1 = 16384;
pub const _ISgraph: _bindgen_ty_1 = 32768;
pub const _ISblank: _bindgen_ty_1 = 1;
pub const _IScntrl: _bindgen_ty_1 = 2;
pub const _ISpunct: _bindgen_ty_1 = 4;
pub const _ISalnum: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
pub const _PC_LINK_MAX: _bindgen_ty_2 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_2 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_2 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_2 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_2 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_2 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_2 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_2 = 7;
pub const _PC_VDISABLE: _bindgen_ty_2 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_2 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_2 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_2 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_2 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_2 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_2 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_2 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_2 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_2 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_2 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_2 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_2 = 20;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_3 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_3 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_3 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_3 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_3 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_3 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_3 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_3 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_3 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_3 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_3 = 10;
pub const _SC_TIMERS: _bindgen_ty_3 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_3 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_3 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_3 = 14;
pub const _SC_FSYNC: _bindgen_ty_3 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_3 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_3 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_3 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_3 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_3 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_3 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_3 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_3 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_3 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_3 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_3 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_3 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_3 = 28;
pub const _SC_VERSION: _bindgen_ty_3 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_3 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_3 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_3 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_3 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_3 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_3 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_3 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_3 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_3 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_3 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_3 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_3 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_3 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_3 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_3 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_3 = 45;
pub const _SC_2_VERSION: _bindgen_ty_3 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_3 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_3 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_3 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_3 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_3 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_3 = 52;
pub const _SC_PII: _bindgen_ty_3 = 53;
pub const _SC_PII_XTI: _bindgen_ty_3 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_3 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_3 = 56;
pub const _SC_PII_OSI: _bindgen_ty_3 = 57;
pub const _SC_POLL: _bindgen_ty_3 = 58;
pub const _SC_SELECT: _bindgen_ty_3 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_3 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_3 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_3 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_3 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_3 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_3 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_3 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_3 = 66;
pub const _SC_THREADS: _bindgen_ty_3 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_3 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_3 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_3 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_3 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_3 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_3 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_3 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_3 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_3 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_3 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_3 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_3 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_3 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_3 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_3 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_3 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_3 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_3 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_3 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_3 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_3 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_3 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_3 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_3 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_3 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_3 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_3 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_3 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_3 = 96;
pub const _SC_2_UPE: _bindgen_ty_3 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_3 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_3 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_3 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_3 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_3 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_3 = 103;
pub const _SC_INT_MAX: _bindgen_ty_3 = 104;
pub const _SC_INT_MIN: _bindgen_ty_3 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_3 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_3 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_3 = 108;
pub const _SC_NZERO: _bindgen_ty_3 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_3 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_3 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_3 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_3 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_3 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_3 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_3 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_3 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_3 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_3 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_3 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_3 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_3 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_3 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_3 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_3 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_3 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_3 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_3 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_3 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_3 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_3 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_3 = 132;
pub const _SC_BARRIERS: _bindgen_ty_3 = 133;
pub const _SC_BASE: _bindgen_ty_3 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_3 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_3 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_3 = 137;
pub const _SC_CPUTIME: _bindgen_ty_3 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_3 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_3 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_3 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_3 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_3 = 143;
pub const _SC_FIFO: _bindgen_ty_3 = 144;
pub const _SC_PIPE: _bindgen_ty_3 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_3 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_3 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_3 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_3 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_3 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_3 = 151;
pub const _SC_NETWORKING: _bindgen_ty_3 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_3 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_3 = 154;
pub const _SC_REGEXP: _bindgen_ty_3 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_3 = 156;
pub const _SC_SHELL: _bindgen_ty_3 = 157;
pub const _SC_SIGNALS: _bindgen_ty_3 = 158;
pub const _SC_SPAWN: _bindgen_ty_3 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_3 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_3 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_3 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_3 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_3 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_3 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_3 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_3 = 167;
pub const _SC_2_PBS: _bindgen_ty_3 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_3 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_3 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_3 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_3 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_3 = 173;
pub const _SC_STREAMS: _bindgen_ty_3 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_3 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_3 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_3 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_3 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_3 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_3 = 180;
pub const _SC_TRACE: _bindgen_ty_3 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_3 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_3 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_3 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_3 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_3 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_3 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_3 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_3 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_3 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_3 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_3 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_3 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_3 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_3 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_3 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_3 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_3 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_3 = 199;
pub const _SC_IPV6: _bindgen_ty_3 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_3 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_3 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_3 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_3 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_3 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_3 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_3 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_3 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_3 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_3 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_3 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_3 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_3 = 248;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_4 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_4 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_4 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_4 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_4 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_4 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_4 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_4 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_4 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_4 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_4 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_4 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_4 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_4 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_4 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_4 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_4 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_4 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_4 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_4 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_4 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_4 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_4 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_4 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_4 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_4 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_4 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_4 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_4 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_4 = 1149;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        44usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        16usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        4usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
pub type __timezone_ptr_t = *mut timezone;
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        16usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        4usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub __pad1: ::std::os::raw::c_ushort,
    pub st_ino: __ino_t,
    pub st_mode: __mode_t,
    pub st_nlink: __nlink_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub st_rdev: __dev_t,
    pub __pad2: ::std::os::raw::c_ushort,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved4: ::std::os::raw::c_ulong,
    pub __glibc_reserved5: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        88usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved4) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved5) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved5)
        )
    );
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::std::mem::MaybeUninit<sigval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        4usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        4usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 29usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_utime) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_stime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_addr_lsb) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_fd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1__bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._syscall) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._arch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        116usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<siginfo_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        4usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).si_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sifields) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub const SI_ASYNCNL: _bindgen_ty_5 = -60;
pub const SI_TKILL: _bindgen_ty_5 = -6;
pub const SI_SIGIO: _bindgen_ty_5 = -5;
pub const SI_ASYNCIO: _bindgen_ty_5 = -4;
pub const SI_MESGQ: _bindgen_ty_5 = -3;
pub const SI_TIMER: _bindgen_ty_5 = -2;
pub const SI_QUEUE: _bindgen_ty_5 = -1;
pub const SI_USER: _bindgen_ty_5 = 0;
pub const SI_KERNEL: _bindgen_ty_5 = 128;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const ILL_ILLOPC: _bindgen_ty_6 = 1;
pub const ILL_ILLOPN: _bindgen_ty_6 = 2;
pub const ILL_ILLADR: _bindgen_ty_6 = 3;
pub const ILL_ILLTRP: _bindgen_ty_6 = 4;
pub const ILL_PRVOPC: _bindgen_ty_6 = 5;
pub const ILL_PRVREG: _bindgen_ty_6 = 6;
pub const ILL_COPROC: _bindgen_ty_6 = 7;
pub const ILL_BADSTK: _bindgen_ty_6 = 8;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const FPE_INTDIV: _bindgen_ty_7 = 1;
pub const FPE_INTOVF: _bindgen_ty_7 = 2;
pub const FPE_FLTDIV: _bindgen_ty_7 = 3;
pub const FPE_FLTOVF: _bindgen_ty_7 = 4;
pub const FPE_FLTUND: _bindgen_ty_7 = 5;
pub const FPE_FLTRES: _bindgen_ty_7 = 6;
pub const FPE_FLTINV: _bindgen_ty_7 = 7;
pub const FPE_FLTSUB: _bindgen_ty_7 = 8;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const SEGV_MAPERR: _bindgen_ty_8 = 1;
pub const SEGV_ACCERR: _bindgen_ty_8 = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const BUS_ADRALN: _bindgen_ty_9 = 1;
pub const BUS_ADRERR: _bindgen_ty_9 = 2;
pub const BUS_OBJERR: _bindgen_ty_9 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_9 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_9 = 5;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const CLD_EXITED: _bindgen_ty_10 = 1;
pub const CLD_KILLED: _bindgen_ty_10 = 2;
pub const CLD_DUMPED: _bindgen_ty_10 = 3;
pub const CLD_TRAPPED: _bindgen_ty_10 = 4;
pub const CLD_STOPPED: _bindgen_ty_10 = 5;
pub const CLD_CONTINUED: _bindgen_ty_10 = 6;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const POLL_IN: _bindgen_ty_11 = 1;
pub const POLL_OUT: _bindgen_ty_11 = 2;
pub const POLL_MSG: _bindgen_ty_11 = 3;
pub const POLL_ERR: _bindgen_ty_11 = 4;
pub const POLL_PRI: _bindgen_ty_11 = 5;
pub const POLL_HUP: _bindgen_ty_11 = 6;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 13usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._attribute) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        52usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_thread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    const UNINIT: ::std::mem::MaybeUninit<sigevent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        4usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_signo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sigev_notify) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._sigev_un) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_12 = 0;
pub const SIGEV_NONE: _bindgen_ty_12 = 1;
pub const SIGEV_THREAD: _bindgen_ty_12 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_12 = 4;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub type __sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_sigaction) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::std::mem::MaybeUninit<sigaction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        140usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        4usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sigaction_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_flags) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_restorer) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
extern "C" {
    pub static _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext {
    pub trap_no: ::std::os::raw::c_ulong,
    pub error_code: ::std::os::raw::c_ulong,
    pub oldmask: ::std::os::raw::c_ulong,
    pub arm_r0: ::std::os::raw::c_ulong,
    pub arm_r1: ::std::os::raw::c_ulong,
    pub arm_r2: ::std::os::raw::c_ulong,
    pub arm_r3: ::std::os::raw::c_ulong,
    pub arm_r4: ::std::os::raw::c_ulong,
    pub arm_r5: ::std::os::raw::c_ulong,
    pub arm_r6: ::std::os::raw::c_ulong,
    pub arm_r7: ::std::os::raw::c_ulong,
    pub arm_r8: ::std::os::raw::c_ulong,
    pub arm_r9: ::std::os::raw::c_ulong,
    pub arm_r10: ::std::os::raw::c_ulong,
    pub arm_fp: ::std::os::raw::c_ulong,
    pub arm_ip: ::std::os::raw::c_ulong,
    pub arm_sp: ::std::os::raw::c_ulong,
    pub arm_lr: ::std::os::raw::c_ulong,
    pub arm_pc: ::std::os::raw::c_ulong,
    pub arm_cpsr: ::std::os::raw::c_ulong,
    pub fault_address: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sigcontext() {
    const UNINIT: ::std::mem::MaybeUninit<sigcontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        84usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        4usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trap_no) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(trap_no)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_code) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(error_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldmask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r4) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r5) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r6) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r7) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r8) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r9) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_r10) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_r10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_fp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_fp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_ip) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_sp) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_lr) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_lr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_pc) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_pc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arm_cpsr) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(arm_cpsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fault_address) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fault_address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        8usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        4usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_onstack) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
pub const SS_ONSTACK: _bindgen_ty_13 = 1;
pub const SS_DISABLE: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: usize,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    const UNINIT: ::std::mem::MaybeUninit<sigaltstack> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sigaltstack>(),
        12usize,
        concat!("Size of: ", stringify!(sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaltstack>(),
        4usize,
        concat!("Alignment of ", stringify!(sigaltstack))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type stack_t = sigaltstack;
pub type greg_t = ::std::os::raw::c_int;
pub type gregset_t = [greg_t; 18usize];
pub const REG_R0: _bindgen_ty_14 = 0;
pub const REG_R1: _bindgen_ty_14 = 1;
pub const REG_R2: _bindgen_ty_14 = 2;
pub const REG_R3: _bindgen_ty_14 = 3;
pub const REG_R4: _bindgen_ty_14 = 4;
pub const REG_R5: _bindgen_ty_14 = 5;
pub const REG_R6: _bindgen_ty_14 = 6;
pub const REG_R7: _bindgen_ty_14 = 7;
pub const REG_R8: _bindgen_ty_14 = 8;
pub const REG_R9: _bindgen_ty_14 = 9;
pub const REG_R10: _bindgen_ty_14 = 10;
pub const REG_R11: _bindgen_ty_14 = 11;
pub const REG_R12: _bindgen_ty_14 = 12;
pub const REG_R13: _bindgen_ty_14 = 13;
pub const REG_R14: _bindgen_ty_14 = 14;
pub const REG_R15: _bindgen_ty_14 = 15;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub fpregs: [_libc_fpstate__bindgen_ty_1; 8usize],
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub ftype: [::std::os::raw::c_uchar; 8usize],
    pub init_flag: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
}
#[test]
fn bindgen_test_layout__libc_fpstate__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(_libc_fpstate__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_fpstate__bindgen_ty_1))
    );
}
impl _libc_fpstate__bindgen_ty_1 {
    #[inline]
    pub fn sign1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn sign2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exponent(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 14u8) as u32) }
    }
    #[inline]
    pub fn set_exponent(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn j(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_j(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mantissa1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_mantissa1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn mantissa0(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_mantissa0(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sign1: ::std::os::raw::c_uint,
        unused: ::std::os::raw::c_uint,
        sign2: ::std::os::raw::c_uint,
        exponent: ::std::os::raw::c_uint,
        j: ::std::os::raw::c_uint,
        mantissa1: ::std::os::raw::c_uint,
        mantissa0: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sign1: u32 = unsafe { ::std::mem::transmute(sign1) };
            sign1 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 15u8, {
            let unused: u32 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let sign2: u32 = unsafe { ::std::mem::transmute(sign2) };
            sign2 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 14u8, {
            let exponent: u32 = unsafe { ::std::mem::transmute(exponent) };
            exponent as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let j: u32 = unsafe { ::std::mem::transmute(j) };
            j as u64
        });
        __bindgen_bitfield_unit.set(32usize, 31u8, {
            let mantissa1: u32 = unsafe { ::std::mem::transmute(mantissa1) };
            mantissa1 as u64
        });
        __bindgen_bitfield_unit.set(64usize, 32u8, {
            let mantissa0: u32 = unsafe { ::std::mem::transmute(mantissa0) };
            mantissa0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    const UNINIT: ::std::mem::MaybeUninit<_libc_fpstate> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate>(),
        116usize,
        concat!("Size of: ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpregs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(fpregs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftype) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(ftype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_flag) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(init_flag)
        )
    );
}
impl _libc_fpstate {
    #[inline]
    pub fn fpsr(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_fpsr(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn fpcr(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_fpcr(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fpsr: ::std::os::raw::c_uint,
        fpcr: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let fpsr: u32 = unsafe { ::std::mem::transmute(fpsr) };
            fpsr as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let fpcr: u32 = unsafe { ::std::mem::transmute(fpcr) };
            fpcr as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type fpregset_t = _libc_fpstate;
pub type mcontext_t = sigcontext;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct ucontext {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub uc_regspace: [::std::os::raw::c_ulong; 128usize],
}
#[test]
fn bindgen_test_layout_ucontext() {
    const UNINIT: ::std::mem::MaybeUninit<ucontext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ucontext>(),
        744usize,
        concat!("Size of: ", stringify!(ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(ucontext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_regspace) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext),
            "::",
            stringify!(uc_regspace)
        )
    );
}
pub type ucontext_t = ucontext;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        268usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        4usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: _bindgen_ty_15 = 0;
pub const DT_FIFO: _bindgen_ty_15 = 1;
pub const DT_CHR: _bindgen_ty_15 = 2;
pub const DT_DIR: _bindgen_ty_15 = 4;
pub const DT_BLK: _bindgen_ty_15 = 6;
pub const DT_REG: _bindgen_ty_15 = 8;
pub const DT_LNK: _bindgen_ty_15 = 10;
pub const DT_SOCK: _bindgen_ty_15 = 12;
pub const DT_WHT: _bindgen_ty_15 = 14;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        16usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        4usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: __gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_group() {
    const UNINIT: ::std::mem::MaybeUninit<group> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group>(),
        16usize,
        concat!("Size of: ", stringify!(group))
    );
    assert_eq!(
        ::std::mem::align_of::<group>(),
        4usize,
        concat!("Alignment of ", stringify!(group))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_passwd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_passwd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_gid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_mem) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_mem)
        )
    );
}
pub type __ipc_pid_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_perm {
    pub __key: __key_t,
    pub uid: __uid_t,
    pub gid: __gid_t,
    pub cuid: __uid_t,
    pub cgid: __gid_t,
    pub mode: ::std::os::raw::c_ushort,
    pub __pad1: ::std::os::raw::c_ushort,
    pub __seq: ::std::os::raw::c_ushort,
    pub __pad2: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: __syscall_ulong_t,
    pub __glibc_reserved2: __syscall_ulong_t,
}
#[test]
fn bindgen_test_layout_ipc_perm() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_perm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_perm>(),
        36usize,
        concat!("Size of: ", stringify!(ipc_perm))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_perm>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_perm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(__key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cuid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(cuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cgid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(cgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__seq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(__seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_perm),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
}
pub type shmatt_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shmid_ds {
    pub shm_perm: ipc_perm,
    pub shm_segsz: usize,
    pub shm_atime: __time_t,
    pub __glibc_reserved1: ::std::os::raw::c_ulong,
    pub shm_dtime: __time_t,
    pub __glibc_reserved2: ::std::os::raw::c_ulong,
    pub shm_ctime: __time_t,
    pub __glibc_reserved3: ::std::os::raw::c_ulong,
    pub shm_cpid: __pid_t,
    pub shm_lpid: __pid_t,
    pub shm_nattch: shmatt_t,
    pub __glibc_reserved4: ::std::os::raw::c_ulong,
    pub __glibc_reserved5: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_shmid_ds() {
    const UNINIT: ::std::mem::MaybeUninit<shmid_ds> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<shmid_ds>(),
        84usize,
        concat!("Size of: ", stringify!(shmid_ds))
    );
    assert_eq!(
        ::std::mem::align_of::<shmid_ds>(),
        4usize,
        concat!("Alignment of ", stringify!(shmid_ds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_perm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(shm_perm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_segsz) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(shm_segsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_atime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(shm_atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_dtime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(shm_dtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved2) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_ctime) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(shm_ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved3) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(__glibc_reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_cpid) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(shm_cpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_lpid) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(shm_lpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_nattch) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(shm_nattch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved4) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(__glibc_reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved5) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(shmid_ds),
            "::",
            stringify!(__glibc_reserved5)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shminfo {
    pub shmmax: ::std::os::raw::c_ulong,
    pub shmmin: ::std::os::raw::c_ulong,
    pub shmmni: ::std::os::raw::c_ulong,
    pub shmseg: ::std::os::raw::c_ulong,
    pub shmall: ::std::os::raw::c_ulong,
    pub __glibc_reserved1: ::std::os::raw::c_ulong,
    pub __glibc_reserved2: ::std::os::raw::c_ulong,
    pub __glibc_reserved3: ::std::os::raw::c_ulong,
    pub __glibc_reserved4: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_shminfo() {
    const UNINIT: ::std::mem::MaybeUninit<shminfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<shminfo>(),
        36usize,
        concat!("Size of: ", stringify!(shminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<shminfo>(),
        4usize,
        concat!("Alignment of ", stringify!(shminfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmmax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(shmmax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmmin) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(shmmin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmmni) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(shmmni)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmseg) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(shmseg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmall) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(shmall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved3) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(__glibc_reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(shminfo),
            "::",
            stringify!(__glibc_reserved4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shm_info {
    pub used_ids: ::std::os::raw::c_int,
    pub shm_tot: ::std::os::raw::c_ulong,
    pub shm_rss: ::std::os::raw::c_ulong,
    pub shm_swp: ::std::os::raw::c_ulong,
    pub swap_attempts: ::std::os::raw::c_ulong,
    pub swap_successes: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_shm_info() {
    const UNINIT: ::std::mem::MaybeUninit<shm_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<shm_info>(),
        24usize,
        concat!("Size of: ", stringify!(shm_info))
    );
    assert_eq!(
        ::std::mem::align_of::<shm_info>(),
        4usize,
        concat!("Alignment of ", stringify!(shm_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_ids) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_info),
            "::",
            stringify!(used_ids)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_tot) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_info),
            "::",
            stringify!(shm_tot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_rss) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_info),
            "::",
            stringify!(shm_rss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shm_swp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_info),
            "::",
            stringify!(shm_swp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swap_attempts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_info),
            "::",
            stringify!(swap_attempts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swap_successes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(shm_info),
            "::",
            stringify!(swap_successes)
        )
    );
}
pub type msgqnum_t = ::std::os::raw::c_ulong;
pub type msglen_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msqid_ds {
    pub msg_perm: ipc_perm,
    pub msg_stime: __time_t,
    pub __glibc_reserved1: ::std::os::raw::c_ulong,
    pub msg_rtime: __time_t,
    pub __glibc_reserved2: ::std::os::raw::c_ulong,
    pub msg_ctime: __time_t,
    pub __glibc_reserved3: ::std::os::raw::c_ulong,
    pub __msg_cbytes: ::std::os::raw::c_ulong,
    pub msg_qnum: msgqnum_t,
    pub msg_qbytes: msglen_t,
    pub msg_lspid: __pid_t,
    pub msg_lrpid: __pid_t,
    pub __glibc_reserved4: ::std::os::raw::c_ulong,
    pub __glibc_reserved5: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_msqid_ds() {
    const UNINIT: ::std::mem::MaybeUninit<msqid_ds> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msqid_ds>(),
        88usize,
        concat!("Size of: ", stringify!(msqid_ds))
    );
    assert_eq!(
        ::std::mem::align_of::<msqid_ds>(),
        4usize,
        concat!("Alignment of ", stringify!(msqid_ds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_perm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(msg_perm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_stime) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(msg_stime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_rtime) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(msg_rtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_ctime) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(msg_ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved3) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(__glibc_reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__msg_cbytes) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(__msg_cbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_qnum) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(msg_qnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_qbytes) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(msg_qbytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_lspid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(msg_lspid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_lrpid) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(msg_lrpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved4) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(__glibc_reserved4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved5) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(msqid_ds),
            "::",
            stringify!(__glibc_reserved5)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msginfo {
    pub msgpool: ::std::os::raw::c_int,
    pub msgmap: ::std::os::raw::c_int,
    pub msgmax: ::std::os::raw::c_int,
    pub msgmnb: ::std::os::raw::c_int,
    pub msgmni: ::std::os::raw::c_int,
    pub msgssz: ::std::os::raw::c_int,
    pub msgtql: ::std::os::raw::c_int,
    pub msgseg: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_msginfo() {
    const UNINIT: ::std::mem::MaybeUninit<msginfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msginfo>(),
        32usize,
        concat!("Size of: ", stringify!(msginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<msginfo>(),
        4usize,
        concat!("Alignment of ", stringify!(msginfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgpool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msginfo),
            "::",
            stringify!(msgpool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgmap) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(msginfo),
            "::",
            stringify!(msgmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgmax) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msginfo),
            "::",
            stringify!(msgmax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgmnb) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(msginfo),
            "::",
            stringify!(msgmnb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgmni) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msginfo),
            "::",
            stringify!(msgmni)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgssz) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(msginfo),
            "::",
            stringify!(msgssz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgtql) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msginfo),
            "::",
            stringify!(msgtql)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgseg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(msginfo),
            "::",
            stringify!(msgseg)
        )
    );
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 32usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_mode_t = ::std::os::raw::c_ushort;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_ushort;
pub type __kernel_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_uid_t = __kernel_uid_t;
pub type __kernel_old_gid_t = __kernel_gid_t;
pub type __kernel_size_t = ::std::os::raw::c_uint;
pub type __kernel_ssize_t = ::std::os::raw::c_int;
pub type __kernel_ptrdiff_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_sysinfo() {
    const UNINIT: ::std::mem::MaybeUninit<sysinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sysinfo>(),
        64usize,
        concat!("Size of: ", stringify!(sysinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sysinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sysinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uptime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(uptime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loads) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(loads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalram) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeram) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedram) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(sharedram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferram) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(bufferram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalswap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalswap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeswap) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeswap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).procs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(procs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalhigh) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalhigh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freehigh) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freehigh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_unit) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(mem_unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._f) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(_f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type z_size_t = usize;
pub type Byte = ::std::os::raw::c_uchar;
pub type uInt = ::std::os::raw::c_uint;
pub type uLong = ::std::os::raw::c_ulong;
pub type Bytef = Byte;
pub type charf = ::std::os::raw::c_char;
pub type intf = ::std::os::raw::c_int;
pub type uIntf = uInt;
pub type uLongf = uLong;
pub type voidpc = *const ::std::os::raw::c_void;
pub type voidpf = *mut ::std::os::raw::c_void;
pub type voidp = *mut ::std::os::raw::c_void;
pub type z_crc_t = ::std::os::raw::c_uint;
pub type alloc_func =
    ::std::option::Option<unsafe extern "C" fn(opaque: voidpf, items: uInt, size: uInt) -> voidpf>;
pub type free_func = ::std::option::Option<unsafe extern "C" fn(opaque: voidpf, address: voidpf)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct internal_state {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct z_stream_s {
    pub next_in: *mut Bytef,
    pub avail_in: uInt,
    pub total_in: uLong,
    pub next_out: *mut Bytef,
    pub avail_out: uInt,
    pub total_out: uLong,
    pub msg: *mut ::std::os::raw::c_char,
    pub state: *mut internal_state,
    pub zalloc: alloc_func,
    pub zfree: free_func,
    pub opaque: voidpf,
    pub data_type: ::std::os::raw::c_int,
    pub adler: uLong,
    pub reserved: uLong,
}
#[test]
fn bindgen_test_layout_z_stream_s() {
    const UNINIT: ::std::mem::MaybeUninit<z_stream_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<z_stream_s>(),
        56usize,
        concat!("Size of: ", stringify!(z_stream_s))
    );
    assert_eq!(
        ::std::mem::align_of::<z_stream_s>(),
        4usize,
        concat!("Alignment of ", stringify!(z_stream_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_in) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(next_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avail_in) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(avail_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_in) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(total_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_out) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(next_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avail_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(avail_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_out) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(total_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zalloc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(zalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zfree) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(zfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaque) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_type) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adler) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(adler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(z_stream_s),
            "::",
            stringify!(reserved)
        )
    );
}
pub type z_stream = z_stream_s;
pub type z_streamp = *mut z_stream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gz_header_s {
    pub text: ::std::os::raw::c_int,
    pub time: uLong,
    pub xflags: ::std::os::raw::c_int,
    pub os: ::std::os::raw::c_int,
    pub extra: *mut Bytef,
    pub extra_len: uInt,
    pub extra_max: uInt,
    pub name: *mut Bytef,
    pub name_max: uInt,
    pub comment: *mut Bytef,
    pub comm_max: uInt,
    pub hcrc: ::std::os::raw::c_int,
    pub done: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_gz_header_s() {
    const UNINIT: ::std::mem::MaybeUninit<gz_header_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gz_header_s>(),
        52usize,
        concat!("Size of: ", stringify!(gz_header_s))
    );
    assert_eq!(
        ::std::mem::align_of::<gz_header_s>(),
        4usize,
        concat!("Alignment of ", stringify!(gz_header_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(xflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).os) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(os)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_len) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(extra_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra_max) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(extra_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name_max) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(name_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comment) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(comment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comm_max) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(comm_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hcrc) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(hcrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).done) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gz_header_s),
            "::",
            stringify!(done)
        )
    );
}
pub type gz_header = gz_header_s;
pub type gz_headerp = *mut gz_header;
pub type in_func = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint,
>;
pub type out_func = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
pub type gzFile = *mut gzFile_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gzFile_s {
    pub have: ::std::os::raw::c_uint,
    pub next: *mut ::std::os::raw::c_uchar,
    pub pos: off_t,
}
#[test]
fn bindgen_test_layout_gzFile_s() {
    const UNINIT: ::std::mem::MaybeUninit<gzFile_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gzFile_s>(),
        12usize,
        concat!("Size of: ", stringify!(gzFile_s))
    );
    assert_eq!(
        ::std::mem::align_of::<gzFile_s>(),
        4usize,
        concat!("Alignment of ", stringify!(gzFile_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).have) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gzFile_s),
            "::",
            stringify!(have)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gzFile_s),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gzFile_s),
            "::",
            stringify!(pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    const UNINIT: ::std::mem::MaybeUninit<sched_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(__sched_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sched_param {
    pub __sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sched_param() {
    const UNINIT: ::std::mem::MaybeUninit<__sched_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(__sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<__sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(__sched_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sched_param),
            "::",
            stringify!(__sched_priority)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 32usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<cpu_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        4usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
pub type __jmp_buf = [::std::os::raw::c_int; 64usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_16 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_16 = 1;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_17 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_17 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_17 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_17 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_17 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_17 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_17 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_17 = 0;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_18 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_18 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_18 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_18 = 1;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_19 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_19 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_19 = 2;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_20 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_20 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_20 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_20 = 0;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_21 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_21 = 1;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_22 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_22 = 1;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_23 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_23 = 1;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_cleanup_buffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        16usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        4usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__canceltype) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_24 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_24 = 1;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_25 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_25 = 1;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_unwind_buf_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        264usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_unwind_buf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        280usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cleanup_frame> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        4usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    const UNINIT: ::std::mem::MaybeUninit<winsize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_row) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_row)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_col) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_col)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_xpixel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_xpixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ws_ypixel) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_ypixel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_termio() {
    const UNINIT: ::std::mem::MaybeUninit<termio> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<termio>(),
        18usize,
        concat!("Size of: ", stringify!(termio))
    );
    assert_eq!(
        ::std::mem::align_of::<termio>(),
        2usize,
        concat!("Alignment of ", stringify!(termio))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_iflag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_oflag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cflag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_lflag) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_line) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_cc) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_event {
    pub time: timeval,
    pub type_: __u16,
    pub code: __u16,
    pub value: __s32,
}
#[test]
fn bindgen_test_layout_input_event() {
    const UNINIT: ::std::mem::MaybeUninit<input_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<input_event>(),
        16usize,
        concat!("Size of: ", stringify!(input_event))
    );
    assert_eq!(
        ::std::mem::align_of::<input_event>(),
        4usize,
        concat!("Alignment of ", stringify!(input_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_event),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(input_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(input_event),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(input_event),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_id {
    pub bustype: __u16,
    pub vendor: __u16,
    pub product: __u16,
    pub version: __u16,
}
#[test]
fn bindgen_test_layout_input_id() {
    const UNINIT: ::std::mem::MaybeUninit<input_id> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<input_id>(),
        8usize,
        concat!("Size of: ", stringify!(input_id))
    );
    assert_eq!(
        ::std::mem::align_of::<input_id>(),
        2usize,
        concat!("Alignment of ", stringify!(input_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bustype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_id),
            "::",
            stringify!(bustype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(input_id),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(input_id),
            "::",
            stringify!(product)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(input_id),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_absinfo {
    pub value: __s32,
    pub minimum: __s32,
    pub maximum: __s32,
    pub fuzz: __s32,
    pub flat: __s32,
    pub resolution: __s32,
}
#[test]
fn bindgen_test_layout_input_absinfo() {
    const UNINIT: ::std::mem::MaybeUninit<input_absinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<input_absinfo>(),
        24usize,
        concat!("Size of: ", stringify!(input_absinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<input_absinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(input_absinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fuzz) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(fuzz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(flat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(input_absinfo),
            "::",
            stringify!(resolution)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_keymap_entry {
    pub flags: __u8,
    pub len: __u8,
    pub index: __u16,
    pub keycode: __u32,
    pub scancode: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_input_keymap_entry() {
    const UNINIT: ::std::mem::MaybeUninit<input_keymap_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<input_keymap_entry>(),
        40usize,
        concat!("Size of: ", stringify!(input_keymap_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<input_keymap_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(input_keymap_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keycode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(keycode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scancode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(input_keymap_entry),
            "::",
            stringify!(scancode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_replay {
    pub length: __u16,
    pub delay: __u16,
}
#[test]
fn bindgen_test_layout_ff_replay() {
    const UNINIT: ::std::mem::MaybeUninit<ff_replay> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_replay>(),
        4usize,
        concat!("Size of: ", stringify!(ff_replay))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_replay>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_replay))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_replay),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_replay),
            "::",
            stringify!(delay)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_trigger {
    pub button: __u16,
    pub interval: __u16,
}
#[test]
fn bindgen_test_layout_ff_trigger() {
    const UNINIT: ::std::mem::MaybeUninit<ff_trigger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_trigger>(),
        4usize,
        concat!("Size of: ", stringify!(ff_trigger))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_trigger>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_trigger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_trigger),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_trigger),
            "::",
            stringify!(interval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_envelope {
    pub attack_length: __u16,
    pub attack_level: __u16,
    pub fade_length: __u16,
    pub fade_level: __u16,
}
#[test]
fn bindgen_test_layout_ff_envelope() {
    const UNINIT: ::std::mem::MaybeUninit<ff_envelope> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_envelope>(),
        8usize,
        concat!("Size of: ", stringify!(ff_envelope))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_envelope>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_envelope))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_envelope),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_envelope),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_envelope),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_envelope),
            "::",
            stringify!(fade_level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_constant_effect {
    pub level: __s16,
    pub envelope: ff_envelope,
}
#[test]
fn bindgen_test_layout_ff_constant_effect() {
    const UNINIT: ::std::mem::MaybeUninit<ff_constant_effect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_constant_effect>(),
        10usize,
        concat!("Size of: ", stringify!(ff_constant_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_constant_effect>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_constant_effect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_constant_effect),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).envelope) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_constant_effect),
            "::",
            stringify!(envelope)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_ramp_effect {
    pub start_level: __s16,
    pub end_level: __s16,
    pub envelope: ff_envelope,
}
#[test]
fn bindgen_test_layout_ff_ramp_effect() {
    const UNINIT: ::std::mem::MaybeUninit<ff_ramp_effect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_ramp_effect>(),
        12usize,
        concat!("Size of: ", stringify!(ff_ramp_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_ramp_effect>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_ramp_effect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_ramp_effect),
            "::",
            stringify!(start_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_level) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_ramp_effect),
            "::",
            stringify!(end_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).envelope) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_ramp_effect),
            "::",
            stringify!(envelope)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_condition_effect {
    pub right_saturation: __u16,
    pub left_saturation: __u16,
    pub right_coeff: __s16,
    pub left_coeff: __s16,
    pub deadband: __u16,
    pub center: __s16,
}
#[test]
fn bindgen_test_layout_ff_condition_effect() {
    const UNINIT: ::std::mem::MaybeUninit<ff_condition_effect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_condition_effect>(),
        12usize,
        concat!("Size of: ", stringify!(ff_condition_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_condition_effect>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_condition_effect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_saturation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(right_saturation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_saturation) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(left_saturation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_coeff) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(right_coeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_coeff) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(left_coeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deadband) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(deadband)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_condition_effect),
            "::",
            stringify!(center)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_periodic_effect {
    pub waveform: __u16,
    pub period: __u16,
    pub magnitude: __s16,
    pub offset: __s16,
    pub phase: __u16,
    pub envelope: ff_envelope,
    pub custom_len: __u32,
    pub custom_data: *mut __s16,
}
#[test]
fn bindgen_test_layout_ff_periodic_effect() {
    const UNINIT: ::std::mem::MaybeUninit<ff_periodic_effect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_periodic_effect>(),
        28usize,
        concat!("Size of: ", stringify!(ff_periodic_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_periodic_effect>(),
        4usize,
        concat!("Alignment of ", stringify!(ff_periodic_effect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waveform) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(waveform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magnitude) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(magnitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).envelope) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(envelope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_len) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(custom_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_periodic_effect),
            "::",
            stringify!(custom_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ff_rumble_effect {
    pub strong_magnitude: __u16,
    pub weak_magnitude: __u16,
}
#[test]
fn bindgen_test_layout_ff_rumble_effect() {
    const UNINIT: ::std::mem::MaybeUninit<ff_rumble_effect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_rumble_effect>(),
        4usize,
        concat!("Size of: ", stringify!(ff_rumble_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_rumble_effect>(),
        2usize,
        concat!("Alignment of ", stringify!(ff_rumble_effect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strong_magnitude) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_rumble_effect),
            "::",
            stringify!(strong_magnitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weak_magnitude) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_rumble_effect),
            "::",
            stringify!(weak_magnitude)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ff_effect {
    pub type_: __u16,
    pub id: __s16,
    pub direction: __u16,
    pub trigger: ff_trigger,
    pub replay: ff_replay,
    pub u: ff_effect__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ff_effect__bindgen_ty_1 {
    pub constant: ff_constant_effect,
    pub ramp: ff_ramp_effect,
    pub periodic: ff_periodic_effect,
    pub condition: [ff_condition_effect; 2usize],
    pub rumble: ff_rumble_effect,
}
#[test]
fn bindgen_test_layout_ff_effect__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ff_effect__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_effect__bindgen_ty_1>(),
        28usize,
        concat!("Size of: ", stringify!(ff_effect__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_effect__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ff_effect__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ramp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(ramp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(periodic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rumble) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect__bindgen_ty_1),
            "::",
            stringify!(rumble)
        )
    );
}
#[test]
fn bindgen_test_layout_ff_effect() {
    const UNINIT: ::std::mem::MaybeUninit<ff_effect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ff_effect>(),
        44usize,
        concat!("Size of: ", stringify!(ff_effect))
    );
    assert_eq!(
        ::std::mem::align_of::<ff_effect>(),
        4usize,
        concat!("Alignment of ", stringify!(ff_effect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trigger) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(trigger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replay) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(replay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ff_effect),
            "::",
            stringify!(u)
        )
    );
}
pub const platform_id_t_PLATFORM_WRONG: platform_id_t = 0;
pub const platform_id_t_PLATFORM_MX6SL: platform_id_t = 5;
pub const platform_id_t_PLATFORM_A13: platform_id_t = 14;
pub const platform_id_t_PLATFORM_B288: platform_id_t = 16;
pub const platform_id_t_PLATFORM_B300: platform_id_t = 17;
pub type platform_id_t = ::std::os::raw::c_uint;
pub const device_id_t_DEVICE_WRONG: device_id_t = 0;
pub const device_id_t_DEVICE_631: device_id_t = 5;
pub const device_id_t_DEVICE_641: device_id_t = 17;
pub const device_id_t_DEVICE_627: device_id_t = 18;
pub const device_id_t_DEVICE_614: device_id_t = 19;
pub const device_id_t_DEVICE_615: device_id_t = 20;
pub const device_id_t_DEVICE_740: device_id_t = 21;
pub const device_id_t_DEVICE_616: device_id_t = 22;
pub const device_id_t_DEVICE_632: device_id_t = 23;
pub const device_id_t_DEVICE_626: device_id_t = 24;
pub const device_id_t_DEVICE_840: device_id_t = 25;
pub const device_id_t_DEVICE_840_2: device_id_t = 26;
pub const device_id_t_DEVICE_740_2: device_id_t = 27;
pub const device_id_t_DEVICE_1040: device_id_t = 28;
pub const device_id_t_DEVICE_606: device_id_t = 29;
pub const device_id_t_DEVICE_633: device_id_t = 30;
pub const device_id_t_DEVICE_628: device_id_t = 31;
pub const device_id_t_DEVICE_741: device_id_t = 32;
pub const device_id_t_DEVICE_617: device_id_t = 33;
pub const device_id_t_DEVICE_970: device_id_t = 34;
pub const device_id_t_DEVICE_700: device_id_t = 35;
pub const device_id_t_DEVICE_743c: device_id_t = 36;
pub const device_id_t_DEVICE_743g: device_id_t = 37;
pub const device_id_t_DEVICE_802: device_id_t = 38;
pub const device_id_t_DEVICE_618: device_id_t = 39;
pub const device_id_t_DEVICE_634: device_id_t = 40;
pub const device_id_t_DEVICE_629: device_id_t = 41;
pub type device_id_t = ::std::os::raw::c_uint;
pub const display_id_t_DISPLAY_6INCH: display_id_t = 0;
pub const display_id_t_DISPLAY_5INCH: display_id_t = 1;
pub const display_id_t_DISPLAY_8INCH: display_id_t = 2;
pub const display_id_t_DISPLAY_9INCH: display_id_t = 3;
pub const display_id_t_DISPLAY_6INCH_758: display_id_t = 4;
pub const display_id_t_DISPLAY_8TRITON: display_id_t = 5;
pub const display_id_t_DISPLAY_8INCH_1200: display_id_t = 6;
pub const display_id_t_DISPLAY_4INCH_480_800: display_id_t = 8;
pub const display_id_t_DISPLAY_6INCH_1072_1448: display_id_t = 9;
pub const display_id_t_DISPLAY_7INCH_1872_1404: display_id_t = 10;
pub const display_id_t_DISPLAY_10INCH_1872_1404: display_id_t = 11;
pub const display_id_t_DISPLAY_9INCH_1200_825: display_id_t = 12;
pub const display_id_t_DISPLAY_7INCH_1264_1680: display_id_t = 13;
pub const display_id_t_DISPLAY_8INCH_1920_1440: display_id_t = 14;
pub type display_id_t = ::std::os::raw::c_uint;
pub const epdc_id_t_EPDC_NONE: epdc_id_t = 0;
pub const epdc_id_t_EPDC_IMX: epdc_id_t = 3;
pub const epdc_id_t_EPDC_ALLWINNER_A13: epdc_id_t = 5;
pub const epdc_id_t_EPDC_ALLWINNER_B288: epdc_id_t = 6;
pub const epdc_id_t_EPDC_ALLWINNER_B300: epdc_id_t = 7;
pub const epdc_id_t_EPDC_T1000: epdc_id_t = 8;
pub type epdc_id_t = ::std::os::raw::c_uint;
pub const colormask_t_COLORMASK_NONE: colormask_t = 0;
pub const colormask_t_COLORMASK_CFA: colormask_t = 1;
pub const colormask_t_COLORMASK_CFA2: colormask_t = 2;
pub const colormask_t_COLORMASK_ACEP: colormask_t = 3;
pub type colormask_t = ::std::os::raw::c_uint;
pub const native_orientation_t_NATIVE_LANDSCAPE: native_orientation_t = 0;
pub const native_orientation_t_NATIVE_PORTRAIT: native_orientation_t = 1;
pub type native_orientation_t = ::std::os::raw::c_uint;
pub const keyboard_id_t_KEYBOARD_NTX600: keyboard_id_t = 0;
pub const keyboard_id_t_KEYBOARD_POCKET360: keyboard_id_t = 1;
pub const keyboard_id_t_KEYBOARD_COOKIE: keyboard_id_t = 2;
pub const keyboard_id_t_KEYBOARD_DIGITEKA: keyboard_id_t = 3;
pub const keyboard_id_t_KEYBOARD_EP1234: keyboard_id_t = 4;
pub const keyboard_id_t_KEYBOARD_EP7: keyboard_id_t = 5;
pub const keyboard_id_t_KEYBOARD_POCKET650: keyboard_id_t = 6;
pub const keyboard_id_t_KEYBOARD_POCKET840: keyboard_id_t = 7;
pub const keyboard_id_t_KEYBOARD_POCKET630: keyboard_id_t = 8;
pub const keyboard_id_t_KEYBOARD_POCKET420: keyboard_id_t = 9;
pub const keyboard_id_t_KEYBOARD_POCKET620: keyboard_id_t = 10;
pub const keyboard_id_t_KEYBOARD_POCKET641: keyboard_id_t = 11;
pub const keyboard_id_t_KEYBOARD_POCKET627: keyboard_id_t = 12;
pub const keyboard_id_t_KEYBOARD_POCKET611: keyboard_id_t = 14;
pub const keyboard_id_t_KEYBOARD_POCKET613: keyboard_id_t = 15;
pub const keyboard_id_t_KEYBOARD_POCKET515: keyboard_id_t = 16;
pub const keyboard_id_t_KEYBOARD_POCKET624: keyboard_id_t = 17;
pub const keyboard_id_t_KEYBOARD_POCKET631: keyboard_id_t = 18;
pub const keyboard_id_t_KEYBOARD_POCKET740: keyboard_id_t = 19;
pub const keyboard_id_t_KEYBOARD_POCKET616: keyboard_id_t = 20;
pub const keyboard_id_t_KEYBOARD_POCKET632: keyboard_id_t = 21;
pub const keyboard_id_t_KEYBOARD_POCKET1040: keyboard_id_t = 22;
pub const keyboard_id_t_KEYBOARD_POCKET970: keyboard_id_t = 23;
pub const keyboard_id_t_KEYBOARD_POCKET617: keyboard_id_t = 24;
pub const keyboard_id_t_KEYBOARD_POCKET700: keyboard_id_t = 25;
pub const keyboard_id_t_KEYBOARD_POCKET743: keyboard_id_t = 26;
pub const keyboard_id_t_KEYBOARD_POCKET618: keyboard_id_t = 27;
pub const keyboard_id_t_KEYBOARD_POCKET634: keyboard_id_t = 28;
pub const keyboard_id_t_KEYBOARD_POCKET629: keyboard_id_t = 29;
pub type keyboard_id_t = ::std::os::raw::c_uint;
pub const touchpanel_id_t_TOUCHPANEL_NONE: touchpanel_id_t = 0;
pub const touchpanel_id_t_TOUCHPANEL_IR_zFORCE: touchpanel_id_t = 4;
pub const touchpanel_id_t_TOUCHPANEL_ELAN_eKTF2227: touchpanel_id_t = 8;
pub const touchpanel_id_t_TOUCHPANEL_FT5X_840: touchpanel_id_t = 9;
pub const touchpanel_id_t_TOUCHPANEL_ELAN_eKTF2232: touchpanel_id_t = 16;
pub const touchpanel_id_t_TOUCHPANEL_TT21XXX: touchpanel_id_t = 17;
pub const touchpanel_id_t_TOUCHPANEL_FT5X: touchpanel_id_t = 18;
pub const touchpanel_id_t_TOUCHPANEL_CYTTSP4: touchpanel_id_t = 19;
pub const touchpanel_id_t_TOUCHPANEL_TMA448: touchpanel_id_t = 20;
pub const touchpanel_id_t_TOUCHPANEL_TT41701: touchpanel_id_t = 21;
pub const touchpanel_id_t_TOUCHPANEL_ELAN_eKTF2232ALW: touchpanel_id_t = 22;
pub const touchpanel_id_t_TOUCHPANEL_FT6336U: touchpanel_id_t = 23;
pub const touchpanel_id_t_TOUCHPANEL_FT5726: touchpanel_id_t = 24;
pub const touchpanel_id_t_TOUCHPANEL_FT5426: touchpanel_id_t = 25;
pub const touchpanel_id_t_TOUCHPANEL_eKTH3908F: touchpanel_id_t = 26;
pub const touchpanel_id_t_TOUCHPANEL_FT5436: touchpanel_id_t = 27;
pub const touchpanel_id_t_TOUCHPANEL_FT5536: touchpanel_id_t = 28;
pub type touchpanel_id_t = ::std::os::raw::c_uint;
pub const slider_id_t_SLIDER_NONE: slider_id_t = 0;
pub const slider_id_t_SLIDER_HWEVT: slider_id_t = 1;
pub type slider_id_t = ::std::os::raw::c_uint;
pub const gyroscop_id_t_GYROSCOPE_NONE: gyroscop_id_t = 0;
pub const gyroscop_id_t_GYROSCOPE_HWEVT: gyroscop_id_t = 10;
pub type gyroscop_id_t = ::std::os::raw::c_uint;
pub const audio_e_AUDIO_NONE: audio_e = 0;
pub const audio_e_AUDIO_OSS: audio_e = 1;
pub const audio_e_AUDIO_ALSA_NO_HP_DETECTION: audio_e = 3;
pub const audio_e_AUDIO_ALSA: audio_e = 4;
pub const audio_e_AUDIO_ALOOP: audio_e = 5;
pub const audio_e_AUDIO_ALOOP_WITH_SPEAKER: audio_e = 6;
pub type audio_e = ::std::os::raw::c_uint;
pub use self::audio_e as audio_id_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hp_detect_cfg_s {
    pub path: *const ::std::os::raw::c_char,
    pub attach_phrase: *const ::std::os::raw::c_char,
    pub inverted: bool,
}
#[test]
fn bindgen_test_layout_hp_detect_cfg_s() {
    const UNINIT: ::std::mem::MaybeUninit<hp_detect_cfg_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hp_detect_cfg_s>(),
        12usize,
        concat!("Size of: ", stringify!(hp_detect_cfg_s))
    );
    assert_eq!(
        ::std::mem::align_of::<hp_detect_cfg_s>(),
        4usize,
        concat!("Alignment of ", stringify!(hp_detect_cfg_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hp_detect_cfg_s),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_phrase) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hp_detect_cfg_s),
            "::",
            stringify!(attach_phrase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inverted) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hp_detect_cfg_s),
            "::",
            stringify!(inverted)
        )
    );
}
pub type hp_detect_cfg_t = hp_detect_cfg_s;
pub const usb_id_t_USB_NONE: usb_id_t = 0;
pub const usb_id_t_USB_INTERNAL: usb_id_t = 3;
pub type usb_id_t = ::std::os::raw::c_uint;
pub const frontlight_id_t_FRONTLIGHT_NONE: frontlight_id_t = 0;
pub const frontlight_id_t_FRONTLIGHT_PWM: frontlight_id_t = 1;
pub const frontlight_id_t_FRONTLIGHT_DUAL: frontlight_id_t = 2;
pub const frontlight_id_t_FRONTLIGHT_SINGLE: frontlight_id_t = 3;
pub const frontlight_id_t_FRONTLIGHT_DUAL_HW_DIMMING: frontlight_id_t = 4;
pub const frontlight_id_t_FRONTLIGHT_SINGLE_HW_DIMMING: frontlight_id_t = 5;
pub type frontlight_id_t = ::std::os::raw::c_uint;
pub const lightsensor_id_t_LIGHTSENSOR_NONE: lightsensor_id_t = 0;
pub type lightsensor_id_t = ::std::os::raw::c_uint;
pub const bluetooth_id_t_BLUETOOTH_NONE: bluetooth_id_t = 0;
pub const bluetooth_id_t_BLUETOOTH_RTL8761: bluetooth_id_t = 6;
pub const bluetooth_id_t_BLUETOOTH_AW869A: bluetooth_id_t = 7;
pub type bluetooth_id_t = ::std::os::raw::c_uint;
pub const wifi_id_t_WIFI_NONE: wifi_id_t = 0;
pub const wifi_id_t_WIFI_RTL8188EU: wifi_id_t = 8;
pub const wifi_id_t_WIFI_RTL8189FS: wifi_id_t = 11;
pub const wifi_id_t_WIFI_XRADIO: wifi_id_t = 12;
pub const wifi_id_t_WIFI_AW869A: wifi_id_t = 13;
pub type wifi_id_t = ::std::os::raw::c_uint;
pub const gsm_id_t_GSM_NONE: gsm_id_t = 0;
pub type gsm_id_t = ::std::os::raw::c_uint;
pub const waveform_type_t_WAVEFORM_INIT: waveform_type_t = 0;
pub const waveform_type_t_WAVEFORM_DU: waveform_type_t = 1;
pub const waveform_type_t_WAVEFORM_GC16: waveform_type_t = 2;
pub const waveform_type_t_WAVEFORM_GC4: waveform_type_t = 3;
pub const waveform_type_t_WAVEFORM_A2: waveform_type_t = 4;
pub const waveform_type_t_WAVEFORM_GL16: waveform_type_t = 5;
pub const waveform_type_t_WAVEFORM_A2IN: waveform_type_t = 6;
pub const waveform_type_t_WAVEFORM_A2OUT: waveform_type_t = 7;
pub const waveform_type_t_WAVEFORM_DU4: waveform_type_t = 8;
pub const waveform_type_t_WAVEFORM_GCC16: waveform_type_t = 9;
pub type waveform_type_t = ::std::os::raw::c_uint;
pub const conv_flags_t_CONVERT_SATURATE: conv_flags_t = 1;
pub const conv_flags_t_CONVERT_DITHER: conv_flags_t = 256;
pub const conv_flags_t_CONVERT_PURE: conv_flags_t = 512;
pub const conv_flags_t_CONVERT_INVERSION: conv_flags_t = 1024;
pub type conv_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epdc_img_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub scanline: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub orientation: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_epdc_img_t() {
    const UNINIT: ::std::mem::MaybeUninit<epdc_img_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<epdc_img_t>(),
        24usize,
        concat!("Size of: ", stringify!(epdc_img_t))
    );
    assert_eq!(
        ::std::mem::align_of::<epdc_img_t>(),
        4usize,
        concat!("Alignment of ", stringify!(epdc_img_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_img_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_img_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_img_t),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_img_t),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_img_t),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_img_t),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epdc_instance_t {
    pub version: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub alignment: ::std::os::raw::c_int,
    pub fd: ::std::os::raw::c_int,
    pub framebuffer: *mut u8,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub scanline: ::std::os::raw::c_int,
    pub orientation: ::std::os::raw::c_int,
    pub memsize: u32,
    pub rotate: ::std::option::Option<unsafe extern "C" fn(value: ::std::os::raw::c_int)>,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            wf: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub busy: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub getwftimes: ::std::option::Option<unsafe extern "C" fn(result: *mut u16)>,
    pub sync: ::std::option::Option<unsafe extern "C" fn()>,
    pub lock: ::std::option::Option<unsafe extern "C" fn()>,
    pub unlock: ::std::option::Option<unsafe extern "C" fn()>,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            img: *mut epdc_img_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub convert: ::std::option::Option<
        unsafe extern "C" fn(
            src: *mut epdc_img_t,
            srcx: ::std::os::raw::c_int,
            srcy: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            dest: *mut epdc_img_t,
            dstx: ::std::os::raw::c_int,
            dsty: ::std::os::raw::c_int,
            flags: u32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_epdc_instance_t() {
    const UNINIT: ::std::mem::MaybeUninit<epdc_instance_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<epdc_instance_t>(),
        76usize,
        concat!("Size of: ", stringify!(epdc_instance_t))
    );
    assert_eq!(
        ::std::mem::align_of::<epdc_instance_t>(),
        4usize,
        concat!("Alignment of ", stringify!(epdc_instance_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framebuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(framebuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memsize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(memsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(rotate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).busy) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(busy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getwftimes) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(getwftimes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlock) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(unlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).convert) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(epdc_instance_t),
            "::",
            stringify!(convert)
        )
    );
}
pub const hwkey_t_HWKEY_BACK: hwkey_t = 1;
pub const hwkey_t_HWKEY_DELETE: hwkey_t = 2;
pub const hwkey_t_HWKEY_LEFT: hwkey_t = 4;
pub const hwkey_t_HWKEY_MENU: hwkey_t = 8;
pub const hwkey_t_HWKEY_MUSIC: hwkey_t = 16;
pub const hwkey_t_HWKEY_OK: hwkey_t = 32;
pub const hwkey_t_HWKEY_RIGHT: hwkey_t = 64;
pub const hwkey_t_HWKEY_PLUS: hwkey_t = 128;
pub const hwkey_t_HWKEY_MINUS: hwkey_t = 256;
pub const hwkey_t_HWKEY_DOWN: hwkey_t = 512;
pub const hwkey_t_HWKEY_UP: hwkey_t = 1024;
pub const hwkey_t_HWKEY_PREV: hwkey_t = 2048;
pub const hwkey_t_HWKEY_NEXT: hwkey_t = 4096;
pub const hwkey_t_HWKEY_NEXT2: hwkey_t = 8192;
pub const hwkey_t_HWKEY_POWER: hwkey_t = 16384;
pub const hwkey_t_HWKEY_PREV2: hwkey_t = 32768;
pub const hwkey_t_HWKEY_HOME: hwkey_t = 65536;
pub const hwkey_t_HWKEY_RESERVED1: hwkey_t = 131072;
pub const hwkey_t_HWKEY_RESERVED2: hwkey_t = 262144;
pub const hwkey_t_HWKEY_RESERVED3: hwkey_t = 524288;
pub const hwkey_t_HWKEY_RESERVED4: hwkey_t = 1048576;
pub const hwkey_t_HWKEY_ZOOMIN: hwkey_t = 2097152;
pub const hwkey_t_HWKEY_ZOOMOUT: hwkey_t = 4194304;
pub const hwkey_t_HWKEY_POWEROFF: hwkey_t = 8388608;
pub const hwkey_t_HWKEY_COVEROPEN: hwkey_t = 16777216;
pub const hwkey_t_HWKEY_COVERCLOSE: hwkey_t = 33554432;
pub type hwkey_t = ::std::os::raw::c_uint;
pub const input_dev_e_DEV_UNKNOWN: input_dev_e = 0;
pub const input_dev_e_TP_CAPACITIVE: input_dev_e = 1;
pub const input_dev_e_TP_DIGITIZER: input_dev_e = 2;
pub const input_dev_e_MAX_INPUT_TOUCH_DEV: input_dev_e = 3;
pub const input_dev_e_INPUT_DEV_KEYBOARD_HW: input_dev_e = 4;
pub const input_dev_e_INPUT_DEV_KEYBOARD_BT: input_dev_e = 5;
pub const input_dev_e_INPUT_DEV_KEYBOARD_USB: input_dev_e = 6;
pub type input_dev_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct slider_cfg_s {
    pub resolution: ::std::os::raw::c_int,
    pub reverse_axis: bool,
    pub relative: bool,
}
#[test]
fn bindgen_test_layout_slider_cfg_s() {
    const UNINIT: ::std::mem::MaybeUninit<slider_cfg_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<slider_cfg_s>(),
        8usize,
        concat!("Size of: ", stringify!(slider_cfg_s))
    );
    assert_eq!(
        ::std::mem::align_of::<slider_cfg_s>(),
        4usize,
        concat!("Alignment of ", stringify!(slider_cfg_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(slider_cfg_s),
            "::",
            stringify!(resolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reverse_axis) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(slider_cfg_s),
            "::",
            stringify!(reverse_axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(slider_cfg_s),
            "::",
            stringify!(relative)
        )
    );
}
pub type slider_cfg_t = slider_cfg_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct frontlight_ctrl_s {
    pub vesion: ::std::os::raw::c_int,
    pub set_brightness: ::std::option::Option<
        unsafe extern "C" fn(value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub get_brightness: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub get_max_brightness: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub set_color: ::std::option::Option<
        unsafe extern "C" fn(value: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub get_color: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub get_max_color: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_frontlight_ctrl_s() {
    const UNINIT: ::std::mem::MaybeUninit<frontlight_ctrl_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<frontlight_ctrl_s>(),
        32usize,
        concat!("Size of: ", stringify!(frontlight_ctrl_s))
    );
    assert_eq!(
        ::std::mem::align_of::<frontlight_ctrl_s>(),
        4usize,
        concat!("Alignment of ", stringify!(frontlight_ctrl_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vesion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(frontlight_ctrl_s),
            "::",
            stringify!(vesion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_brightness) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(frontlight_ctrl_s),
            "::",
            stringify!(set_brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_brightness) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(frontlight_ctrl_s),
            "::",
            stringify!(get_brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_max_brightness) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(frontlight_ctrl_s),
            "::",
            stringify!(get_max_brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_color) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(frontlight_ctrl_s),
            "::",
            stringify!(set_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_color) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(frontlight_ctrl_s),
            "::",
            stringify!(get_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_max_color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(frontlight_ctrl_s),
            "::",
            stringify!(get_max_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(frontlight_ctrl_s),
            "::",
            stringify!(data)
        )
    );
}
pub type frontlight_ctrl = frontlight_ctrl_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct power_led_cfg_t {
    pub switch_path: *const ::std::os::raw::c_char,
    pub trigger_path: *const ::std::os::raw::c_char,
    pub charging_trigger: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_power_led_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<power_led_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<power_led_cfg_t>(),
        12usize,
        concat!("Size of: ", stringify!(power_led_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<power_led_cfg_t>(),
        4usize,
        concat!("Alignment of ", stringify!(power_led_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).switch_path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(power_led_cfg_t),
            "::",
            stringify!(switch_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trigger_path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(power_led_cfg_t),
            "::",
            stringify!(trigger_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charging_trigger) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(power_led_cfg_t),
            "::",
            stringify!(charging_trigger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct storage_device {
    pub path: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub bus: *const ::std::os::raw::c_char,
    pub size: u64,
    pub wearout: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_storage_device() {
    const UNINIT: ::std::mem::MaybeUninit<storage_device> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<storage_device>(),
        32usize,
        concat!("Size of: ", stringify!(storage_device))
    );
    assert_eq!(
        ::std::mem::align_of::<storage_device>(),
        8usize,
        concat!("Alignment of ", stringify!(storage_device))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_device),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_device),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_device),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_device),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wearout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_device),
            "::",
            stringify!(wearout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct storage_partition {
    pub path: *const ::std::os::raw::c_char,
    pub offset: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_storage_partition() {
    const UNINIT: ::std::mem::MaybeUninit<storage_partition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<storage_partition>(),
        24usize,
        concat!("Size of: ", stringify!(storage_partition))
    );
    assert_eq!(
        ::std::mem::align_of::<storage_partition>(),
        8usize,
        concat!("Alignment of ", stringify!(storage_partition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_partition),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_partition),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_partition),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct storage_cfg_t {
    pub internal: storage_device,
    pub external: storage_device,
    pub usb: storage_device,
    pub partition: storage_cfg_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct storage_cfg_t__bindgen_ty_1 {
    pub uboot: storage_partition,
    pub uboot_backup: storage_partition,
    pub logo: storage_partition,
    pub logo_backup: storage_partition,
    pub kernel: storage_partition,
    pub root: storage_partition,
    pub cramfs: storage_partition,
    pub ebrmain: storage_partition,
    pub secure: storage_partition,
    pub user: storage_partition,
}
#[test]
fn bindgen_test_layout_storage_cfg_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<storage_cfg_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<storage_cfg_t__bindgen_ty_1>(),
        240usize,
        concat!("Size of: ", stringify!(storage_cfg_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<storage_cfg_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(storage_cfg_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uboot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(uboot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uboot_backup) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(uboot_backup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(logo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logo_backup) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(logo_backup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernel) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(kernel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cramfs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(cramfs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ebrmain) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(ebrmain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secure) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(secure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t__bindgen_ty_1),
            "::",
            stringify!(user)
        )
    );
}
#[test]
fn bindgen_test_layout_storage_cfg_t() {
    const UNINIT: ::std::mem::MaybeUninit<storage_cfg_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<storage_cfg_t>(),
        336usize,
        concat!("Size of: ", stringify!(storage_cfg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<storage_cfg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(storage_cfg_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t),
            "::",
            stringify!(external)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usb) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t),
            "::",
            stringify!(usb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).partition) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(storage_cfg_t),
            "::",
            stringify!(partition)
        )
    );
}
extern "C" {
    pub static mut OBREEY_BSCONFIG_PARAMETR: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut OBREEY_STORE_BSCONFIG_PARAM: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut OBREEY_SOCIAL_COOKIES_PATH: *const ::std::os::raw::c_char;
}
pub const globalaction_on_event_e_GLOBALACTION_ON_KEYPRESS: globalaction_on_event_e = 0;
pub const globalaction_on_event_e_GLOBALACTION_ON_KEYHOLD: globalaction_on_event_e = 1;
pub const globalaction_on_event_e_GLOBALACTION_ON_DOUBLECLICK: globalaction_on_event_e = 2;
pub type globalaction_on_event_e = ::std::os::raw::c_uint;
pub const AvrcpCommands_AVRCP_NEXT: AvrcpCommands = 0;
pub const AvrcpCommands_AVRCP_PREVIOUS: AvrcpCommands = 1;
pub const AvrcpCommands_AVRCP_PAUSE: AvrcpCommands = 2;
pub const AvrcpCommands_AVRCP_PLAY_PAUSE: AvrcpCommands = 3;
pub const AvrcpCommands_AVRCP_STOP: AvrcpCommands = 4;
pub const AvrcpCommands_AVRCP_PLAY: AvrcpCommands = 5;
pub const AvrcpCommands_AVRCP_SET_VOLUME: AvrcpCommands = 6;
pub type AvrcpCommands = ::std::os::raw::c_uint;
pub const PackageType_PT_UNKNOWN: PackageType = 0;
pub const PackageType_PT_TTS: PackageType = 1;
pub type PackageType = ::std::os::raw::c_uint;
pub const PackageJobActions_PJA_JOBS_STARTED: PackageJobActions = 0;
pub const PackageJobActions_PJA_PACKAGE_DOWNLOAD_STARTED: PackageJobActions = 1;
pub const PackageJobActions_PJA_PACKAGE_DOWNLOAD_FINISHED: PackageJobActions = 2;
pub const PackageJobActions_PJA_PACKAGE_INSTALL_STARTED: PackageJobActions = 3;
pub const PackageJobActions_PJA_PACKAGE_INSTALL_FINISHED: PackageJobActions = 4;
pub const PackageJobActions_PJA_PACKAGE_UNINSTALL_STARTED: PackageJobActions = 5;
pub const PackageJobActions_PJA_PACKAGE_UNINSTALL_FINISHED: PackageJobActions = 6;
pub const PackageJobActions_PJA_JOBS_FINISHED: PackageJobActions = 7;
pub const PackageJobActions_PJA_JOBS_ABORTED: PackageJobActions = 8;
pub type PackageJobActions = ::std::os::raw::c_uint;
pub const keymap_e_KEYMAP_GLOBAL: keymap_e = 0;
pub const keymap_e_KEYMAP_TXT: keymap_e = 1;
pub const keymap_e_KEYMAP_PDF: keymap_e = 2;
pub type keymap_e = ::std::os::raw::c_uint;
pub use self::keymap_e as keymap_t;
pub const PB_STATE_e_MP_STOPPED: PB_STATE_e = 0;
pub const PB_STATE_e_MP_REQUEST_FOR_PLAY: PB_STATE_e = 1;
pub const PB_STATE_e_MP_PLAYING: PB_STATE_e = 2;
pub const PB_STATE_e_MP_PAUSED: PB_STATE_e = 3;
pub const PB_STATE_e_MP_PREVTRACK: PB_STATE_e = 4;
pub const PB_STATE_e_MP_NEXTTRACK: PB_STATE_e = 5;
pub const PB_STATE_e_MP_TRACK_FINISHED: PB_STATE_e = 6;
pub const PB_STATE_e_MP_LOAD_FILE_AND_PAUSE: PB_STATE_e = 7;
pub type PB_STATE_e = ::std::os::raw::c_uint;
pub use self::PB_STATE_e as PB_STATE;
pub const PB_TTS_STATE_e_TTS_STOPPED: PB_TTS_STATE_e = 0;
pub const PB_TTS_STATE_e_TTS_PLAYING: PB_TTS_STATE_e = 1;
pub const PB_TTS_STATE_e_TTS_PAUSED: PB_TTS_STATE_e = 2;
pub type PB_TTS_STATE_e = ::std::os::raw::c_uint;
pub use self::PB_TTS_STATE_e as PB_TTS_STATE;
pub const WIFI_SECURITY_NO: WIFI_SECURITY = 0;
pub const WIFI_SECURITY_WEP: WIFI_SECURITY = 1;
pub const WIFI_SECURITY_WPAEAP: WIFI_SECURITY = 2;
pub const WIFI_SECURITY_WPAPSK: WIFI_SECURITY = 3;
pub type WIFI_SECURITY = ::std::os::raw::c_uint;
pub const NET_STATE_NET_STATE_UNKNOWN: NET_STATE = -1;
pub const NET_STATE_DISCONNECTED: NET_STATE = 0;
pub const NET_STATE_CONNECTING: NET_STATE = 1;
pub const NET_STATE_CONNECTED: NET_STATE = 2;
pub type NET_STATE = ::std::os::raw::c_int;
pub const FONT_TYPE_FONT_STD: FONT_TYPE = 0;
pub const FONT_TYPE_FONT_BOLD: FONT_TYPE = 1;
pub const FONT_TYPE_FONT_ITALIC: FONT_TYPE = 2;
pub const FONT_TYPE_FONT_BOLDITALIC: FONT_TYPE = 3;
pub const FONT_TYPE_FONT_MONO: FONT_TYPE = 4;
pub const FONT_TYPE_FONT_FAMILY: FONT_TYPE = 5;
pub type FONT_TYPE = ::std::os::raw::c_uint;
pub const SideFlags_SFLAGS_NONE: SideFlags = 0;
pub const SideFlags_SFLAGS_LEFT: SideFlags = 1;
pub const SideFlags_SFLAGS_RIGHT: SideFlags = 2;
pub const SideFlags_SFLAGS_RIGHT_LEFT: SideFlags = 3;
pub const SideFlags_SFLAGS_UP: SideFlags = 4;
pub const SideFlags_SFLAGS_UP_LEFT: SideFlags = 5;
pub const SideFlags_SFLAGS_UP_RIGHT: SideFlags = 6;
pub const SideFlags_SFLAGS_UP_RIGHT_LEFT: SideFlags = 7;
pub const SideFlags_SFLAGS_DOWN: SideFlags = 8;
pub const SideFlags_SFLAGS_DOWN_LEFT: SideFlags = 9;
pub const SideFlags_SFLAGS_DOWN_RIGHT: SideFlags = 10;
pub const SideFlags_SFLAGS_DOWN_RIGHT_LEFT: SideFlags = 11;
pub const SideFlags_SFLAGS_DOWN_UP: SideFlags = 12;
pub const SideFlags_SFLAGS_DOWN_UP_LEFT: SideFlags = 13;
pub const SideFlags_SFLAGS_DOWN_UP_RIGHT: SideFlags = 14;
pub const SideFlags_SFLAGS_ALL: SideFlags = 15;
pub type SideFlags = ::std::os::raw::c_uint;
pub type iv_handler_descriptor = usize;
#[doc = "< PANEL is completely off"]
pub const PANEL_FLAGS_PANEL_DISABLED: PANEL_FLAGS = 0;
#[doc = "< PANEL is on, if any other flag is set panel is treated as active"]
pub const PANEL_FLAGS_PANEL_ENABLED: PANEL_FLAGS = 2;
#[doc = "< PANEL is on and could be drawn but it does not handle pointer events,\n it is good to use in pair with SetManualPanelUpdates(int enable, iv_panelupdateshandler handler)\n @see SetManualPanelUpdates(int enable, iv_panelupdateshandler handler)"]
pub const PANEL_FLAGS_PANEL_EVENT_NO_HANDLING: PANEL_FLAGS = 4;
pub const PANEL_FLAGS_PANEL_NO_FB_OFFSET: PANEL_FLAGS = 8;
pub const PANEL_FLAGS_PANEL_NO_SELF_UPDATE: PANEL_FLAGS = 16;
#[doc = " Enum wich can be used for SetPanelType function\n @see SetPanelType(int)"]
pub type PANEL_FLAGS = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_vector2i_s {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iv_vector2i_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_vector2i_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_vector2i_s>(),
        8usize,
        concat!("Size of: ", stringify!(iv_vector2i_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_vector2i_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_vector2i_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_vector2i_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_vector2i_s),
            "::",
            stringify!(y)
        )
    );
}
pub type iv_vector2i = iv_vector2i_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_vector2f_s {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_iv_vector2f_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_vector2f_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_vector2f_s>(),
        8usize,
        concat!("Size of: ", stringify!(iv_vector2f_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_vector2f_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_vector2f_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_vector2f_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_vector2f_s),
            "::",
            stringify!(y)
        )
    );
}
pub type iv_vector2f = iv_vector2f_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_vector2d_s {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_iv_vector2d_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_vector2d_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_vector2d_s>(),
        16usize,
        concat!("Size of: ", stringify!(iv_vector2d_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_vector2d_s>(),
        8usize,
        concat!("Alignment of ", stringify!(iv_vector2d_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_vector2d_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_vector2d_s),
            "::",
            stringify!(y)
        )
    );
}
pub type iv_vector2d = iv_vector2d_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_matrix2i_s {
    pub a00: ::std::os::raw::c_int,
    pub a01: ::std::os::raw::c_int,
    pub a10: ::std::os::raw::c_int,
    pub a11: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iv_matrix2i_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_matrix2i_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_matrix2i_s>(),
        16usize,
        concat!("Size of: ", stringify!(iv_matrix2i_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_matrix2i_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_matrix2i_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a00) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2i_s),
            "::",
            stringify!(a00)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a01) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2i_s),
            "::",
            stringify!(a01)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a10) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2i_s),
            "::",
            stringify!(a10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a11) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2i_s),
            "::",
            stringify!(a11)
        )
    );
}
pub type iv_matrix2i = iv_matrix2i_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_matrix2f_s {
    pub a00: f32,
    pub a01: f32,
    pub a10: f32,
    pub a11: f32,
}
#[test]
fn bindgen_test_layout_iv_matrix2f_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_matrix2f_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_matrix2f_s>(),
        16usize,
        concat!("Size of: ", stringify!(iv_matrix2f_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_matrix2f_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_matrix2f_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a00) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2f_s),
            "::",
            stringify!(a00)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a01) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2f_s),
            "::",
            stringify!(a01)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a10) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2f_s),
            "::",
            stringify!(a10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a11) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2f_s),
            "::",
            stringify!(a11)
        )
    );
}
pub type iv_matrix2f = iv_matrix2f_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_matrix2d_s {
    pub a00: f64,
    pub a01: f64,
    pub a10: f64,
    pub a11: f64,
}
#[test]
fn bindgen_test_layout_iv_matrix2d_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_matrix2d_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_matrix2d_s>(),
        32usize,
        concat!("Size of: ", stringify!(iv_matrix2d_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_matrix2d_s>(),
        8usize,
        concat!("Alignment of ", stringify!(iv_matrix2d_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a00) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2d_s),
            "::",
            stringify!(a00)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a01) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2d_s),
            "::",
            stringify!(a01)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a10) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2d_s),
            "::",
            stringify!(a10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_matrix2d_s),
            "::",
            stringify!(a11)
        )
    );
}
pub type iv_matrix2d = iv_matrix2d_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_complex2f_s {
    pub r: f32,
    pub i: f32,
}
#[test]
fn bindgen_test_layout_iv_complex2f_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_complex2f_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_complex2f_s>(),
        8usize,
        concat!("Size of: ", stringify!(iv_complex2f_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_complex2f_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_complex2f_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_complex2f_s),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_complex2f_s),
            "::",
            stringify!(i)
        )
    );
}
pub type iv_complex2f = iv_complex2f_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_complex2d_s {
    pub r: f64,
    pub i: f64,
}
#[test]
fn bindgen_test_layout_iv_complex2d_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_complex2d_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_complex2d_s>(),
        16usize,
        concat!("Size of: ", stringify!(iv_complex2d_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_complex2d_s>(),
        8usize,
        concat!("Alignment of ", stringify!(iv_complex2d_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_complex2d_s),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_complex2d_s),
            "::",
            stringify!(i)
        )
    );
}
pub type iv_complex2d = iv_complex2d_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct irect_s {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_irect_s() {
    const UNINIT: ::std::mem::MaybeUninit<irect_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<irect_s>(),
        20usize,
        concat!("Size of: ", stringify!(irect_s))
    );
    assert_eq!(
        ::std::mem::align_of::<irect_s>(),
        4usize,
        concat!("Alignment of ", stringify!(irect_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(irect_s),
            "::",
            stringify!(flags)
        )
    );
}
pub type irect = irect_s;
pub type iv_rect = irect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_update_area_s {
    pub rect: irect,
    pub prev_rect: irect,
    pub need_update: bool,
    pub need_update_ptr: *mut bool,
}
#[test]
fn bindgen_test_layout_iv_update_area_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_update_area_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_update_area_s>(),
        48usize,
        concat!("Size of: ", stringify!(iv_update_area_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_update_area_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_update_area_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_update_area_s),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev_rect) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_update_area_s),
            "::",
            stringify!(prev_rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).need_update) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_update_area_s),
            "::",
            stringify!(need_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).need_update_ptr) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_update_area_s),
            "::",
            stringify!(need_update_ptr)
        )
    );
}
pub type iv_update_area = iv_update_area_s;
#[repr(C)]
#[derive(Debug)]
pub struct ibitmap_s {
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
    pub depth: ::std::os::raw::c_ushort,
    pub scanline: ::std::os::raw::c_ushort,
    pub data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_ibitmap_s() {
    const UNINIT: ::std::mem::MaybeUninit<ibitmap_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibitmap_s>(),
        8usize,
        concat!("Size of: ", stringify!(ibitmap_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ibitmap_s>(),
        2usize,
        concat!("Alignment of ", stringify!(ibitmap_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibitmap_s),
            "::",
            stringify!(data)
        )
    );
}
pub type ibitmap = ibitmap_s;
pub type iv_bitmap = ibitmap;
#[doc = " Struct wich can be used for function OpenControlPanel\n currently is a stub,\n @see OpenControlPanel(control_panel*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct control_panel_s {
    #[doc = "< is a SET of flags, currently not used"]
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_control_panel_s() {
    const UNINIT: ::std::mem::MaybeUninit<control_panel_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<control_panel_s>(),
        4usize,
        concat!("Size of: ", stringify!(control_panel_s))
    );
    assert_eq!(
        ::std::mem::align_of::<control_panel_s>(),
        4usize,
        concat!("Alignment of ", stringify!(control_panel_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(control_panel_s),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " Struct wich can be used for function OpenControlPanel\n currently is a stub,\n @see OpenControlPanel(control_panel*)"]
pub type control_panel = control_panel_s;
pub type iv_voidfunc = ::std::option::Option<unsafe extern "C" fn()>;
pub type iv_handler = ::std::option::Option<
    unsafe extern "C" fn(
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_ctx_handler = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_timerproc = ::std::option::Option<unsafe extern "C" fn()>;
pub type iv_timerprocEx =
    ::std::option::Option<unsafe extern "C" fn(context: *mut ::std::os::raw::c_void)>;
pub type iv_menuhandler = ::std::option::Option<unsafe extern "C" fn(index: ::std::os::raw::c_int)>;
pub type iv_keyboardhandler =
    ::std::option::Option<unsafe extern "C" fn(text: *mut ::std::os::raw::c_char)>;
pub type iv_keyboardhandlerex = ::std::option::Option<
    unsafe extern "C" fn(text: *mut ::std::os::raw::c_char, data: *mut ::std::os::raw::c_void),
>;
pub type iv_dialoghandler =
    ::std::option::Option<unsafe extern "C" fn(button: ::std::os::raw::c_int)>;
pub type iv_timeedithandler =
    ::std::option::Option<unsafe extern "C" fn(newtime: ::std::os::raw::c_long)>;
pub type iv_fontselecthandler = ::std::option::Option<
    unsafe extern "C" fn(
        fontr: *mut ::std::os::raw::c_char,
        fontb: *mut ::std::os::raw::c_char,
        fonti: *mut ::std::os::raw::c_char,
        fontbi: *mut ::std::os::raw::c_char,
    ),
>;
pub type iv_dirselecthandler =
    ::std::option::Option<unsafe extern "C" fn(path: *mut ::std::os::raw::c_char)>;
pub type iv_confighandler = ::std::option::Option<unsafe extern "C" fn()>;
pub type iv_itemchangehandler =
    ::std::option::Option<unsafe extern "C" fn(name: *mut ::std::os::raw::c_char)>;
pub type iv_pageselecthandler =
    ::std::option::Option<unsafe extern "C" fn(page: ::std::os::raw::c_int)>;
pub type iv_bmkhandler = ::std::option::Option<
    unsafe extern "C" fn(
        action: ::std::os::raw::c_int,
        page: ::std::os::raw::c_int,
        position: ::std::os::raw::c_longlong,
    ),
>;
pub type iv_tochandler =
    ::std::option::Option<unsafe extern "C" fn(position: ::std::os::raw::c_longlong)>;
pub type iv_itempaint = ::std::option::Option<
    unsafe extern "C" fn(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
        selected: ::std::os::raw::c_int,
    ),
>;
pub type iv_listhandler = ::std::option::Option<
    unsafe extern "C" fn(
        action: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        state: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_rotatehandler =
    ::std::option::Option<unsafe extern "C" fn(direction: ::std::os::raw::c_int)>;
pub type iv_turnproc = ::std::option::Option<
    unsafe extern "C" fn(direction: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
>;
pub type iv_recurser = ::std::option::Option<
    unsafe extern "C" fn(
        path: *mut ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_msghandler = ::std::option::Option<
    unsafe extern "C" fn(
        task: ::std::os::raw::c_int,
        message: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_requestlistener = ::std::option::Option<
    unsafe extern "C" fn(
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_requestlistener_ex = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_hashenumproc = ::std::option::Option<
    unsafe extern "C" fn(
        name: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_void,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_hashcmpproc = ::std::option::Option<
    unsafe extern "C" fn(
        name1: *mut ::std::os::raw::c_char,
        value1: *mut ::std::os::raw::c_void,
        name2: *mut ::std::os::raw::c_char,
        value2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type iv_hashaddproc = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
>;
pub type iv_hashdelproc =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
pub type iv_panelupdateshandler = ::std::option::Option<
    unsafe extern "C" fn(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ),
>;
pub type iv_eventsnotifierfunc = iv_voidfunc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TransparentDefinition {
    pub m_TRANSPARENT_MATRIX: [::std::os::raw::c_char; 256usize],
    pub m_isInitTransparentMatrix: ::std::os::raw::c_int,
    pub m_PercentOfTransparent: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TransparentDefinition() {
    const UNINIT: ::std::mem::MaybeUninit<TransparentDefinition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TransparentDefinition>(),
        264usize,
        concat!("Size of: ", stringify!(TransparentDefinition))
    );
    assert_eq!(
        ::std::mem::align_of::<TransparentDefinition>(),
        4usize,
        concat!("Alignment of ", stringify!(TransparentDefinition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_TRANSPARENT_MATRIX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TransparentDefinition),
            "::",
            stringify!(m_TRANSPARENT_MATRIX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_isInitTransparentMatrix) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(TransparentDefinition),
            "::",
            stringify!(m_isInitTransparentMatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m_PercentOfTransparent) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(TransparentDefinition),
            "::",
            stringify!(m_PercentOfTransparent)
        )
    );
}
pub type TransparentHandle = TransparentDefinition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ihash_item_s {
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_void,
    pub next: *mut ihash_item_s,
}
#[test]
fn bindgen_test_layout_ihash_item_s() {
    const UNINIT: ::std::mem::MaybeUninit<ihash_item_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ihash_item_s>(),
        12usize,
        concat!("Size of: ", stringify!(ihash_item_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ihash_item_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ihash_item_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_item_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_item_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_item_s),
            "::",
            stringify!(next)
        )
    );
}
pub type ihash_item = ihash_item_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ihash_s {
    pub prime: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub addproc: iv_hashaddproc,
    pub delproc: iv_hashdelproc,
    pub items: *mut *mut ihash_item_s,
}
#[test]
fn bindgen_test_layout_ihash_s() {
    const UNINIT: ::std::mem::MaybeUninit<ihash_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ihash_s>(),
        20usize,
        concat!("Size of: ", stringify!(ihash_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ihash_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ihash_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(prime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addproc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(addproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delproc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(delproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ihash_s),
            "::",
            stringify!(items)
        )
    );
}
pub type ihash = ihash_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifont_s {
    pub name: *mut ::std::os::raw::c_char,
    pub family: *mut ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_int,
    pub aa: ::std::os::raw::c_uchar,
    pub isbold: ::std::os::raw::c_uchar,
    pub isitalic: ::std::os::raw::c_uchar,
    pub _r1: ::std::os::raw::c_uchar,
    pub charset: ::std::os::raw::c_ushort,
    pub _r2: ::std::os::raw::c_ushort,
    pub color: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub linespacing: ::std::os::raw::c_int,
    pub baseline: ::std::os::raw::c_int,
    pub fdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ifont_s() {
    const UNINIT: ::std::mem::MaybeUninit<ifont_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifont_s>(),
        40usize,
        concat!("Size of: ", stringify!(ifont_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ifont_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ifont_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).family) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aa) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(aa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isbold) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(isbold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isitalic) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(isitalic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r1) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(_r1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).charset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(charset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r2) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(_r2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linespacing) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(linespacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(baseline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fdata) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_s),
            "::",
            stringify!(fdata)
        )
    );
}
pub type ifont = ifont_s;
pub const FONT_MENU_FLAGS_FM_SHOW_SIZE: FONT_MENU_FLAGS = 1;
pub type FONT_MENU_FLAGS = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iuser_font_s {
    pub show_font_name: *mut ::std::os::raw::c_char,
    pub real_font_name: *mut ::std::os::raw::c_char,
    pub font: *mut ifont,
}
#[test]
fn bindgen_test_layout_iuser_font_s() {
    const UNINIT: ::std::mem::MaybeUninit<iuser_font_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iuser_font_s>(),
        12usize,
        concat!("Size of: ", stringify!(iuser_font_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iuser_font_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iuser_font_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_font_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iuser_font_s),
            "::",
            stringify!(show_font_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real_font_name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iuser_font_s),
            "::",
            stringify!(real_font_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iuser_font_s),
            "::",
            stringify!(font)
        )
    );
}
pub type iuser_font = iuser_font_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifont_list_s {
    pub list: *mut iuser_font,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ifont_list_s() {
    const UNINIT: ::std::mem::MaybeUninit<ifont_list_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifont_list_s>(),
        8usize,
        concat!("Size of: ", stringify!(ifont_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ifont_list_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ifont_list_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_list_s),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_list_s),
            "::",
            stringify!(count)
        )
    );
}
pub type ifont_list = ifont_list_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifont_menu_s {
    pub menu_title: *mut ::std::os::raw::c_char,
    pub current_font: *mut ::std::os::raw::c_char,
    pub flags: FONT_MENU_FLAGS,
    pub hproc: iv_fontselecthandler,
    pub user_fonts: *mut ifont_list,
}
#[test]
fn bindgen_test_layout_ifont_menu_s() {
    const UNINIT: ::std::mem::MaybeUninit<ifont_menu_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifont_menu_s>(),
        20usize,
        concat!("Size of: ", stringify!(ifont_menu_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ifont_menu_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ifont_menu_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menu_title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(menu_title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_font) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(current_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hproc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(hproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_fonts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_menu_s),
            "::",
            stringify!(user_fonts)
        )
    );
}
pub type ifont_menu = ifont_menu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imenu_s {
    pub type_: ::std::os::raw::c_short,
    pub index: ::std::os::raw::c_short,
    pub text: *mut ::std::os::raw::c_char,
    pub submenu: *mut imenu_s,
}
#[test]
fn bindgen_test_layout_imenu_s() {
    const UNINIT: ::std::mem::MaybeUninit<imenu_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imenu_s>(),
        12usize,
        concat!("Size of: ", stringify!(imenu_s))
    );
    assert_eq!(
        ::std::mem::align_of::<imenu_s>(),
        4usize,
        concat!("Alignment of ", stringify!(imenu_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imenu_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(imenu_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(imenu_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submenu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imenu_s),
            "::",
            stringify!(submenu)
        )
    );
}
pub type imenu = imenu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imenuex_s {
    pub type_: ::std::os::raw::c_short,
    pub index: ::std::os::raw::c_short,
    pub text: *mut ::std::os::raw::c_char,
    pub submenu: *mut imenuex_s,
    pub icon: *mut ibitmap,
    pub reserved: *mut ::std::os::raw::c_void,
    pub font: *const ifont,
}
#[test]
fn bindgen_test_layout_imenuex_s() {
    const UNINIT: ::std::mem::MaybeUninit<imenuex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imenuex_s>(),
        24usize,
        concat!("Size of: ", stringify!(imenuex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<imenuex_s>(),
        4usize,
        concat!("Alignment of ", stringify!(imenuex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submenu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(submenu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(imenuex_s),
            "::",
            stringify!(font)
        )
    );
}
pub type imenuex = imenuex_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icanvas_s {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    #[doc = " @brief scanline number of bytes in one line"]
    pub scanline: ::std::os::raw::c_int,
    #[doc = " @brief depth is number of bits ber pixel (to get bytes do `depth >> 3`)"]
    pub depth: ::std::os::raw::c_int,
    pub clipx1: ::std::os::raw::c_int,
    pub clipx2: ::std::os::raw::c_int,
    pub clipy1: ::std::os::raw::c_int,
    pub clipy2: ::std::os::raw::c_int,
    pub addr: *mut u8,
}
#[test]
fn bindgen_test_layout_icanvas_s() {
    const UNINIT: ::std::mem::MaybeUninit<icanvas_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icanvas_s>(),
        36usize,
        concat!("Size of: ", stringify!(icanvas_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icanvas_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icanvas_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipx1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(clipx1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipx2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(clipx2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipy1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(clipy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipy2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(clipy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(icanvas_s),
            "::",
            stringify!(addr)
        )
    );
}
pub type icanvas = icanvas_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_bitmap_ref_s {
    pub width: usize,
    pub height: usize,
    #[doc = " @brief scanline number of bytes in one line"]
    pub scanline: usize,
    #[doc = " @brief depth is number of bits ber pixel (to get bytes do `depth >> 3`)"]
    pub depth: u8,
    pub data: *mut u8,
}
#[test]
fn bindgen_test_layout_iv_bitmap_ref_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_bitmap_ref_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_bitmap_ref_s>(),
        20usize,
        concat!("Size of: ", stringify!(iv_bitmap_ref_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_bitmap_ref_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_bitmap_ref_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_bitmap_ref_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_bitmap_ref_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_bitmap_ref_s),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_bitmap_ref_s),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_bitmap_ref_s),
            "::",
            stringify!(data)
        )
    );
}
pub type iv_bitmap_ref = iv_bitmap_ref_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icontext_menu_properties_s {
    pub font_normal: *mut ifont,
    pub font_selected: *mut ifont,
    pub font_disabled: *mut ifont,
    pub background_color_normal: ::std::os::raw::c_int,
    pub background_color_disabled: ::std::os::raw::c_int,
    pub blackout: ::std::os::raw::c_int,
    pub item_height: ::std::os::raw::c_int,
    pub item_border_indent_horizontal: ::std::os::raw::c_int,
    pub separator_indent_horizontal: ::std::os::raw::c_int,
    pub separator_indent_vertical: ::std::os::raw::c_int,
    pub separator_height: ::std::os::raw::c_int,
    pub separator_style: ::std::os::raw::c_int,
    pub separator_color: ::std::os::raw::c_int,
    pub separator_frequency: ::std::os::raw::c_int,
    pub marker_height: ::std::os::raw::c_int,
    pub marker_indent_horizontal: ::std::os::raw::c_int,
    pub marker_style: ::std::os::raw::c_int,
    pub marker_color: ::std::os::raw::c_int,
    pub border_size: ::std::os::raw::c_int,
    pub border_color: ::std::os::raw::c_int,
    pub border_radius: ::std::os::raw::c_int,
    pub title_height: ::std::os::raw::c_int,
    pub enable_pointer: ::std::os::raw::c_int,
    pub font_normal_color: ::std::os::raw::c_int,
    pub font_selected_color: ::std::os::raw::c_int,
    pub font_disabled_color: ::std::os::raw::c_int,
    pub bullet_show: ::std::os::raw::c_int,
    #[doc = " @brief bullet_style - style of bullet element.\n Values:\n 0 - default\n 1 - draw bitmap at all elements\n By default it has been set to zero and it mean that we draw a bullet as a symbol only at one element."]
    pub bullet_style: ::std::os::raw::c_int,
    pub item_border_indent_vertical: ::std::os::raw::c_int,
    pub background_style: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_icontext_menu_properties_s() {
    const UNINIT: ::std::mem::MaybeUninit<icontext_menu_properties_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icontext_menu_properties_s>(),
        120usize,
        concat!("Size of: ", stringify!(icontext_menu_properties_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icontext_menu_properties_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icontext_menu_properties_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_normal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_selected) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_selected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_disabled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_disabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_color_normal) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(background_color_normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_color_disabled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(background_color_disabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blackout) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(blackout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item_height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(item_height)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).item_border_indent_horizontal) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(item_border_indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_indent_horizontal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_indent_vertical) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_indent_vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_style) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_color) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_frequency) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(separator_frequency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_height) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(marker_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_indent_horizontal) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(marker_indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_style) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(marker_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker_color) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(marker_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(border_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_color) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(border_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_radius) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(border_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_height) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(title_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_pointer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(enable_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_normal_color) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_normal_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_selected_color) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_selected_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font_disabled_color) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(font_disabled_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bullet_show) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(bullet_show)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bullet_style) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(bullet_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).item_border_indent_vertical) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(item_border_indent_vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_style) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_properties_s),
            "::",
            stringify!(background_style)
        )
    );
}
pub type icontext_menu_properties = icontext_menu_properties_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifont_selector_properties {
    pub custom_font_enable: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_ifont_selector_properties() {
    const UNINIT: ::std::mem::MaybeUninit<ifont_selector_properties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ifont_selector_properties>(),
        2usize,
        concat!("Size of: ", stringify!(ifont_selector_properties))
    );
    assert_eq!(
        ::std::mem::align_of::<ifont_selector_properties>(),
        2usize,
        concat!("Alignment of ", stringify!(ifont_selector_properties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_font_enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifont_selector_properties),
            "::",
            stringify!(custom_font_enable)
        )
    );
}
pub type font_selector_properties = ifont_selector_properties;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icontext_menu_s {
    pub id: *const ::std::os::raw::c_char,
    pub hproc: iv_menuhandler,
    pub menuex: *const imenuex,
    pub menu: *const imenu,
    pub pos_selected_item: irect,
    pub pos_menu: irect,
    pub properties: *mut icontext_menu_properties,
    pub active_element: ::std::os::raw::c_int,
    pub enable_pointer: ::std::os::raw::c_short,
    pub enable_aura: ::std::os::raw::c_short,
    pub use_own_font: ::std::os::raw::c_short,
    pub update_after_close: ::std::os::raw::c_short,
    pub only_choise: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_icontext_menu_s() {
    const UNINIT: ::std::mem::MaybeUninit<icontext_menu_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icontext_menu_s>(),
        76usize,
        concat!("Size of: ", stringify!(icontext_menu_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icontext_menu_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icontext_menu_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hproc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(hproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menuex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(menuex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menu) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(menu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_selected_item) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(pos_selected_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_menu) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(pos_menu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_element) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(active_element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_pointer) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(enable_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_aura) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(enable_aura)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_own_font) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(use_own_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update_after_close) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(update_after_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).only_choise) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(icontext_menu_s),
            "::",
            stringify!(only_choise)
        )
    );
}
pub type icontext_menu = icontext_menu_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iapp_caption_s {
    pub rect_portrait: irect,
    pub rect_landscape: irect,
    pub font: *mut ifont,
    pub title_height: ::std::os::raw::c_int,
    pub background_color: ::std::os::raw::c_int,
    pub is_active: ::std::os::raw::c_short,
    pub is_uppercase: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iapp_caption_s() {
    const UNINIT: ::std::mem::MaybeUninit<iapp_caption_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iapp_caption_s>(),
        56usize,
        concat!("Size of: ", stringify!(iapp_caption_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iapp_caption_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iapp_caption_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect_portrait) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(rect_portrait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect_landscape) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(rect_landscape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_height) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(title_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_color) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_active) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(is_active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_uppercase) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(iapp_caption_s),
            "::",
            stringify!(is_uppercase)
        )
    );
}
pub type iapp_caption = iapp_caption_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itaskmgr_s {
    pub title_height: ::std::os::raw::c_int,
    pub title_font: *mut ifont,
    pub task_font: *mut ifont,
    pub task_title_font: *mut ifont,
    pub style: ::std::os::raw::c_int,
    pub profile_present: ::std::os::raw::c_int,
    pub profile_height: ::std::os::raw::c_int,
    pub profile_font: *mut ifont,
    pub shortcut_height: ::std::os::raw::c_int,
    pub shortcut_width: ::std::os::raw::c_int,
    pub shortcut_font: *mut ifont,
    pub task_height: ::std::os::raw::c_int,
    pub full_height: ::std::os::raw::c_int,
    pub full_width: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub border_size: ::std::os::raw::c_int,
    pub indent_from_border: ::std::os::raw::c_int,
    pub bitmap: *mut *mut ibitmap,
    pub bitmap_count: ::std::os::raw::c_int,
    pub separator_size: ::std::os::raw::c_int,
    pub exit_button_indent: ::std::os::raw::c_int,
    pub background_style: ::std::os::raw::c_int,
    pub separator_color: ::std::os::raw::c_int,
    pub border_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_itaskmgr_s() {
    const UNINIT: ::std::mem::MaybeUninit<itaskmgr_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itaskmgr_s>(),
        108usize,
        concat!("Size of: ", stringify!(itaskmgr_s))
    );
    assert_eq!(
        ::std::mem::align_of::<itaskmgr_s>(),
        4usize,
        concat!("Alignment of ", stringify!(itaskmgr_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_height) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(title_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_font) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(title_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_font) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(task_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_title_font) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(task_title_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).style) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_present) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(profile_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_height) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(profile_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_font) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(profile_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortcut_height) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(shortcut_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortcut_width) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(shortcut_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortcut_font) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(shortcut_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_height) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(task_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(full_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).full_width) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(full_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(border_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indent_from_border) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(indent_from_border)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmap) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitmap_count) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(bitmap_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_size) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(separator_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exit_button_indent) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(exit_button_indent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_style) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(background_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_color) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(separator_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_color) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(itaskmgr_s),
            "::",
            stringify!(border_color)
        )
    );
}
pub type itaskmgr = itaskmgr_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipager_s {
    pub page_font: *mut ifont,
    pub height: ::std::os::raw::c_int,
    pub indent_horizontal: ::std::os::raw::c_int,
    pub left_width: ::std::os::raw::c_int,
    pub page_width: ::std::os::raw::c_int,
    pub rigth_width: ::std::os::raw::c_int,
    pub separator_size: ::std::os::raw::c_int,
    pub separator_color: ::std::os::raw::c_int,
    pub icon_left: *const ibitmap,
    pub icon_right: *const ibitmap,
    pub current_page: ::std::os::raw::c_int,
    pub total_pages: ::std::os::raw::c_int,
    pub position: irect,
    pub orientation: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ipager_s() {
    const UNINIT: ::std::mem::MaybeUninit<ipager_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipager_s>(),
        72usize,
        concat!("Size of: ", stringify!(ipager_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ipager_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ipager_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_font) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(page_font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indent_horizontal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_width) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(left_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(page_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rigth_width) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(rigth_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(separator_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separator_color) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(separator_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon_left) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(icon_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon_right) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(icon_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_page) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(current_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_pages) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(total_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ipager_s),
            "::",
            stringify!(orientation)
        )
    );
}
pub type ipager = ipager_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iselection_s {
    pub selection_style: ::std::os::raw::c_int,
    pub background_color: ::std::os::raw::c_int,
    pub background_style: ::std::os::raw::c_int,
    pub border_size: ::std::os::raw::c_int,
    pub border_radius: ::std::os::raw::c_int,
    pub indent_horizontal: ::std::os::raw::c_int,
    pub indent_left: ::std::os::raw::c_int,
    pub indent_right: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iselection_s() {
    const UNINIT: ::std::mem::MaybeUninit<iselection_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iselection_s>(),
        32usize,
        concat!("Size of: ", stringify!(iselection_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iselection_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iselection_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selection_style) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iselection_s),
            "::",
            stringify!(selection_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_color) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iselection_s),
            "::",
            stringify!(background_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background_style) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iselection_s),
            "::",
            stringify!(background_style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iselection_s),
            "::",
            stringify!(border_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).border_radius) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iselection_s),
            "::",
            stringify!(border_radius)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indent_horizontal) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iselection_s),
            "::",
            stringify!(indent_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indent_left) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iselection_s),
            "::",
            stringify!(indent_left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indent_right) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iselection_s),
            "::",
            stringify!(indent_right)
        )
    );
}
pub type iselection = iselection_s;
pub const AppStyles_STYLE_UNKNOWN: AppStyles = 0;
pub const AppStyles_STYLE_KEYBOARD: AppStyles = 1;
pub const AppStyles_STYLE_TOUCHPANEL: AppStyles = 2;
pub const AppStyles_STYLE_TOUCHPANEL_KEYBORAD: AppStyles = 3;
pub const AppStyles_STYLE_MAX_NOT_USED: AppStyles = 4;
pub type AppStyles = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iappstyle_s {
    pub app_style: AppStyles,
}
#[test]
fn bindgen_test_layout_iappstyle_s() {
    const UNINIT: ::std::mem::MaybeUninit<iappstyle_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iappstyle_s>(),
        4usize,
        concat!("Size of: ", stringify!(iappstyle_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iappstyle_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iappstyle_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).app_style) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iappstyle_s),
            "::",
            stringify!(app_style)
        )
    );
}
pub type iappstyle = iappstyle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ievent_s {
    pub hproc: iv_handler,
    pub type_: ::std::os::raw::c_ushort,
    pub mod_: ::std::os::raw::c_ushort,
    pub par1: ::std::os::raw::c_ushort,
    pub par2: ::std::os::raw::c_ushort,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ievent_s() {
    const UNINIT: ::std::mem::MaybeUninit<ievent_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ievent_s>(),
        16usize,
        concat!("Size of: ", stringify!(ievent_s))
    );
    assert_eq!(
        ::std::mem::align_of::<ievent_s>(),
        4usize,
        concat!("Alignment of ", stringify!(ievent_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hproc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ievent_s),
            "::",
            stringify!(hproc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ievent_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ievent_s),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ievent_s),
            "::",
            stringify!(par1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ievent_s),
            "::",
            stringify!(par2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ievent_s),
            "::",
            stringify!(data)
        )
    );
}
pub type ievent = ievent_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconfig_s {
    pub filename: *mut ::std::os::raw::c_char,
    pub hash: *mut ihash,
    pub vhash: *mut ihash,
    pub modified_hash: *mut ihash,
    pub deleted_keys: *mut *mut ::std::os::raw::c_char,
    pub changed: ::std::os::raw::c_int,
    pub deleted_keys_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iconfig_s() {
    const UNINIT: ::std::mem::MaybeUninit<iconfig_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iconfig_s>(),
        28usize,
        concat!("Size of: ", stringify!(iconfig_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iconfig_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iconfig_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vhash) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(vhash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modified_hash) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(modified_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleted_keys) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(deleted_keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).changed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(changed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleted_keys_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfig_s),
            "::",
            stringify!(deleted_keys_size)
        )
    );
}
pub type iconfig = iconfig_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iconfigedit_s {
    pub type_: ::std::os::raw::c_int,
    pub icon: *const ibitmap,
    pub text: *mut ::std::os::raw::c_char,
    pub hint: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub deflt: *mut ::std::os::raw::c_char,
    pub variants: *mut *mut ::std::os::raw::c_char,
    pub submenu: *mut iconfigedit_s,
    pub icon_theme: *mut *mut ibitmap,
}
#[test]
fn bindgen_test_layout_iconfigedit_s() {
    const UNINIT: ::std::mem::MaybeUninit<iconfigedit_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iconfigedit_s>(),
        36usize,
        concat!("Size of: ", stringify!(iconfigedit_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iconfigedit_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iconfigedit_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deflt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(deflt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variants) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(variants)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).submenu) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(submenu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon_theme) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iconfigedit_s),
            "::",
            stringify!(icon_theme)
        )
    );
}
pub type iconfigedit = iconfigedit_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oldconfigedit_s {
    pub text: *mut ::std::os::raw::c_char,
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub deflt: *mut ::std::os::raw::c_char,
    pub variants: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_oldconfigedit_s() {
    const UNINIT: ::std::mem::MaybeUninit<oldconfigedit_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<oldconfigedit_s>(),
        20usize,
        concat!("Size of: ", stringify!(oldconfigedit_s))
    );
    assert_eq!(
        ::std::mem::align_of::<oldconfigedit_s>(),
        4usize,
        concat!("Alignment of ", stringify!(oldconfigedit_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oldconfigedit_s),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(oldconfigedit_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oldconfigedit_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deflt) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(oldconfigedit_s),
            "::",
            stringify!(deflt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variants) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oldconfigedit_s),
            "::",
            stringify!(variants)
        )
    );
}
pub type oldconfigedit = oldconfigedit_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tocentry_s {
    pub level: ::std::os::raw::c_int,
    pub page: ::std::os::raw::c_int,
    pub position: ::std::os::raw::c_longlong,
    pub text: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tocentry_s() {
    const UNINIT: ::std::mem::MaybeUninit<tocentry_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tocentry_s>(),
        24usize,
        concat!("Size of: ", stringify!(tocentry_s))
    );
    assert_eq!(
        ::std::mem::align_of::<tocentry_s>(),
        8usize,
        concat!("Alignment of ", stringify!(tocentry_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tocentry_s),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tocentry_s),
            "::",
            stringify!(page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tocentry_s),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tocentry_s),
            "::",
            stringify!(text)
        )
    );
}
pub type tocentry = tocentry_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimer_s {
    pub tp: iv_timerproc,
    pub weak: ::std::os::raw::c_int,
    pub extime: ::std::os::raw::c_longlong,
    pub name: [::std::os::raw::c_char; 32usize],
    pub context: *mut ::std::os::raw::c_void,
    pub lastchecktime: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_itimer_s() {
    const UNINIT: ::std::mem::MaybeUninit<itimer_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimer_s>(),
        64usize,
        concat!("Size of: ", stringify!(itimer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<itimer_s>(),
        8usize,
        concat!("Alignment of ", stringify!(itimer_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimer_s),
            "::",
            stringify!(tp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weak) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(itimer_s),
            "::",
            stringify!(weak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(itimer_s),
            "::",
            stringify!(extime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimer_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(itimer_s),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastchecktime) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(itimer_s),
            "::",
            stringify!(lastchecktime)
        )
    );
}
pub type itimer = itimer_s;
pub const iepub3data_type_s_kEPUB3DataTypeNone: iepub3data_type_s = 0;
pub const iepub3data_type_s_kEPUB3TitleTypeMain: iepub3data_type_s = 1;
pub const iepub3data_type_s_kEPUB3TitleTypeSubtitle: iepub3data_type_s = 2;
pub const iepub3data_type_s_kEPUB3TitleTypeShort: iepub3data_type_s = 3;
pub const iepub3data_type_s_kEPUB3TitleTypeCollection: iepub3data_type_s = 4;
pub const iepub3data_type_s_kEPUB3TitleTypeEdition: iepub3data_type_s = 5;
pub const iepub3data_type_s_kEPUB3TitleTypeExpanded: iepub3data_type_s = 6;
pub const iepub3data_type_s_kEPUB3TitleTypeUnknown: iepub3data_type_s = 7;
pub const iepub3data_type_s_kEPUB3TitleTypeMAX: iepub3data_type_s = 8;
pub const iepub3data_type_s_kEPUB3AuthorType: iepub3data_type_s = 101;
pub const iepub3data_type_s_kEPUB3SeriesType: iepub3data_type_s = 201;
pub type iepub3data_type_s = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iepub3title_s {
    pub title: *mut ::std::os::raw::c_char,
    pub display_seq: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iepub3title_s() {
    const UNINIT: ::std::mem::MaybeUninit<iepub3title_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iepub3title_s>(),
        8usize,
        concat!("Size of: ", stringify!(iepub3title_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iepub3title_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iepub3title_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iepub3title_s),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display_seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iepub3title_s),
            "::",
            stringify!(display_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iepub3title_s),
            "::",
            stringify!(type_)
        )
    );
}
pub type iepub3title = iepub3title_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bookinfo_s {
    pub type_: ::std::os::raw::c_int,
    pub typedesc: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub filename: *mut ::std::os::raw::c_char,
    pub title: *mut ::std::os::raw::c_char,
    pub author: *mut ::std::os::raw::c_char,
    pub series: *mut ::std::os::raw::c_char,
    pub numinseries: ::std::os::raw::c_int,
    pub genre: [*mut ::std::os::raw::c_char; 10usize],
    pub icon: *mut ibitmap,
    pub year: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_long,
    pub ctime: time_t,
    pub isbn: *mut ::std::os::raw::c_char,
    pub meta_id: *mut ::std::os::raw::c_char,
    pub first_author: *mut ::std::os::raw::c_char,
    pub drm: ::std::os::raw::c_int,
    pub annotation: *mut ::std::os::raw::c_char,
    pub lang: *mut ::std::os::raw::c_char,
    pub publisher: *mut ::std::os::raw::c_char,
    pub identifiers: *mut ::std::os::raw::c_char,
    pub contains_notes_export: ::std::os::raw::c_int,
    pub epub3titles: *mut *mut iepub3title,
    pub title_sort: *mut ::std::os::raw::c_char,
    pub author_sort: *mut ::std::os::raw::c_char,
    pub version: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_bookinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<bookinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bookinfo_s>(),
        140usize,
        concat!("Size of: ", stringify!(bookinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bookinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bookinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typedesc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(typedesc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).author) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).series) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(series)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numinseries) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(numinseries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genre) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(genre)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isbn) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(isbn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meta_id) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(meta_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_author) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(first_author)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drm) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(drm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotation) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(annotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lang) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).publisher) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(publisher)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifiers) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(identifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contains_notes_export) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(contains_notes_export)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epub3titles) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(epub3titles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title_sort) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(title_sort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).author_sort) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(author_sort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(bookinfo_s),
            "::",
            stringify!(version)
        )
    );
}
pub type bookinfo = bookinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_filetype_s {
    pub extension: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub program: *mut ::std::os::raw::c_char,
    pub icon: *mut ibitmap,
}
#[test]
fn bindgen_test_layout_iv_filetype_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_filetype_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_filetype_s>(),
        20usize,
        concat!("Size of: ", stringify!(iv_filetype_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_filetype_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_filetype_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extension) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(extension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).program) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(program)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_filetype_s),
            "::",
            stringify!(icon)
        )
    );
}
pub type iv_filetype = iv_filetype_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_template_s {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub background: *mut ibitmap,
    pub bg_folder: *mut ibitmap,
    pub bg_folder_a: *mut ibitmap,
    pub bg_file: *mut ibitmap,
    pub bg_file_a: *mut ibitmap,
    pub iconpos: irect,
    pub mediaiconpos: irect,
    pub line1pos: irect,
    pub line2pos: irect,
    pub line3pos: irect,
    pub line1font: *mut ifont,
    pub line2font: *mut ifont,
    pub line3font: *mut ifont,
}
#[test]
fn bindgen_test_layout_iv_template_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_template_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_template_s>(),
        140usize,
        concat!("Size of: ", stringify!(iv_template_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_template_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_template_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_folder) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(bg_folder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_folder_a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(bg_folder_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_file) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(bg_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bg_file_a) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(bg_file_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iconpos) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(iconpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mediaiconpos) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(mediaiconpos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line1pos) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(line1pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line2pos) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(line2pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line3pos) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(line3pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line1font) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(line1font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line2font) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(line2font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line3font) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_template_s),
            "::",
            stringify!(line3font)
        )
    );
}
pub type iv_template = iv_template_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_wlist_s {
    pub word: *mut ::std::os::raw::c_char,
    pub x1: ::std::os::raw::c_short,
    pub y1: ::std::os::raw::c_short,
    pub x2: ::std::os::raw::c_short,
    pub y2: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_iv_wlist_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_wlist_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_wlist_s>(),
        12usize,
        concat!("Size of: ", stringify!(iv_wlist_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_wlist_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_wlist_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_wlist_s),
            "::",
            stringify!(y2)
        )
    );
}
pub type iv_wlist = iv_wlist_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_netinfo_s {
    pub connected: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 64usize],
    pub device: [::std::os::raw::c_char; 64usize],
    pub security: [::std::os::raw::c_char; 64usize],
    pub prefix: [::std::os::raw::c_char; 64usize],
    pub index: ::std::os::raw::c_int,
    pub atime: ::std::os::raw::c_int,
    pub speed: ::std::os::raw::c_int,
    pub reserved_0e: ::std::os::raw::c_int,
    pub bytes_in: ::std::os::raw::c_ulong,
    pub bytes_out: ::std::os::raw::c_ulong,
    pub packets_in: ::std::os::raw::c_ulong,
    pub packets_out: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_iv_netinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_netinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_netinfo_s>(),
        292usize,
        concat!("Size of: ", stringify!(iv_netinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_netinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_netinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connected) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(connected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(security)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefix) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atime) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_0e) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(reserved_0e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_in) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(bytes_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes_out) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(bytes_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packets_in) as usize - ptr as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(packets_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packets_out) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_netinfo_s),
            "::",
            stringify!(packets_out)
        )
    );
}
pub type iv_netinfo = iv_netinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_sessioninfo_s {
    pub url: *mut ::std::os::raw::c_char,
    pub ctype: *mut ::std::os::raw::c_char,
    pub response: ::std::os::raw::c_long,
    pub length: ::std::os::raw::c_int,
    pub progress: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iv_sessioninfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_sessioninfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_sessioninfo_s>(),
        20usize,
        concat!("Size of: ", stringify!(iv_sessioninfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_sessioninfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_sessioninfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).url) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(url)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(ctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sessioninfo_s),
            "::",
            stringify!(progress)
        )
    );
}
pub type iv_sessioninfo = iv_sessioninfo_s;
#[repr(C)]
#[derive(Debug)]
pub struct iv_fbinfo_s {
    pub version: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub shmkey: ::std::os::raw::c_int,
    pub shmsize: ::std::os::raw::c_int,
    pub refkey: ::std::os::raw::c_int,
    pub refsize: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub vdepth: ::std::os::raw::c_int,
    pub orientation: ::std::os::raw::c_int,
    pub scanline_portrait: ::std::os::raw::c_int,
    pub scanline_landscape: ::std::os::raw::c_int,
    pub scanline: ::std::os::raw::c_int,
    pub fb_offset: ::std::os::raw::c_int,
    pub fb_size: ::std::os::raw::c_int,
    pub ev_offset: ::std::os::raw::c_int,
    pub ev_size: ::std::os::raw::c_int,
    pub evhead: ::std::os::raw::c_int,
    pub evtail: ::std::os::raw::c_int,
    pub einkversion: ::std::os::raw::c_int,
    pub reserved: [::std::os::raw::c_int; 15usize],
    pub data: __IncompleteArrayField<::std::os::raw::c_uchar>,
    pub fb_y_offset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iv_fbinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_fbinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_fbinfo_s>(),
        144usize,
        concat!("Size of: ", stringify!(iv_fbinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_fbinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_fbinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(shmkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shmsize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(shmsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refkey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(refkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refsize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(refsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdepth) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(vdepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline_portrait) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(scanline_portrait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline_landscape) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(scanline_landscape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanline) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(scanline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb_offset) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(fb_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(fb_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ev_offset) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(ev_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ev_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(ev_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evhead) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(evhead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).evtail) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(evtail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).einkversion) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(einkversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb_y_offset) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_fbinfo_s),
            "::",
            stringify!(fb_y_offset)
        )
    );
}
pub type iv_fbinfo = iv_fbinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subtaskinfo_s {
    pub id: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub book: *mut ::std::os::raw::c_char,
    pub fgindex: ::std::os::raw::c_int,
    pub order: ::std::os::raw::c_int,
    pub rsv_1s: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_subtaskinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<subtaskinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<subtaskinfo_s>(),
        24usize,
        concat!("Size of: ", stringify!(subtaskinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<subtaskinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(subtaskinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).book) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(book)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fgindex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(fgindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_1s) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(subtaskinfo_s),
            "::",
            stringify!(rsv_1s)
        )
    );
}
pub type subtaskinfo = subtaskinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct taskinfo_s {
    pub task: ::std::os::raw::c_int,
    pub nsubtasks: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub fbshmkey: ::std::os::raw::c_int,
    pub fbshmsize: ::std::os::raw::c_int,
    pub mainpid: pid_t,
    pub appname: *mut ::std::os::raw::c_char,
    pub icon: *mut ibitmap,
    pub subtasks: *mut subtaskinfo,
    pub fbtempkey: ::std::os::raw::c_int,
    pub rsv_2: ::std::os::raw::c_int,
    pub rsv_3: ::std::os::raw::c_int,
    pub rsv_4: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_taskinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<taskinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<taskinfo_s>(),
        52usize,
        concat!("Size of: ", stringify!(taskinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<taskinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(taskinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsubtasks) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(nsubtasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbshmkey) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(fbshmkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbshmsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(fbshmsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mainpid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(mainpid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).appname) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(appname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(icon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subtasks) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(subtasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbtempkey) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(fbtempkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(rsv_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_3) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(rsv_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsv_4) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(taskinfo_s),
            "::",
            stringify!(rsv_4)
        )
    );
}
pub type taskinfo = taskinfo_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_mtinfo_s {
    pub active: bool,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub pressure: ::std::os::raw::c_int,
    pub devtype: input_dev_e,
    pub timems: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_iv_mtinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_mtinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_mtinfo_s>(),
        32usize,
        concat!("Size of: ", stringify!(iv_mtinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_mtinfo_s>(),
        8usize,
        concat!("Alignment of ", stringify!(iv_mtinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).devtype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(devtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timems) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_mtinfo_s),
            "::",
            stringify!(timems)
        )
    );
}
pub type iv_mtinfo = iv_mtinfo_s;
pub type iv_mtinfo_section = [iv_mtinfo; 2usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct apinfo_s {
    pub ssid: [::std::os::raw::c_char; 64usize],
    pub mode: ::std::os::raw::c_int,
    pub channel: ::std::os::raw::c_int,
    pub security: WIFI_SECURITY,
    pub quality: ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
    pub noise: ::std::os::raw::c_int,
    pub mac: [::std::os::raw::c_uchar; 8usize],
    pub timestamp: time_t,
}
#[test]
fn bindgen_test_layout_apinfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<apinfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<apinfo_s>(),
        100usize,
        concat!("Size of: ", stringify!(apinfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<apinfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(apinfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(ssid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).security) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(security)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noise) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(noise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mac) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(apinfo_s),
            "::",
            stringify!(timestamp)
        )
    );
}
pub type wifiapinfo = apinfo_s;
#[repr(C)]
#[derive(Debug)]
pub struct wifi_ap_list_s {
    pub ap_quantity: ::std::os::raw::c_int,
    pub apinfo: __IncompleteArrayField<wifiapinfo>,
}
#[test]
fn bindgen_test_layout_wifi_ap_list_s() {
    const UNINIT: ::std::mem::MaybeUninit<wifi_ap_list_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wifi_ap_list_s>(),
        4usize,
        concat!("Size of: ", stringify!(wifi_ap_list_s))
    );
    assert_eq!(
        ::std::mem::align_of::<wifi_ap_list_s>(),
        4usize,
        concat!("Alignment of ", stringify!(wifi_ap_list_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ap_quantity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wifi_ap_list_s),
            "::",
            stringify!(ap_quantity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wifi_ap_list_s),
            "::",
            stringify!(apinfo)
        )
    );
}
pub type iv_wifi_ap_list = wifi_ap_list_s;
pub type pointer_to_word_hand_t = ::std::option::Option<
    unsafe extern "C" fn(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        forward: ::std::os::raw::c_int,
    ) -> *mut iv_wlist,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union network_interface {
    pub intr: [::std::os::raw::c_char; 8usize],
    pub addr: [::std::os::raw::c_char; 16usize],
    pub hw_addr: [::std::os::raw::c_char; 18usize],
}
#[test]
fn bindgen_test_layout_network_interface() {
    const UNINIT: ::std::mem::MaybeUninit<network_interface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<network_interface>(),
        18usize,
        concat!("Size of: ", stringify!(network_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<network_interface>(),
        1usize,
        concat!("Alignment of ", stringify!(network_interface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface),
            "::",
            stringify!(intr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface),
            "::",
            stringify!(hw_addr)
        )
    );
}
#[repr(C)]
pub struct network_interface_array_s {
    pub count: ::std::os::raw::c_uint,
    pub net_int: __IncompleteArrayField<network_interface>,
}
#[test]
fn bindgen_test_layout_network_interface_array_s() {
    const UNINIT: ::std::mem::MaybeUninit<network_interface_array_s> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<network_interface_array_s>(),
        4usize,
        concat!("Size of: ", stringify!(network_interface_array_s))
    );
    assert_eq!(
        ::std::mem::align_of::<network_interface_array_s>(),
        4usize,
        concat!("Alignment of ", stringify!(network_interface_array_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_array_s),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).net_int) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_array_s),
            "::",
            stringify!(net_int)
        )
    );
}
pub type network_interface_array = network_interface_array_s;
pub const bt_mode_e_BT_MODE_OFF: bt_mode_e = 0;
pub const bt_mode_e_BT_MODE_HIDDEN: bt_mode_e = 1;
pub const bt_mode_e_BT_MODE_VISIBLE: bt_mode_e = 2;
pub type bt_mode_e = ::std::os::raw::c_uint;
pub use self::bt_mode_e as bt_mode;
pub const bt_state_e_BT_STATE_OFF: bt_state_e = 0;
pub const bt_state_e_BT_STATE_SUSPENDED: bt_state_e = 1;
pub const bt_state_e_BT_STATE_READY: bt_state_e = 2;
pub const bt_state_e_BT_STATE_CONNECTED: bt_state_e = 3;
pub const bt_state_e_BT_STATE_TRANSFERRING: bt_state_e = 4;
pub const bt_state_e_BT_STATE_ERROR: bt_state_e = 5;
pub const bt_state_e_BT_STATE_MAX: bt_state_e = 6;
pub type bt_state_e = ::std::os::raw::c_uint;
pub use self::bt_state_e as bt_state;
pub const bt_flags_e_BT_FLAG_UPDATE_TIMEOUT: bt_flags_e = 1;
pub const bt_flags_e_BT_FLAG_LOW_POWER: bt_flags_e = 2;
pub type bt_flags_e = ::std::os::raw::c_uint;
pub use self::bt_flags_e as bt_flags;
pub const bt_service_e_BT_UNKNOWN: bt_service_e = 0;
pub const bt_service_e_BT_AUTH: bt_service_e = 1;
pub const bt_service_e_BT_OBEX: bt_service_e = 2;
pub const bt_service_e_BT_SECOND_SCREEN: bt_service_e = 3;
pub type bt_service_e = ::std::os::raw::c_uint;
pub const bt_service_state_e_BT_SERVICE_ACTIVE: bt_service_state_e = 0;
pub const bt_service_state_e_BT_SERVICE_CANCEL: bt_service_state_e = 1;
pub const bt_service_state_e_BT_SERVICE_ERROR: bt_service_state_e = 2;
pub type bt_service_state_e = ::std::os::raw::c_uint;
pub const obex_status_e_OBEX_UNKNOWN: obex_status_e = 0;
pub const obex_status_e_OBEX_ERROR: obex_status_e = 1;
pub const obex_status_e_OBEX_REQUEST_AUTH: obex_status_e = 2;
pub const obex_status_e_OBEX_REQUEST_AUTH_DONE: obex_status_e = 3;
pub const obex_status_e_OBEX_TRANSFERRING: obex_status_e = 4;
pub const obex_status_e_OBEX_DONE: obex_status_e = 5;
pub type obex_status_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obex_service_s {
    pub status: obex_status_e,
    pub auth: ::std::os::raw::c_int,
    pub filesize: ::std::os::raw::c_long,
    pub transferred: ::std::os::raw::c_long,
    pub name: [::std::os::raw::c_char; 128usize],
    pub path: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 128usize],
    pub mimetype: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_obex_service_s() {
    const UNINIT: ::std::mem::MaybeUninit<obex_service_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<obex_service_s>(),
        592usize,
        concat!("Size of: ", stringify!(obex_service_s))
    );
    assert_eq!(
        ::std::mem::align_of::<obex_service_s>(),
        4usize,
        concat!("Alignment of ", stringify!(obex_service_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(obex_service_s),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).auth) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(obex_service_s),
            "::",
            stringify!(auth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filesize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(obex_service_s),
            "::",
            stringify!(filesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transferred) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(obex_service_s),
            "::",
            stringify!(transferred)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(obex_service_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(obex_service_s),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(obex_service_s),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mimetype) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(obex_service_s),
            "::",
            stringify!(mimetype)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bt_service_obj_s {
    pub id: ::std::os::raw::c_int,
    pub service: bt_service_e,
    pub state: bt_service_state_e,
    pub lock: ::std::os::raw::c_int,
    pub users: [pid_t; 16usize],
    pub __bindgen_anon_1: bt_service_obj_s__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union bt_service_obj_s__bindgen_ty_1 {
    pub obex: obex_service_s,
    pub service_data: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_bt_service_obj_s__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<bt_service_obj_s__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_service_obj_s__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(bt_service_obj_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_service_obj_s__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(bt_service_obj_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_service_obj_s__bindgen_ty_1),
            "::",
            stringify!(obex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_service_obj_s__bindgen_ty_1),
            "::",
            stringify!(service_data)
        )
    );
}
#[test]
fn bindgen_test_layout_bt_service_obj_s() {
    const UNINIT: ::std::mem::MaybeUninit<bt_service_obj_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bt_service_obj_s>(),
        1104usize,
        concat!("Size of: ", stringify!(bt_service_obj_s))
    );
    assert_eq!(
        ::std::mem::align_of::<bt_service_obj_s>(),
        4usize,
        concat!("Alignment of ", stringify!(bt_service_obj_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_service_obj_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_service_obj_s),
            "::",
            stringify!(service)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_service_obj_s),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_service_obj_s),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).users) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bt_service_obj_s),
            "::",
            stringify!(users)
        )
    );
}
pub type bt_service_obj = bt_service_obj_s;
pub const audio_output_e_AUDIO_OUT_NONE: audio_output_e = 0;
pub const audio_output_e_AUDIO_OUT_HP: audio_output_e = 1;
pub const audio_output_e_AUDIO_OUT_BT: audio_output_e = 2;
pub const audio_output_e_AUDIO_OUT_SPEAKER: audio_output_e = 3;
pub type audio_output_e = ::std::os::raw::c_uint;
pub use self::audio_output_e as audio_output_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audio_output_info {
    pub type_: audio_output_t,
    pub description: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_audio_output_info() {
    const UNINIT: ::std::mem::MaybeUninit<audio_output_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<audio_output_info>(),
        36usize,
        concat!("Size of: ", stringify!(audio_output_info))
    );
    assert_eq!(
        ::std::mem::align_of::<audio_output_info>(),
        4usize,
        concat!("Alignment of ", stringify!(audio_output_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_output_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(audio_output_info),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct network_interface_info {
    pub ip_addr: network_interface,
    pub mask: network_interface,
    pub br_addr: network_interface,
    pub hw_addr: network_interface,
}
#[test]
fn bindgen_test_layout_network_interface_info() {
    const UNINIT: ::std::mem::MaybeUninit<network_interface_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<network_interface_info>(),
        72usize,
        concat!("Size of: ", stringify!(network_interface_info))
    );
    assert_eq!(
        ::std::mem::align_of::<network_interface_info>(),
        1usize,
        concat!("Alignment of ", stringify!(network_interface_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_info),
            "::",
            stringify!(ip_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_info),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).br_addr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_info),
            "::",
            stringify!(br_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_addr) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(network_interface_info),
            "::",
            stringify!(hw_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icolor_map_s {
    pub from_color: *mut ::std::os::raw::c_int,
    pub to_color: *mut ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_icolor_map_s() {
    const UNINIT: ::std::mem::MaybeUninit<icolor_map_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icolor_map_s>(),
        12usize,
        concat!("Size of: ", stringify!(icolor_map_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icolor_map_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icolor_map_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icolor_map_s),
            "::",
            stringify!(from_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_color) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icolor_map_s),
            "::",
            stringify!(to_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icolor_map_s),
            "::",
            stringify!(size)
        )
    );
}
pub type icolor_map = icolor_map_s;
#[doc = "< application is a reader, affects behavior of panel\n for proper work, set this attribute before first acces to panel API"]
pub const APPLICATION_ATTRIBUTE_APPLICATION_READER: APPLICATION_ATTRIBUTE = 0;
#[doc = "< maximal value of the attribute"]
pub const APPLICATION_ATTRIBUTE_APPLICATION_ATTRIBUTE_MAX: APPLICATION_ATTRIBUTE = 31;
#[doc = " Enum APPLICATION_ATTRIBUTE wich can be used for setting current application attributes\n @see SetCurrentApplicationAttribute, TestCurrentApplicationAttribute"]
pub type APPLICATION_ATTRIBUTE = ::std::os::raw::c_uint;
pub const default_orientation_type_e_ORIENTATION_TYPE_AUTO: default_orientation_type_e = -1;
pub const default_orientation_type_e_ORIENTATION_TYPE_SELF: default_orientation_type_e = -2;
pub type default_orientation_type_e = ::std::os::raw::c_int;
pub use self::default_orientation_type_e as default_orientation_type;
pub const iv_orientation_UpOrientation: iv_orientation = 0;
pub const iv_orientation_RightOrientation: iv_orientation = 1;
pub const iv_orientation_LeftOrientation: iv_orientation = 2;
pub const iv_orientation_DownOrientation: iv_orientation = 3;
pub type iv_orientation = ::std::os::raw::c_uint;
pub const eside_SIDE_NONE: eside = 0;
pub const eside_SIDE_LEFT: eside = 1;
pub const eside_SIDE_RIGHT: eside = 2;
pub const eside_SIDE_TOP: eside = 4;
pub const eside_SIDE_BOTTOM: eside = 8;
pub const eside_SIDE_ALL: eside = 15;
pub type eside = ::std::os::raw::c_uint;
pub const edef_thickness_THICKNESS_DEF_NONE: edef_thickness = 0;
pub const edef_thickness_THICKNESS_DEF_SINGLE: edef_thickness = -1;
pub const edef_thickness_THICKNESS_DEF_FOCUSED_FRAME: edef_thickness = -2;
pub const edef_thickness_THICKNESS_DEF_DIALOG_FRAME: edef_thickness = -3;
pub const edef_thickness_THICKNESS_DEF_MENU_BORDER: edef_thickness = -4;
pub const edef_thickness_THICKNESS_DEF_DOUBLE: edef_thickness = -5;
pub const edef_thickness_THICKNESS_DEF_MAX: edef_thickness = -8;
pub const edef_thickness_RADIUS_DEPEND_ON_THICKNESS: edef_thickness = -100;
pub type edef_thickness = ::std::os::raw::c_int;
pub const estyle_ROUND_NONE: estyle = 0;
pub const estyle_ROUND_TOP_LEFT: estyle = 1;
pub const estyle_ROUND_TOP_RIGHT: estyle = 2;
pub const estyle_ROUND_BOTTOM_LEFT: estyle = 4;
pub const estyle_ROUND_BOTTOM_RIGHT: estyle = 8;
pub const estyle_ROUND_TOP: estyle = 3;
pub const estyle_ROUND_DOWN: estyle = 12;
pub const estyle_ROUND_LEFT: estyle = 5;
pub const estyle_ROUND_RIGHT: estyle = 10;
pub const estyle_ROUND_ALL: estyle = 15;
pub const estyle_ROUND_FILL_INSIDE: estyle = 16;
pub const estyle_ROUND_FILL_OUTSIDE_BG: estyle = 32;
pub const estyle_ROUND_BLEND_SRC_INSIDE: estyle = 64;
pub const estyle_ROUND_BLEND_SRC_OUTSIDE: estyle = 128;
pub const estyle_ROUND_DRAW_CIRCLE_BLACK_WHITE: estyle = 256;
pub const estyle_ROUND_DEFAULT: estyle = 15;
pub type estyle = ::std::os::raw::c_uint;
pub const egradient_GRADIENT_NONE: egradient = 0;
pub const egradient_GRADIENT_UP_DOWN: egradient = 1;
pub const egradient_GRADIENT_DOWN_UP: egradient = 2;
pub const egradient_GRADIENT_LEFT_RIGHT: egradient = 4;
pub const egradient_GRADIENT_RIGHT_LEFT: egradient = 8;
pub type egradient = ::std::os::raw::c_uint;
pub const HorizontalSeparatorType_HORIZONTAL_SEPARATOR_SOLID: HorizontalSeparatorType = 0;
pub const HorizontalSeparatorType_HORIZONTAL_SEPARATOR_DOTTED: HorizontalSeparatorType = 1;
pub type HorizontalSeparatorType = ::std::os::raw::c_uint;
pub const PixelFormat_e_kFmtGrayscale8: PixelFormat_e = 0;
pub const PixelFormat_e_kFmtRGB24: PixelFormat_e = 1;
pub type PixelFormat_e = ::std::os::raw::c_uint;
pub use self::PixelFormat_e as PixelFormat;
pub const ImageSignatureType_e_kImgTypeUnknown: ImageSignatureType_e = 0;
pub const ImageSignatureType_e_kImgTypeBMP: ImageSignatureType_e = 1;
pub const ImageSignatureType_e_kImgTypeGIF: ImageSignatureType_e = 2;
pub const ImageSignatureType_e_kImgTypeJPG: ImageSignatureType_e = 3;
pub const ImageSignatureType_e_kImgTypePNG: ImageSignatureType_e = 4;
pub const ImageSignatureType_e_kImgTypeTIFF: ImageSignatureType_e = 5;
pub type ImageSignatureType_e = ::std::os::raw::c_uint;
pub use self::ImageSignatureType_e as ImageSignatureType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AdjustmentParams_s {
    pub lab_saturation_koef: f64,
    pub vibrance: f64,
    pub saturation_table: [::std::os::raw::c_int; 256usize],
    pub value_table: [::std::os::raw::c_int; 256usize],
    pub brightness: f64,
    pub contrast: f64,
    pub gamma: f64,
    pub saturation: f64,
}
#[test]
fn bindgen_test_layout_AdjustmentParams_s() {
    const UNINIT: ::std::mem::MaybeUninit<AdjustmentParams_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AdjustmentParams_s>(),
        2096usize,
        concat!("Size of: ", stringify!(AdjustmentParams_s))
    );
    assert_eq!(
        ::std::mem::align_of::<AdjustmentParams_s>(),
        8usize,
        concat!("Alignment of ", stringify!(AdjustmentParams_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lab_saturation_koef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AdjustmentParams_s),
            "::",
            stringify!(lab_saturation_koef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vibrance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AdjustmentParams_s),
            "::",
            stringify!(vibrance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saturation_table) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AdjustmentParams_s),
            "::",
            stringify!(saturation_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value_table) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(AdjustmentParams_s),
            "::",
            stringify!(value_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).brightness) as usize - ptr as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(AdjustmentParams_s),
            "::",
            stringify!(brightness)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contrast) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(AdjustmentParams_s),
            "::",
            stringify!(contrast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gamma) as usize - ptr as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(AdjustmentParams_s),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saturation) as usize - ptr as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(AdjustmentParams_s),
            "::",
            stringify!(saturation)
        )
    );
}
pub type AdjustmentParams = AdjustmentParams_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FontForSort_s {
    pub name: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub font: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FontForSort_s() {
    const UNINIT: ::std::mem::MaybeUninit<FontForSort_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FontForSort_s>(),
        12usize,
        concat!("Size of: ", stringify!(FontForSort_s))
    );
    assert_eq!(
        ::std::mem::align_of::<FontForSort_s>(),
        4usize,
        concat!("Alignment of ", stringify!(FontForSort_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FontForSort_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FontForSort_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FontForSort_s),
            "::",
            stringify!(font)
        )
    );
}
pub type FontForSort = FontForSort_s;
pub type keyboard_text_change_callback = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        commit_string: *const ::std::os::raw::c_char,
        text_before: *const ::std::os::raw::c_char,
        replace_from: ::std::os::raw::c_int,
        replace_length: ::std::os::raw::c_int,
    ),
>;
pub type iv_panel_type_change_handler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: PANEL_FLAGS),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_set_request_listener_ex_result {
    pub status: ::std::os::raw::c_int,
    pub ctx: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_iv_set_request_listener_ex_result() {
    const UNINIT: ::std::mem::MaybeUninit<iv_set_request_listener_ex_result> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_set_request_listener_ex_result>(),
        8usize,
        concat!("Size of: ", stringify!(iv_set_request_listener_ex_result))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_set_request_listener_ex_result>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(iv_set_request_listener_ex_result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_set_request_listener_ex_result),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_set_request_listener_ex_result),
            "::",
            stringify!(ctx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iprofile_s {
    pub name: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub avatar: *mut ibitmap,
}
#[test]
fn bindgen_test_layout_iprofile_s() {
    const UNINIT: ::std::mem::MaybeUninit<iprofile_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iprofile_s>(),
        16usize,
        concat!("Size of: ", stringify!(iprofile_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iprofile_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iprofile_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofile_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofile_s),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofile_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avatar) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofile_s),
            "::",
            stringify!(avatar)
        )
    );
}
pub type iprofile = iprofile_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iprofiles_s {
    pub profile: *mut iprofile,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_iprofiles_s() {
    const UNINIT: ::std::mem::MaybeUninit<iprofiles_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iprofiles_s>(),
        8usize,
        concat!("Size of: ", stringify!(iprofiles_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iprofiles_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iprofiles_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofiles_s),
            "::",
            stringify!(profile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iprofiles_s),
            "::",
            stringify!(count)
        )
    );
}
pub type iprofiles = iprofiles_s;
extern "C" {
    pub static mut iv_broken_image: *const ::std::os::raw::c_char;
}
pub const MencaFileStatus_e_kMencaNoStatus: MencaFileStatus_e = 0;
pub const MencaFileStatus_e_kMencaInCloud: MencaFileStatus_e = 1;
pub const MencaFileStatus_e_kMencaSyncing: MencaFileStatus_e = 2;
pub const MencaFileStatus_e_kMencaDownloaded: MencaFileStatus_e = 3;
pub type MencaFileStatus_e = ::std::os::raw::c_uint;
pub use self::MencaFileStatus_e as MencaFileStatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BookSyncStatus_s {
    pub menca_status_: MencaFileStatus,
}
#[test]
fn bindgen_test_layout_BookSyncStatus_s() {
    const UNINIT: ::std::mem::MaybeUninit<BookSyncStatus_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BookSyncStatus_s>(),
        4usize,
        concat!("Size of: ", stringify!(BookSyncStatus_s))
    );
    assert_eq!(
        ::std::mem::align_of::<BookSyncStatus_s>(),
        4usize,
        concat!("Alignment of ", stringify!(BookSyncStatus_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).menca_status_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BookSyncStatus_s),
            "::",
            stringify!(menca_status_)
        )
    );
}
pub type BookSyncStatus = BookSyncStatus_s;
pub const AudioPlayerType_e_kAudioPlayer: AudioPlayerType_e = 1;
pub const AudioPlayerType_e_kAudioBooks: AudioPlayerType_e = 2;
pub const AudioPlayerType_e_kBrowser: AudioPlayerType_e = 4;
pub const AudioPlayerType_e_kReaderPlayer: AudioPlayerType_e = 8;
pub type AudioPlayerType_e = ::std::os::raw::c_uint;
pub use self::AudioPlayerType_e as AudioPlayerType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioPlayingInfo_s {
    pub type_: AudioPlayerType,
    pub pid: ::std::os::raw::c_int,
    pub title: [::std::os::raw::c_char; 512usize],
    pub author: [::std::os::raw::c_char; 512usize],
    pub duration: [::std::os::raw::c_char; 32usize],
    pub percent: ::std::os::raw::c_int,
    pub play_state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AudioPlayingInfo_s() {
    const UNINIT: ::std::mem::MaybeUninit<AudioPlayingInfo_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AudioPlayingInfo_s>(),
        1072usize,
        concat!("Size of: ", stringify!(AudioPlayingInfo_s))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioPlayingInfo_s>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioPlayingInfo_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).author) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(author)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).percent) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(percent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).play_state) as usize - ptr as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPlayingInfo_s),
            "::",
            stringify!(play_state)
        )
    );
}
pub type AudioPlayingInfo = AudioPlayingInfo_s;
pub const iv_start_software_update_result_e_SWU_NOT_ENOUGH_POWER:
    iv_start_software_update_result_e = 0;
pub const iv_start_software_update_result_e_SWU_TIMEOUT: iv_start_software_update_result_e = 1;
pub const iv_start_software_update_result_e_SWU_NOT_AVAILEBLE_ON_EMULATOR:
    iv_start_software_update_result_e = 2;
pub type iv_start_software_update_result_e = ::std::os::raw::c_uint;
pub use self::iv_start_software_update_result_e as iv_start_software_update_result;
pub const eBubbleTypes_kBTInfo: eBubbleTypes = 0;
pub const eBubbleTypes_kBTAttention: eBubbleTypes = 1;
pub const eBubbleTypes_kBTWarning: eBubbleTypes = 2;
pub const eBubbleTypes_kBTQuestion: eBubbleTypes = 3;
pub const eBubbleTypes_kBTButton: eBubbleTypes = 4;
pub type eBubbleTypes = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icustombubble_s {
    pub type_: ::std::os::raw::c_int,
    pub bubble_pos: irect,
    pub arrow_pos: irect,
    pub arrow_bmp: *mut ibitmap,
    pub icon_bmp: *mut ibitmap,
    pub text_pos: irect,
    pub font: *mut ifont,
    pub text: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_icustombubble_s() {
    const UNINIT: ::std::mem::MaybeUninit<icustombubble_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icustombubble_s>(),
        80usize,
        concat!("Size of: ", stringify!(icustombubble_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icustombubble_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icustombubble_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icustombubble_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bubble_pos) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icustombubble_s),
            "::",
            stringify!(bubble_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_pos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(icustombubble_s),
            "::",
            stringify!(arrow_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrow_bmp) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(icustombubble_s),
            "::",
            stringify!(arrow_bmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icon_bmp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(icustombubble_s),
            "::",
            stringify!(icon_bmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text_pos) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(icustombubble_s),
            "::",
            stringify!(text_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).font) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(icustombubble_s),
            "::",
            stringify!(font)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(icustombubble_s),
            "::",
            stringify!(text)
        )
    );
}
pub type icustombubble = icustombubble_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icustomhero_s {
    pub pos: irect,
    pub name: *mut ::std::os::raw::c_char,
    pub hero_bmp: *mut ibitmap,
    pub max_bubbles: ::std::os::raw::c_int,
    pub bubbles: *mut *mut irect,
}
#[test]
fn bindgen_test_layout_icustomhero_s() {
    const UNINIT: ::std::mem::MaybeUninit<icustomhero_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icustomhero_s>(),
        36usize,
        concat!("Size of: ", stringify!(icustomhero_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icustomhero_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icustomhero_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomhero_s),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomhero_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hero_bmp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomhero_s),
            "::",
            stringify!(hero_bmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_bubbles) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomhero_s),
            "::",
            stringify!(max_bubbles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bubbles) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomhero_s),
            "::",
            stringify!(bubbles)
        )
    );
}
pub type icustomhero = icustomhero_s;
pub type iv_custombubbledraw =
    ::std::option::Option<unsafe extern "C" fn(bubble: *mut icustombubble)>;
pub type iv_customherodraw = ::std::option::Option<unsafe extern "C" fn(hero: *mut icustomhero)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icustomdialog_s {
    pub timeout: ::std::os::raw::c_int,
    pub bubble_count: ::std::os::raw::c_int,
    pub bubbles: *mut *mut icustombubble,
    pub hero: *mut icustomhero,
    pub hero_draw: iv_customherodraw,
    pub bubble_draw: iv_custombubbledraw,
    pub cb_handler: iv_dialoghandler,
    pub cancel_enable_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_icustomdialog_s() {
    const UNINIT: ::std::mem::MaybeUninit<icustomdialog_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<icustomdialog_s>(),
        32usize,
        concat!("Size of: ", stringify!(icustomdialog_s))
    );
    assert_eq!(
        ::std::mem::align_of::<icustomdialog_s>(),
        4usize,
        concat!("Alignment of ", stringify!(icustomdialog_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomdialog_s),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bubble_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomdialog_s),
            "::",
            stringify!(bubble_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bubbles) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomdialog_s),
            "::",
            stringify!(bubbles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hero) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomdialog_s),
            "::",
            stringify!(hero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hero_draw) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomdialog_s),
            "::",
            stringify!(hero_draw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bubble_draw) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomdialog_s),
            "::",
            stringify!(bubble_draw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_handler) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomdialog_s),
            "::",
            stringify!(cb_handler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cancel_enable_) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(icustomdialog_s),
            "::",
            stringify!(cancel_enable_)
        )
    );
}
pub type icustomdialog = icustomdialog_s;
pub const proxy_type_e_http: proxy_type_e = 0;
pub const proxy_type_e_socks4: proxy_type_e = 1;
pub const proxy_type_e_socks5: proxy_type_e = 2;
pub type proxy_type_e = ::std::os::raw::c_uint;
pub use self::proxy_type_e as proxy_type;
pub type proxy_settings = ::std::os::raw::c_char;
pub const COVERCACHE_STORAGES_e_CCS_NONE: COVERCACHE_STORAGES_e = 0;
pub const COVERCACHE_STORAGES_e_CCS_ADOBE: COVERCACHE_STORAGES_e = 1;
pub const COVERCACHE_STORAGES_e_CCS_FBREADER: COVERCACHE_STORAGES_e = 2;
pub const COVERCACHE_STORAGES_e_CCS_DJVIEWER: COVERCACHE_STORAGES_e = 3;
pub const COVERCACHE_STORAGES_e_CCS_MAXSTORAGE: COVERCACHE_STORAGES_e = 4;
pub type COVERCACHE_STORAGES_e = ::std::os::raw::c_uint;
pub use self::COVERCACHE_STORAGES_e as COVERCACHE_STORAGES;
pub type usleep_func_t =
    ::std::option::Option<unsafe extern "C" fn(__useconds: __useconds_t) -> ::std::os::raw::c_int>;
pub const eTaskOomPriority_kTaskOomPriorityLow: eTaskOomPriority = 0;
pub const eTaskOomPriority_kTaskOomPriorityNormal: eTaskOomPriority = 1;
pub const eTaskOomPriority_kTaskOomPriorityHigh: eTaskOomPriority = 2;
pub type eTaskOomPriority = ::std::os::raw::c_uint;
pub use self::eTaskOomPriority as TaskOomPriority;
pub const CustomGattSessionStatus_e_GattSessionStatus_uncknown: CustomGattSessionStatus_e = 0;
pub const CustomGattSessionStatus_e_GattSessionStatus_disconnected: CustomGattSessionStatus_e = 1;
pub const CustomGattSessionStatus_e_GattSessionStatus_errorCommon: CustomGattSessionStatus_e = 2;
pub const CustomGattSessionStatus_e_GattSessionStatus_errorConnection: CustomGattSessionStatus_e =
    3;
pub const CustomGattSessionStatus_e_GattSessionStatus_errorService: CustomGattSessionStatus_e = 4;
pub const CustomGattSessionStatus_e_GattSessionStatus_connecting: CustomGattSessionStatus_e = 5;
pub const CustomGattSessionStatus_e_GattSessionStatus_discoveringServices:
    CustomGattSessionStatus_e = 6;
pub const CustomGattSessionStatus_e_GattSessionStatus_connected: CustomGattSessionStatus_e = 7;
pub type CustomGattSessionStatus_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CustomGattSession_s {
    _unused: [u8; 0],
}
pub type CustomGattSession = CustomGattSession_s;
pub const ConfigStorageSlot_t_ConfigStorage_1: ConfigStorageSlot_t = 0;
pub const ConfigStorageSlot_t_ConfigStorage_2: ConfigStorageSlot_t = 1;
pub const ConfigStorageSlot_t_ConfigStorage_3: ConfigStorageSlot_t = 2;
pub const ConfigStorageSlot_t_ConfigStorage_4: ConfigStorageSlot_t = 3;
pub type ConfigStorageSlot_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConfigStorageSert {
    pub sign: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_ConfigStorageSert() {
    const UNINIT: ::std::mem::MaybeUninit<ConfigStorageSert> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConfigStorageSert>(),
        64usize,
        concat!("Size of: ", stringify!(ConfigStorageSert))
    );
    assert_eq!(
        ::std::mem::align_of::<ConfigStorageSert>(),
        1usize,
        concat!("Alignment of ", stringify!(ConfigStorageSert))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sign) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConfigStorageSert),
            "::",
            stringify!(sign)
        )
    );
}
pub const IocConfigStorageResult_t_IOC_CONFIGSTORAGE_RESULT_FAIL: IocConfigStorageResult_t = 0;
pub const IocConfigStorageResult_t_IOC_CONFIGSTORAGE_RESULT_OK: IocConfigStorageResult_t = 1;
pub type IocConfigStorageResult_t = ::std::os::raw::c_uint;
pub const software_localization_type_e_SLT_UNKNOWN: software_localization_type_e = 0;
pub const software_localization_type_e_SLT_WW: software_localization_type_e = 1;
pub const software_localization_type_e_SLT_RU: software_localization_type_e = 2;
pub const software_localization_type_e_SLT_CIS: software_localization_type_e = 3;
pub const software_localization_type_e_SLT_CN: software_localization_type_e = 4;
pub type software_localization_type_e = ::std::os::raw::c_uint;
pub use self::software_localization_type_e as software_localization_type;
extern "C" {
    #[doc = " iv_sleep_preventor"]
    pub static iv_sleep_preventor_timeout_ms: ::std::os::raw::c_longlong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iv_sleep_preventor_s {
    pub name: *const ::std::os::raw::c_char,
    pub forbidden: bool,
}
#[test]
fn bindgen_test_layout_iv_sleep_preventor_s() {
    const UNINIT: ::std::mem::MaybeUninit<iv_sleep_preventor_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iv_sleep_preventor_s>(),
        8usize,
        concat!("Size of: ", stringify!(iv_sleep_preventor_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iv_sleep_preventor_s>(),
        4usize,
        concat!("Alignment of ", stringify!(iv_sleep_preventor_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sleep_preventor_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forbidden) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(iv_sleep_preventor_s),
            "::",
            stringify!(forbidden)
        )
    );
}
pub type iv_sleep_preventor_t = iv_sleep_preventor_s;
pub const iv_app_capability_e_APP_CAPABILITY_SUPPORT_SCREEN_INVERSION: iv_app_capability_e = 1;
pub const iv_app_capability_e_APP_CAPABILITY_USER: iv_app_capability_e = 2;
pub type iv_app_capability_e = ::std::os::raw::c_uint;
pub use self::iv_app_capability_e as iv_app_capability;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
extern crate libloading;
pub struct inkview {
    __library: ::libloading::Library,
    pub __underflow: Result<
        unsafe extern "C" fn(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __uflow: Result<
        unsafe extern "C" fn(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __overflow: Result<
        unsafe extern "C" fn(
            arg1: *mut _IO_FILE,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_getc: Result<
        unsafe extern "C" fn(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_putc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __fp: *mut _IO_FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_feof: Result<
        unsafe extern "C" fn(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_ferror: Result<
        unsafe extern "C" fn(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_peekc_locked: Result<
        unsafe extern "C" fn(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_flockfile: Result<unsafe extern "C" fn(arg1: *mut _IO_FILE), ::libloading::Error>,
    pub _IO_funlockfile: Result<unsafe extern "C" fn(arg1: *mut _IO_FILE), ::libloading::Error>,
    pub _IO_ftrylockfile: Result<
        unsafe extern "C" fn(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_vfscanf: Result<
        unsafe extern "C" fn(
            arg1: *mut _IO_FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: __gnuc_va_list,
            arg4: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_vfprintf: Result<
        unsafe extern "C" fn(
            arg1: *mut _IO_FILE,
            arg2: *const ::std::os::raw::c_char,
            arg3: __gnuc_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _IO_padn: Result<
        unsafe extern "C" fn(
            arg1: *mut _IO_FILE,
            arg2: ::std::os::raw::c_int,
            arg3: __ssize_t,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub _IO_sgetn: Result<
        unsafe extern "C" fn(
            arg1: *mut _IO_FILE,
            arg2: *mut ::std::os::raw::c_void,
            arg3: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub _IO_seekoff: Result<
        unsafe extern "C" fn(
            arg1: *mut _IO_FILE,
            arg2: __off64_t,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
        ) -> __off64_t,
        ::libloading::Error,
    >,
    pub _IO_seekpos: Result<
        unsafe extern "C" fn(
            arg1: *mut _IO_FILE,
            arg2: __off64_t,
            arg3: ::std::os::raw::c_int,
        ) -> __off64_t,
        ::libloading::Error,
    >,
    pub _IO_free_backup_area:
        Result<unsafe extern "C" fn(arg1: *mut _IO_FILE), ::libloading::Error>,
    pub remove: Result<
        unsafe extern "C" fn(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rename: Result<
        unsafe extern "C" fn(
            __old: *const ::std::os::raw::c_char,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub renameat: Result<
        unsafe extern "C" fn(
            __oldfd: ::std::os::raw::c_int,
            __old: *const ::std::os::raw::c_char,
            __newfd: ::std::os::raw::c_int,
            __new: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tmpfile: Result<unsafe extern "C" fn() -> *mut FILE, ::libloading::Error>,
    pub tmpnam: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tmpnam_r: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tempnam: Result<
        unsafe extern "C" fn(
            __dir: *const ::std::os::raw::c_char,
            __pfx: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fclose: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fflush: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fflush_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fopen: Result<
        unsafe extern "C" fn(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub freopen: Result<
        unsafe extern "C" fn(
            __filename: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
            __stream: *mut FILE,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub fdopen: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub fmemopen: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_void,
            __len: usize,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub open_memstream: Result<
        unsafe extern "C" fn(
            __bufloc: *mut *mut ::std::os::raw::c_char,
            __sizeloc: *mut usize,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub setbuf: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub setvbuf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __modes: ::std::os::raw::c_int,
            __n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setbuffer: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        ),
        ::libloading::Error,
    >,
    pub setlinebuf: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub fprintf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub printf: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfprintf: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vprintf: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub snprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: ::std::os::raw::c_uint,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsnprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxlen: ::std::os::raw::c_uint,
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vdprintf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __arg: __gnuc_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub dprintf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fscanf: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub scanf: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sscanf: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fscanf1: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub scanf1: Result<
        unsafe extern "C" fn(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sscanf1: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfscanf: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vscanf: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsscanf: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfscanf1: Result<
        unsafe extern "C" fn(
            __s: *mut FILE,
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vscanf1: Result<
        unsafe extern "C" fn(
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsscanf1: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __format: *const ::std::os::raw::c_char,
            __arg: u32,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fgetc: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getc: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getchar: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getc_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getchar_unlocked:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fgetc_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fputc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putchar: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fputc_unlocked: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putc_unlocked: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putchar_unlocked: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getw: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putw: Result<
        unsafe extern "C" fn(
            __w: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fgets: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __n: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __getdelim: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub getdelim: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __delimiter: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub getline: Result<
        unsafe extern "C" fn(
            __lineptr: *mut *mut ::std::os::raw::c_char,
            __n: *mut usize,
            __stream: *mut FILE,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub fputs: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub puts: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ungetc: Result<
        unsafe extern "C" fn(
            __c: ::std::os::raw::c_int,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fread: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_uint,
            __n: ::std::os::raw::c_uint,
            __stream: *mut FILE,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub fwrite: Result<
        unsafe extern "C" fn(
            __ptr: *const ::std::os::raw::c_void,
            __size: ::std::os::raw::c_uint,
            __n: ::std::os::raw::c_uint,
            __s: *mut FILE,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub fread_unlocked: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut FILE,
        ) -> usize,
        ::libloading::Error,
    >,
    pub fwrite_unlocked: Result<
        unsafe extern "C" fn(
            __ptr: *const ::std::os::raw::c_void,
            __size: usize,
            __n: usize,
            __stream: *mut FILE,
        ) -> usize,
        ::libloading::Error,
    >,
    pub fseek: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __off: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftell: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub rewind: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub fseeko: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __off: __off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftello: Result<unsafe extern "C" fn(__stream: *mut FILE) -> __off_t, ::libloading::Error>,
    pub fgetpos: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fsetpos: Result<
        unsafe extern "C" fn(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearerr: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub feof: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ferror: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearerr_unlocked: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub feof_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ferror_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub perror:
        Result<unsafe extern "C" fn(__s: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub fileno: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fileno_unlocked: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub popen: Result<
        unsafe extern "C" fn(
            __command: *const ::std::os::raw::c_char,
            __modes: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub pclose: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ctermid: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub flockfile: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub ftrylockfile: Result<
        unsafe extern "C" fn(__stream: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub funlockfile: Result<unsafe extern "C" fn(__stream: *mut FILE), ::libloading::Error>,
    pub __ctype_get_mb_cur_max: Result<unsafe extern "C" fn() -> usize, ::libloading::Error>,
    pub atof: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub atoi: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub atol: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub atoll: Result<
        unsafe extern "C" fn(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtod: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64,
        ::libloading::Error,
    >,
    pub strtof: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32,
        ::libloading::Error,
    >,
    pub strtold: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64,
        ::libloading::Error,
    >,
    pub strtol: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub strtoul: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strtoq: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtouq: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub strtoll: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtoull: Result<
        unsafe extern "C" fn(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub l64a: Result<
        unsafe extern "C" fn(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub a64l: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub select: Result<
        unsafe extern "C" fn(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut fd_set,
            __writefds: *mut fd_set,
            __exceptfds: *mut fd_set,
            __timeout: *mut timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pselect: Result<
        unsafe extern "C" fn(
            __nfds: ::std::os::raw::c_int,
            __readfds: *mut fd_set,
            __writefds: *mut fd_set,
            __exceptfds: *mut fd_set,
            __timeout: *const timespec,
            __sigmask: *const __sigset_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gnu_dev_major: Result<
        unsafe extern "C" fn(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub gnu_dev_minor: Result<
        unsafe extern "C" fn(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub gnu_dev_makedev: Result<
        unsafe extern "C" fn(
            __major: ::std::os::raw::c_uint,
            __minor: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub random: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub srandom: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub initstate: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub setstate: Result<
        unsafe extern "C" fn(
            __statebuf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub random_r: Result<
        unsafe extern "C" fn(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub srandom_r: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub initstate_r: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __statebuf: *mut ::std::os::raw::c_char,
            __statelen: usize,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setstate_r: Result<
        unsafe extern "C" fn(
            __statebuf: *mut ::std::os::raw::c_char,
            __buf: *mut random_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rand: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub srand: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub rand_r: Result<
        unsafe extern "C" fn(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub drand48: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub erand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> f64,
        ::libloading::Error,
    >,
    pub lrand48: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub nrand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub mrand48: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub jrand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub srand48:
        Result<unsafe extern "C" fn(__seedval: ::std::os::raw::c_long), ::libloading::Error>,
    pub seed48: Result<
        unsafe extern "C" fn(
            __seed16v: *mut ::std::os::raw::c_ushort,
        ) -> *mut ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub lcong48:
        Result<unsafe extern "C" fn(__param: *mut ::std::os::raw::c_ushort), ::libloading::Error>,
    pub drand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub erand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut f64,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lrand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub nrand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mrand48_r: Result<
        unsafe extern "C" fn(
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub jrand48_r: Result<
        unsafe extern "C" fn(
            __xsubi: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
            __result: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub srand48_r: Result<
        unsafe extern "C" fn(
            __seedval: ::std::os::raw::c_long,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub seed48_r: Result<
        unsafe extern "C" fn(
            __seed16v: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lcong48_r: Result<
        unsafe extern "C" fn(
            __param: *mut ::std::os::raw::c_ushort,
            __buffer: *mut drand48_data,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub malloc: Result<
        unsafe extern "C" fn(__size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub calloc: Result<
        unsafe extern "C" fn(
            __nmemb: ::std::os::raw::c_uint,
            __size: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub realloc: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub free: Result<unsafe extern "C" fn(__ptr: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub cfree:
        Result<unsafe extern "C" fn(__ptr: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub alloca: Result<
        unsafe extern "C" fn(__size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub valloc: Result<
        unsafe extern "C" fn(__size: usize) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub posix_memalign: Result<
        unsafe extern "C" fn(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub aligned_alloc: Result<
        unsafe extern "C" fn(
            __alignment: ::std::os::raw::c_uint,
            __size: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub abort: Result<unsafe extern "C" fn() -> !, ::libloading::Error>,
    pub atexit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub at_quick_exit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub on_exit: Result<
        unsafe extern "C" fn(
            __func: ::std::option::Option<
                unsafe extern "C" fn(
                    __status: ::std::os::raw::c_int,
                    __arg: *mut ::std::os::raw::c_void,
                ),
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int) -> !, ::libloading::Error>,
    pub quick_exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int) -> !, ::libloading::Error>,
    pub _Exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int) -> !, ::libloading::Error>,
    pub getenv: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub putenv: Result<
        unsafe extern "C" fn(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setenv: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __replace: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unsetenv: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearenv: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub mktemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mkstemp: Result<
        unsafe extern "C" fn(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkstemps: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __suffixlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkdtemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub system: Result<
        unsafe extern "C" fn(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub realpath: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub bsearch: Result<
        unsafe extern "C" fn(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: __compar_fn_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub qsort: Result<
        unsafe extern "C" fn(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: usize,
            __size: usize,
            __compar: __compar_fn_t,
        ),
        ::libloading::Error,
    >,
    pub abs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub labs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub llabs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub div: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_int,
            __denom: ::std::os::raw::c_int,
        ) -> div_t,
        ::libloading::Error,
    >,
    pub ldiv: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_long,
            __denom: ::std::os::raw::c_long,
        ) -> ldiv_t,
        ::libloading::Error,
    >,
    pub lldiv: Result<
        unsafe extern "C" fn(
            __numer: ::std::os::raw::c_longlong,
            __denom: ::std::os::raw::c_longlong,
        ) -> lldiv_t,
        ::libloading::Error,
    >,
    pub ecvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fcvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub gcvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qecvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qfcvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub qgcvt: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ecvt_r: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fcvt_r: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub qecvt_r: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub qfcvt_r: Result<
        unsafe extern "C" fn(
            __value: f64,
            __ndigit: ::std::os::raw::c_int,
            __decpt: *mut ::std::os::raw::c_int,
            __sign: *mut ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mblen: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbtowc: Result<
        unsafe extern "C" fn(
            __pwc: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wctomb: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __wchar: wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbstowcs: Result<
        unsafe extern "C" fn(
            __pwcs: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub wcstombs: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __pwcs: *const wchar_t,
            __n: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub rpmatch: Result<
        unsafe extern "C" fn(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getsubopt: Result<
        unsafe extern "C" fn(
            __optionp: *mut *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __valuep: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getloadavg: Result<
        unsafe extern "C" fn(
            __loadavg: *mut f64,
            __nelem: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memmove: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memccpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memset: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub strcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcat: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncat: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcoll: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strxfrm: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub strcoll_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __l: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strxfrm_l: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
            __l: __locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub strdup: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strndup: Result<
        unsafe extern "C" fn(
            __string: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strrchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcspn: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub strspn: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub strpbrk: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strstr: Result<
        unsafe extern "C" fn(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strtok: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __strtok_r: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strtok_r: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
            __save_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strlen: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub strnlen: Result<
        unsafe extern "C" fn(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize,
        ::libloading::Error,
    >,
    pub strerror: Result<
        unsafe extern "C" fn(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strerror_r: Result<
        unsafe extern "C" fn(
            __errnum: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strerror_l: Result<
        unsafe extern "C" fn(
            __errnum: ::std::os::raw::c_int,
            __l: __locale_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __bzero: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_void, __n: usize),
        ::libloading::Error,
    >,
    pub bcopy: Result<
        unsafe extern "C" fn(
            __src: *const ::std::os::raw::c_void,
            __dest: *mut ::std::os::raw::c_void,
            __n: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub bzero: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_uint),
        ::libloading::Error,
    >,
    pub bcmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub index: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub rindex: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ffs: Result<
        unsafe extern "C" fn(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcasecmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncasecmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strsep: Result<
        unsafe extern "C" fn(
            __stringp: *mut *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strsignal: Result<
        unsafe extern "C" fn(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __stpcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub stpcpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __stpncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub stpncpy: Result<
        unsafe extern "C" fn(
            __dest: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __ctype_b_loc:
        Result<unsafe extern "C" fn() -> *mut *const ::std::os::raw::c_ushort, ::libloading::Error>,
    pub __ctype_tolower_loc:
        Result<unsafe extern "C" fn() -> *mut *const __int32_t, ::libloading::Error>,
    pub __ctype_toupper_loc:
        Result<unsafe extern "C" fn() -> *mut *const __int32_t, ::libloading::Error>,
    pub isalnum: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalpha: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iscntrl: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isdigit: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub islower: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isgraph: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isprint: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ispunct: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isspace: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isupper: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isxdigit: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tolower: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toupper: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isblank: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isascii: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toascii: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _toupper: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _tolower: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalnum_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isalpha_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iscntrl_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isdigit_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub islower_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isgraph_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isprint_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ispunct_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isspace_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isupper_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isxdigit_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isblank_l: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: __locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __tolower_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tolower_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __toupper_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub toupper_l: Result<
        unsafe extern "C" fn(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub access: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub faccessat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __type: ::std::os::raw::c_int,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lseek: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: __off_t,
            __whence: ::std::os::raw::c_int,
        ) -> __off_t,
        ::libloading::Error,
    >,
    pub close: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub read: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub write: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub pread: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_void,
            __nbytes: usize,
            __offset: __off_t,
        ) -> isize,
        ::libloading::Error,
    >,
    pub pwrite: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *const ::std::os::raw::c_void,
            __n: usize,
            __offset: __off_t,
        ) -> isize,
        ::libloading::Error,
    >,
    pub pipe: Result<
        unsafe extern "C" fn(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub alarm: Result<
        unsafe extern "C" fn(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub sleep: Result<
        unsafe extern "C" fn(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub ualarm: Result<
        unsafe extern "C" fn(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t,
        ::libloading::Error,
    >,
    pub usleep: Result<
        unsafe extern "C" fn(__useconds: __useconds_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pause: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub chown: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchown: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lchown: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchownat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __owner: __uid_t,
            __group: __gid_t,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub chdir: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchdir: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getcwd: Result<
        unsafe extern "C" fn(
            __buf: *mut ::std::os::raw::c_char,
            __size: usize,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub getwd: Result<
        unsafe extern "C" fn(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub dup: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub dup2: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fd2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execve: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fexecve: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __argv: *const *mut ::std::os::raw::c_char,
            __envp: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execv: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execle: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execl: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execvp: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __argv: *const *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub execlp: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __arg: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub nice: Result<
        unsafe extern "C" fn(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub _exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int) -> !, ::libloading::Error>,
    pub pathconf: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub fpathconf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __name: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub sysconf: Result<
        unsafe extern "C" fn(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub confstr: Result<
        unsafe extern "C" fn(
            __name: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> usize,
        ::libloading::Error,
    >,
    pub getpid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getppid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getpgrp: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub __getpgid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub getpgid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub setpgid: Result<
        unsafe extern "C" fn(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setpgrp: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setsid: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub getsid: Result<unsafe extern "C" fn(__pid: __pid_t) -> __pid_t, ::libloading::Error>,
    pub getuid: Result<unsafe extern "C" fn() -> __uid_t, ::libloading::Error>,
    pub geteuid: Result<unsafe extern "C" fn() -> __uid_t, ::libloading::Error>,
    pub getgid: Result<unsafe extern "C" fn() -> __gid_t, ::libloading::Error>,
    pub getegid: Result<unsafe extern "C" fn() -> __gid_t, ::libloading::Error>,
    pub getgroups: Result<
        unsafe extern "C" fn(
            __size: ::std::os::raw::c_int,
            __list: *mut __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setuid:
        Result<unsafe extern "C" fn(__uid: __uid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setreuid: Result<
        unsafe extern "C" fn(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub seteuid:
        Result<unsafe extern "C" fn(__uid: __uid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setgid:
        Result<unsafe extern "C" fn(__gid: __gid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setregid: Result<
        unsafe extern "C" fn(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setegid:
        Result<unsafe extern "C" fn(__gid: __gid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fork: Result<unsafe extern "C" fn() -> __pid_t, ::libloading::Error>,
    pub vfork: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ttyname: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ttyname_r: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub isatty: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ttyslot: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub link: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub linkat: Result<
        unsafe extern "C" fn(
            __fromfd: ::std::os::raw::c_int,
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub symlink: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub readlink: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub symlinkat: Result<
        unsafe extern "C" fn(
            __from: *const ::std::os::raw::c_char,
            __tofd: ::std::os::raw::c_int,
            __to: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub readlinkat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __buf: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> isize,
        ::libloading::Error,
    >,
    pub unlink: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unlinkat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __name: *const ::std::os::raw::c_char,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rmdir: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tcgetpgrp:
        Result<unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> __pid_t, ::libloading::Error>,
    pub tcsetpgrp: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __pgrp_id: __pid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getlogin:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub getlogin_r: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __name_len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setlogin: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getopt: Result<
        unsafe extern "C" fn(
            ___argc: ::std::os::raw::c_int,
            ___argv: *const *mut ::std::os::raw::c_char,
            __shortopts: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostname: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sethostname: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sethostid: Result<
        unsafe extern "C" fn(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getdomainname: Result<
        unsafe extern "C" fn(
            __name: *mut ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setdomainname: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vhangup: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub revoke: Result<
        unsafe extern "C" fn(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub profil: Result<
        unsafe extern "C" fn(
            __sample_buffer: *mut ::std::os::raw::c_ushort,
            __size: usize,
            __offset: usize,
            __scale: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub acct: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getusershell:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub endusershell: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub setusershell: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub daemon: Result<
        unsafe extern "C" fn(
            __nochdir: ::std::os::raw::c_int,
            __noclose: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub chroot: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getpass: Result<
        unsafe extern "C" fn(
            __prompt: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fsync: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gethostid: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub sync: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getpagesize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getdtablesize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub truncate: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __length: __off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftruncate: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __length: __off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub brk: Result<
        unsafe extern "C" fn(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sbrk: Result<
        unsafe extern "C" fn(__delta: isize) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub syscall: Result<
        unsafe extern "C" fn(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub lockf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            __len: __off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fdatasync: Result<
        unsafe extern "C" fn(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock: Result<unsafe extern "C" fn() -> clock_t, ::libloading::Error>,
    pub time: Result<unsafe extern "C" fn(__timer: *mut time_t) -> time_t, ::libloading::Error>,
    pub difftime:
        Result<unsafe extern "C" fn(__time1: time_t, __time0: time_t) -> f64, ::libloading::Error>,
    pub mktime: Result<unsafe extern "C" fn(__tp: *mut tm) -> time_t, ::libloading::Error>,
    pub strftime: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: usize,
            __format: *const ::std::os::raw::c_char,
            __tp: *const tm,
        ) -> usize,
        ::libloading::Error,
    >,
    pub strftime_l: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __maxsize: usize,
            __format: *const ::std::os::raw::c_char,
            __tp: *const tm,
            __loc: __locale_t,
        ) -> usize,
        ::libloading::Error,
    >,
    pub gmtime:
        Result<unsafe extern "C" fn(__timer: *const time_t) -> *mut tm, ::libloading::Error>,
    pub localtime:
        Result<unsafe extern "C" fn(__timer: *const time_t) -> *mut tm, ::libloading::Error>,
    pub gmtime_r: Result<
        unsafe extern "C" fn(__timer: *const time_t, __tp: *mut tm) -> *mut tm,
        ::libloading::Error,
    >,
    pub localtime_r: Result<
        unsafe extern "C" fn(__timer: *const time_t, __tp: *mut tm) -> *mut tm,
        ::libloading::Error,
    >,
    pub asctime: Result<
        unsafe extern "C" fn(__tp: *const tm) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ctime: Result<
        unsafe extern "C" fn(__timer: *const time_t) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub asctime_r: Result<
        unsafe extern "C" fn(
            __tp: *const tm,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ctime_r: Result<
        unsafe extern "C" fn(
            __timer: *const time_t,
            __buf: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tzset: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub stime: Result<
        unsafe extern "C" fn(__when: *const time_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timegm: Result<unsafe extern "C" fn(__tp: *mut tm) -> time_t, ::libloading::Error>,
    pub timelocal: Result<unsafe extern "C" fn(__tp: *mut tm) -> time_t, ::libloading::Error>,
    pub dysize: Result<
        unsafe extern "C" fn(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub nanosleep: Result<
        unsafe extern "C" fn(
            __requested_time: *const timespec,
            __remaining: *mut timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_getres: Result<
        unsafe extern "C" fn(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_gettime: Result<
        unsafe extern "C" fn(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_settime: Result<
        unsafe extern "C" fn(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_nanosleep: Result<
        unsafe extern "C" fn(
            __clock_id: clockid_t,
            __flags: ::std::os::raw::c_int,
            __req: *const timespec,
            __rem: *mut timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clock_getcpuclockid: Result<
        unsafe extern "C" fn(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_create: Result<
        unsafe extern "C" fn(
            __clock_id: clockid_t,
            __evp: *mut sigevent,
            __timerid: *mut timer_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_delete: Result<
        unsafe extern "C" fn(__timerid: timer_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_settime: Result<
        unsafe extern "C" fn(
            __timerid: timer_t,
            __flags: ::std::os::raw::c_int,
            __value: *const itimerspec,
            __ovalue: *mut itimerspec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_gettime: Result<
        unsafe extern "C" fn(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timer_getoverrun: Result<
        unsafe extern "C" fn(__timerid: timer_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub timespec_get: Result<
        unsafe extern "C" fn(
            __ts: *mut timespec,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gettimeofday: Result<
        unsafe extern "C" fn(__tv: *mut timeval, __tz: __timezone_ptr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub settimeofday: Result<
        unsafe extern "C" fn(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub adjtime: Result<
        unsafe extern "C" fn(
            __delta: *const timeval,
            __olddelta: *mut timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getitimer: Result<
        unsafe extern "C" fn(
            __which: __itimer_which_t,
            __value: *mut itimerval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setitimer: Result<
        unsafe extern "C" fn(
            __which: __itimer_which_t,
            __new: *const itimerval,
            __old: *mut itimerval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utimes: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __tvp: *const timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lutimes: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __tvp: *const timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub futimes: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __tvp: *const timeval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub stat: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fstat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fstatat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __buf: *mut stat,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lstat: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub chmod: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub lchmod: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchmod: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fchmodat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __mode: __mode_t,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub umask: Result<unsafe extern "C" fn(__mask: __mode_t) -> __mode_t, ::libloading::Error>,
    pub mkdir: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkdirat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mknod: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
            __dev: __dev_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mknodat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
            __dev: __dev_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkfifo: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkfifoat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utimensat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __times: *const timespec,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub futimens: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __times: *const timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __fxstat: Result<
        unsafe extern "C" fn(
            __ver: ::std::os::raw::c_int,
            __fildes: ::std::os::raw::c_int,
            __stat_buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __xstat: Result<
        unsafe extern "C" fn(
            __ver: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __lxstat: Result<
        unsafe extern "C" fn(
            __ver: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __fxstatat: Result<
        unsafe extern "C" fn(
            __ver: ::std::os::raw::c_int,
            __fildes: ::std::os::raw::c_int,
            __filename: *const ::std::os::raw::c_char,
            __stat_buf: *mut stat,
            __flag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __xmknod: Result<
        unsafe extern "C" fn(
            __ver: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
            __dev: *mut __dev_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __xmknodat: Result<
        unsafe extern "C" fn(
            __ver: ::std::os::raw::c_int,
            __fd: ::std::os::raw::c_int,
            __path: *const ::std::os::raw::c_char,
            __mode: __mode_t,
            __dev: *mut __dev_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __sigismember: Result<
        unsafe extern "C" fn(
            arg1: *const __sigset_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __sigaddset: Result<
        unsafe extern "C" fn(
            arg1: *mut __sigset_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __sigdelset: Result<
        unsafe extern "C" fn(
            arg1: *mut __sigset_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __sysv_signal: Result<
        unsafe extern "C" fn(
            __sig: ::std::os::raw::c_int,
            __handler: __sighandler_t,
        ) -> __sighandler_t,
        ::libloading::Error,
    >,
    pub signal: Result<
        unsafe extern "C" fn(
            __sig: ::std::os::raw::c_int,
            __handler: __sighandler_t,
        ) -> __sighandler_t,
        ::libloading::Error,
    >,
    pub kill: Result<
        unsafe extern "C" fn(__pid: __pid_t, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub killpg: Result<
        unsafe extern "C" fn(
            __pgrp: __pid_t,
            __sig: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub raise: Result<
        unsafe extern "C" fn(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ssignal: Result<
        unsafe extern "C" fn(
            __sig: ::std::os::raw::c_int,
            __handler: __sighandler_t,
        ) -> __sighandler_t,
        ::libloading::Error,
    >,
    pub gsignal: Result<
        unsafe extern "C" fn(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub psignal: Result<
        unsafe extern "C" fn(__sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub psiginfo: Result<
        unsafe extern "C" fn(__pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub sigblock: Result<
        unsafe extern "C" fn(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigsetmask: Result<
        unsafe extern "C" fn(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub siggetmask: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub sigemptyset: Result<
        unsafe extern "C" fn(__set: *mut sigset_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigfillset: Result<
        unsafe extern "C" fn(__set: *mut sigset_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigaddset: Result<
        unsafe extern "C" fn(
            __set: *mut sigset_t,
            __signo: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigdelset: Result<
        unsafe extern "C" fn(
            __set: *mut sigset_t,
            __signo: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigismember: Result<
        unsafe extern "C" fn(
            __set: *const sigset_t,
            __signo: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigprocmask: Result<
        unsafe extern "C" fn(
            __how: ::std::os::raw::c_int,
            __set: *const sigset_t,
            __oset: *mut sigset_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigsuspend: Result<
        unsafe extern "C" fn(__set: *const sigset_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigaction: Result<
        unsafe extern "C" fn(
            __sig: ::std::os::raw::c_int,
            __act: *const sigaction,
            __oact: *mut sigaction,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigpending: Result<
        unsafe extern "C" fn(__set: *mut sigset_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigwait: Result<
        unsafe extern "C" fn(
            __set: *const sigset_t,
            __sig: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigwaitinfo: Result<
        unsafe extern "C" fn(
            __set: *const sigset_t,
            __info: *mut siginfo_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigtimedwait: Result<
        unsafe extern "C" fn(
            __set: *const sigset_t,
            __info: *mut siginfo_t,
            __timeout: *const timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigqueue: Result<
        unsafe extern "C" fn(
            __pid: __pid_t,
            __sig: ::std::os::raw::c_int,
            __val: sigval,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigreturn: Result<
        unsafe extern "C" fn(__scp: *mut sigcontext) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub siginterrupt: Result<
        unsafe extern "C" fn(
            __sig: ::std::os::raw::c_int,
            __interrupt: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigstack: Result<
        unsafe extern "C" fn(__ss: *mut sigstack, __oss: *mut sigstack) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sigaltstack: Result<
        unsafe extern "C" fn(
            __ss: *const sigaltstack,
            __oss: *mut sigaltstack,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_sigmask: Result<
        unsafe extern "C" fn(
            __how: ::std::os::raw::c_int,
            __newmask: *const __sigset_t,
            __oldmask: *mut __sigset_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_kill: Result<
        unsafe extern "C" fn(
            __threadid: pthread_t,
            __signo: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __libc_current_sigrtmin:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub __libc_current_sigrtmax:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub wait:
        Result<unsafe extern "C" fn(__stat_loc: __WAIT_STATUS) -> __pid_t, ::libloading::Error>,
    pub waitpid: Result<
        unsafe extern "C" fn(
            __pid: __pid_t,
            __stat_loc: *mut ::std::os::raw::c_int,
            __options: ::std::os::raw::c_int,
        ) -> __pid_t,
        ::libloading::Error,
    >,
    pub waitid: Result<
        unsafe extern "C" fn(
            __idtype: idtype_t,
            __id: __id_t,
            __infop: *mut siginfo_t,
            __options: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wait3: Result<
        unsafe extern "C" fn(
            __stat_loc: __WAIT_STATUS,
            __options: ::std::os::raw::c_int,
            __usage: *mut rusage,
        ) -> __pid_t,
        ::libloading::Error,
    >,
    pub wait4: Result<
        unsafe extern "C" fn(
            __pid: __pid_t,
            __stat_loc: __WAIT_STATUS,
            __options: ::std::os::raw::c_int,
            __usage: *mut rusage,
        ) -> __pid_t,
        ::libloading::Error,
    >,
    pub opendir: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut DIR,
        ::libloading::Error,
    >,
    pub fdopendir:
        Result<unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> *mut DIR, ::libloading::Error>,
    pub closedir: Result<
        unsafe extern "C" fn(__dirp: *mut DIR) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub readdir: Result<unsafe extern "C" fn(__dirp: *mut DIR) -> *mut dirent, ::libloading::Error>,
    pub readdir_r: Result<
        unsafe extern "C" fn(
            __dirp: *mut DIR,
            __entry: *mut dirent,
            __result: *mut *mut dirent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rewinddir: Result<unsafe extern "C" fn(__dirp: *mut DIR), ::libloading::Error>,
    pub seekdir: Result<
        unsafe extern "C" fn(__dirp: *mut DIR, __pos: ::std::os::raw::c_long),
        ::libloading::Error,
    >,
    pub telldir: Result<
        unsafe extern "C" fn(__dirp: *mut DIR) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub dirfd: Result<
        unsafe extern "C" fn(__dirp: *mut DIR) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub scandir: Result<
        unsafe extern "C" fn(
            __dir: *const ::std::os::raw::c_char,
            __namelist: *mut *mut *mut dirent,
            __selector: ::std::option::Option<
                unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
            >,
            __cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut *const dirent,
                    arg2: *mut *const dirent,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub alphasort: Result<
        unsafe extern "C" fn(
            __e1: *mut *const dirent,
            __e2: *mut *const dirent,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getdirentries: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __nbytes: usize,
            __basep: *mut __off_t,
        ) -> __ssize_t,
        ::libloading::Error,
    >,
    pub fcntl: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub open: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __oflag: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub openat: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __file: *const ::std::os::raw::c_char,
            __oflag: ::std::os::raw::c_int,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub creat: Result<
        unsafe extern "C" fn(
            __file: *const ::std::os::raw::c_char,
            __mode: mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub posix_fadvise: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: off_t,
            __len: off_t,
            __advise: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub posix_fallocate: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __offset: off_t,
            __len: off_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setgrent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub endgrent: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub getgrent: Result<unsafe extern "C" fn() -> *mut group, ::libloading::Error>,
    pub fgetgrent:
        Result<unsafe extern "C" fn(__stream: *mut FILE) -> *mut group, ::libloading::Error>,
    pub getgrgid: Result<unsafe extern "C" fn(__gid: __gid_t) -> *mut group, ::libloading::Error>,
    pub getgrnam: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut group,
        ::libloading::Error,
    >,
    pub getgrgid_r: Result<
        unsafe extern "C" fn(
            __gid: __gid_t,
            __resultbuf: *mut group,
            __buffer: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut group,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getgrnam_r: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __resultbuf: *mut group,
            __buffer: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut group,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fgetgrent_r: Result<
        unsafe extern "C" fn(
            __stream: *mut FILE,
            __resultbuf: *mut group,
            __buffer: *mut ::std::os::raw::c_char,
            __buflen: usize,
            __result: *mut *mut group,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setgroups: Result<
        unsafe extern "C" fn(__n: usize, __groups: *const __gid_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getgrouplist: Result<
        unsafe extern "C" fn(
            __user: *const ::std::os::raw::c_char,
            __group: __gid_t,
            __groups: *mut __gid_t,
            __ngroups: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub initgroups: Result<
        unsafe extern "C" fn(
            __user: *const ::std::os::raw::c_char,
            __group: __gid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftok: Result<
        unsafe extern "C" fn(
            __pathname: *const ::std::os::raw::c_char,
            __proj_id: ::std::os::raw::c_int,
        ) -> key_t,
        ::libloading::Error,
    >,
    pub __getpagesize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub shmctl: Result<
        unsafe extern "C" fn(
            __shmid: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            __buf: *mut shmid_ds,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub shmget: Result<
        unsafe extern "C" fn(
            __key: key_t,
            __size: usize,
            __shmflg: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub shmat: Result<
        unsafe extern "C" fn(
            __shmid: ::std::os::raw::c_int,
            __shmaddr: *const ::std::os::raw::c_void,
            __shmflg: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub shmdt: Result<
        unsafe extern "C" fn(__shmaddr: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub msgctl: Result<
        unsafe extern "C" fn(
            __msqid: ::std::os::raw::c_int,
            __cmd: ::std::os::raw::c_int,
            __buf: *mut msqid_ds,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub msgget: Result<
        unsafe extern "C" fn(
            __key: key_t,
            __msgflg: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub msgrcv: Result<
        unsafe extern "C" fn(
            __msqid: ::std::os::raw::c_int,
            __msgp: *mut ::std::os::raw::c_void,
            __msgsz: usize,
            __msgtyp: ::std::os::raw::c_long,
            __msgflg: ::std::os::raw::c_int,
        ) -> isize,
        ::libloading::Error,
    >,
    pub msgsnd: Result<
        unsafe extern "C" fn(
            __msqid: ::std::os::raw::c_int,
            __msgp: *const ::std::os::raw::c_void,
            __msgsz: usize,
            __msgflg: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sysinfo: Result<
        unsafe extern "C" fn(__info: *mut sysinfo) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_nprocs_conf:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_nprocs: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_phys_pages:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub get_avphys_pages:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub __errno_location:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_int, ::libloading::Error>,
    pub zlibVersion:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub deflate: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            flush: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflateEnd:
        Result<unsafe extern "C" fn(strm: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub inflate: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            flush: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateEnd:
        Result<unsafe extern "C" fn(strm: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub deflateSetDictionary: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            dictionary: *const Bytef,
            dictLength: uInt,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflateGetDictionary: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            dictionary: *mut Bytef,
            dictLength: *mut uInt,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflateCopy: Result<
        unsafe extern "C" fn(dest: z_streamp, source: z_streamp) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflateReset:
        Result<unsafe extern "C" fn(strm: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub deflateParams: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            level: ::std::os::raw::c_int,
            strategy: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflateTune: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            good_length: ::std::os::raw::c_int,
            max_lazy: ::std::os::raw::c_int,
            nice_length: ::std::os::raw::c_int,
            max_chain: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflateBound: Result<
        unsafe extern "C" fn(strm: z_streamp, sourceLen: uLong) -> uLong,
        ::libloading::Error,
    >,
    pub deflatePending: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            pending: *mut ::std::os::raw::c_uint,
            bits: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflatePrime: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            bits: ::std::os::raw::c_int,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflateSetHeader: Result<
        unsafe extern "C" fn(strm: z_streamp, head: gz_headerp) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateSetDictionary: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            dictionary: *const Bytef,
            dictLength: uInt,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateGetDictionary: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            dictionary: *mut Bytef,
            dictLength: *mut uInt,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateSync:
        Result<unsafe extern "C" fn(strm: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub inflateCopy: Result<
        unsafe extern "C" fn(dest: z_streamp, source: z_streamp) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateReset:
        Result<unsafe extern "C" fn(strm: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub inflateReset2: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            windowBits: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflatePrime: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            bits: ::std::os::raw::c_int,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateMark: Result<
        unsafe extern "C" fn(strm: z_streamp) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub inflateGetHeader: Result<
        unsafe extern "C" fn(strm: z_streamp, head: gz_headerp) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateBack: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            in_: in_func,
            in_desc: *mut ::std::os::raw::c_void,
            out: out_func,
            out_desc: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateBackEnd:
        Result<unsafe extern "C" fn(strm: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub zlibCompileFlags: Result<unsafe extern "C" fn() -> uLong, ::libloading::Error>,
    pub compress: Result<
        unsafe extern "C" fn(
            dest: *mut Bytef,
            destLen: *mut uLongf,
            source: *const Bytef,
            sourceLen: uLong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub compress2: Result<
        unsafe extern "C" fn(
            dest: *mut Bytef,
            destLen: *mut uLongf,
            source: *const Bytef,
            sourceLen: uLong,
            level: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub compressBound: Result<unsafe extern "C" fn(sourceLen: uLong) -> uLong, ::libloading::Error>,
    pub uncompress: Result<
        unsafe extern "C" fn(
            dest: *mut Bytef,
            destLen: *mut uLongf,
            source: *const Bytef,
            sourceLen: uLong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub uncompress2: Result<
        unsafe extern "C" fn(
            dest: *mut Bytef,
            destLen: *mut uLongf,
            source: *const Bytef,
            sourceLen: *mut uLong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzdopen: Result<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            mode: *const ::std::os::raw::c_char,
        ) -> gzFile,
        ::libloading::Error,
    >,
    pub gzbuffer: Result<
        unsafe extern "C" fn(file: gzFile, size: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzsetparams: Result<
        unsafe extern "C" fn(
            file: gzFile,
            level: ::std::os::raw::c_int,
            strategy: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzread: Result<
        unsafe extern "C" fn(
            file: gzFile,
            buf: voidp,
            len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzfread: Result<
        unsafe extern "C" fn(
            buf: voidp,
            size: z_size_t,
            nitems: z_size_t,
            file: gzFile,
        ) -> z_size_t,
        ::libloading::Error,
    >,
    pub gzwrite: Result<
        unsafe extern "C" fn(
            file: gzFile,
            buf: voidpc,
            len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzfwrite: Result<
        unsafe extern "C" fn(
            buf: voidpc,
            size: z_size_t,
            nitems: z_size_t,
            file: gzFile,
        ) -> z_size_t,
        ::libloading::Error,
    >,
    pub gzprintf: Result<
        unsafe extern "C" fn(
            file: gzFile,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzputs: Result<
        unsafe extern "C" fn(
            file: gzFile,
            s: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzgets: Result<
        unsafe extern "C" fn(
            file: gzFile,
            buf: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub gzputc: Result<
        unsafe extern "C" fn(file: gzFile, c: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzgetc:
        Result<unsafe extern "C" fn(file: gzFile) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzungetc: Result<
        unsafe extern "C" fn(c: ::std::os::raw::c_int, file: gzFile) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzflush: Result<
        unsafe extern "C" fn(file: gzFile, flush: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzrewind:
        Result<unsafe extern "C" fn(file: gzFile) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzeof:
        Result<unsafe extern "C" fn(file: gzFile) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzdirect:
        Result<unsafe extern "C" fn(file: gzFile) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzclose:
        Result<unsafe extern "C" fn(file: gzFile) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzclose_r:
        Result<unsafe extern "C" fn(file: gzFile) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzclose_w:
        Result<unsafe extern "C" fn(file: gzFile) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzerror: Result<
        unsafe extern "C" fn(
            file: gzFile,
            errnum: *mut ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub gzclearerr: Result<unsafe extern "C" fn(file: gzFile), ::libloading::Error>,
    pub adler32: Result<
        unsafe extern "C" fn(adler: uLong, buf: *const Bytef, len: uInt) -> uLong,
        ::libloading::Error,
    >,
    pub adler32_z: Result<
        unsafe extern "C" fn(adler: uLong, buf: *const Bytef, len: z_size_t) -> uLong,
        ::libloading::Error,
    >,
    pub crc32: Result<
        unsafe extern "C" fn(crc: uLong, buf: *const Bytef, len: uInt) -> uLong,
        ::libloading::Error,
    >,
    pub crc32_z: Result<
        unsafe extern "C" fn(adler: uLong, buf: *const Bytef, len: z_size_t) -> uLong,
        ::libloading::Error,
    >,
    pub deflateInit_: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            level: ::std::os::raw::c_int,
            version: *const ::std::os::raw::c_char,
            stream_size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateInit_: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            version: *const ::std::os::raw::c_char,
            stream_size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub deflateInit2_: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            level: ::std::os::raw::c_int,
            method: ::std::os::raw::c_int,
            windowBits: ::std::os::raw::c_int,
            memLevel: ::std::os::raw::c_int,
            strategy: ::std::os::raw::c_int,
            version: *const ::std::os::raw::c_char,
            stream_size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateInit2_: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            windowBits: ::std::os::raw::c_int,
            version: *const ::std::os::raw::c_char,
            stream_size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateBackInit_: Result<
        unsafe extern "C" fn(
            strm: z_streamp,
            windowBits: ::std::os::raw::c_int,
            window: *mut ::std::os::raw::c_uchar,
            version: *const ::std::os::raw::c_char,
            stream_size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub gzgetc_:
        Result<unsafe extern "C" fn(file: gzFile) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzopen: Result<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> gzFile,
        ::libloading::Error,
    >,
    pub gzseek: Result<
        unsafe extern "C" fn(arg1: gzFile, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t,
        ::libloading::Error,
    >,
    pub gztell: Result<unsafe extern "C" fn(arg1: gzFile) -> off_t, ::libloading::Error>,
    pub gzoffset: Result<unsafe extern "C" fn(arg1: gzFile) -> off_t, ::libloading::Error>,
    pub adler32_combine: Result<
        unsafe extern "C" fn(arg1: uLong, arg2: uLong, arg3: off_t) -> uLong,
        ::libloading::Error,
    >,
    pub crc32_combine: Result<
        unsafe extern "C" fn(arg1: uLong, arg2: uLong, arg3: off_t) -> uLong,
        ::libloading::Error,
    >,
    pub zError: Result<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub inflateSyncPoint:
        Result<unsafe extern "C" fn(arg1: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_crc_table: Result<unsafe extern "C" fn() -> *const z_crc_t, ::libloading::Error>,
    pub inflateUndermine: Result<
        unsafe extern "C" fn(arg1: z_streamp, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateValidate: Result<
        unsafe extern "C" fn(arg1: z_streamp, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub inflateCodesUsed: Result<
        unsafe extern "C" fn(arg1: z_streamp) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub inflateResetKeep:
        Result<unsafe extern "C" fn(arg1: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub deflateResetKeep:
        Result<unsafe extern "C" fn(arg1: z_streamp) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub gzvprintf: Result<
        unsafe extern "C" fn(
            file: gzFile,
            format: *const ::std::os::raw::c_char,
            va: va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __sched_cpucount: Result<
        unsafe extern "C" fn(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub __sched_cpualloc:
        Result<unsafe extern "C" fn(__count: usize) -> *mut cpu_set_t, ::libloading::Error>,
    pub __sched_cpufree: Result<unsafe extern "C" fn(__set: *mut cpu_set_t), ::libloading::Error>,
    pub sched_setparam: Result<
        unsafe extern "C" fn(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sched_getparam: Result<
        unsafe extern "C" fn(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sched_setscheduler: Result<
        unsafe extern "C" fn(
            __pid: __pid_t,
            __policy: ::std::os::raw::c_int,
            __param: *const sched_param,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sched_getscheduler:
        Result<unsafe extern "C" fn(__pid: __pid_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub sched_yield: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub sched_get_priority_max: Result<
        unsafe extern "C" fn(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sched_get_priority_min: Result<
        unsafe extern "C" fn(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sched_rr_get_interval: Result<
        unsafe extern "C" fn(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_create: Result<
        unsafe extern "C" fn(
            __newthread: *mut pthread_t,
            __attr: *const pthread_attr_t,
            __start_routine: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >,
            __arg: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_exit: Result<
        unsafe extern "C" fn(__retval: *mut ::std::os::raw::c_void) -> !,
        ::libloading::Error,
    >,
    pub pthread_join: Result<
        unsafe extern "C" fn(
            __th: pthread_t,
            __thread_return: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_detach:
        Result<unsafe extern "C" fn(__th: pthread_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub pthread_self: Result<unsafe extern "C" fn() -> pthread_t, ::libloading::Error>,
    pub pthread_equal: Result<
        unsafe extern "C" fn(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_init: Result<
        unsafe extern "C" fn(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_destroy: Result<
        unsafe extern "C" fn(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getdetachstate: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __detachstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setdetachstate: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __detachstate: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getguardsize: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __guardsize: *mut usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setguardsize: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __guardsize: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getschedparam: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __param: *mut sched_param,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setschedparam: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __param: *const sched_param,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getschedpolicy: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __policy: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setschedpolicy: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __policy: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getinheritsched: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __inherit: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setinheritsched: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __inherit: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getscope: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __scope: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setscope: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __scope: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getstackaddr: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __stackaddr: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setstackaddr: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getstacksize: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __stacksize: *mut usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setstacksize: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __stacksize: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_getstack: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_attr_t,
            __stackaddr: *mut *mut ::std::os::raw::c_void,
            __stacksize: *mut usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_attr_setstack: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_attr_t,
            __stackaddr: *mut ::std::os::raw::c_void,
            __stacksize: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_setschedparam: Result<
        unsafe extern "C" fn(
            __target_thread: pthread_t,
            __policy: ::std::os::raw::c_int,
            __param: *const sched_param,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_getschedparam: Result<
        unsafe extern "C" fn(
            __target_thread: pthread_t,
            __policy: *mut ::std::os::raw::c_int,
            __param: *mut sched_param,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_setschedprio: Result<
        unsafe extern "C" fn(
            __target_thread: pthread_t,
            __prio: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_once: Result<
        unsafe extern "C" fn(
            __once_control: *mut pthread_once_t,
            __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_setcancelstate: Result<
        unsafe extern "C" fn(
            __state: ::std::os::raw::c_int,
            __oldstate: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_setcanceltype: Result<
        unsafe extern "C" fn(
            __type: ::std::os::raw::c_int,
            __oldtype: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_cancel:
        Result<unsafe extern "C" fn(__th: pthread_t) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub pthread_testcancel: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub __pthread_register_cancel:
        Result<unsafe extern "C" fn(__buf: *mut __pthread_unwind_buf_t), ::libloading::Error>,
    pub __pthread_unregister_cancel:
        Result<unsafe extern "C" fn(__buf: *mut __pthread_unwind_buf_t), ::libloading::Error>,
    pub __pthread_unwind_next:
        Result<unsafe extern "C" fn(__buf: *mut __pthread_unwind_buf_t) -> !, ::libloading::Error>,
    pub __sigsetjmp: Result<
        unsafe extern "C" fn(
            __env: *mut __jmp_buf_tag,
            __savemask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_init: Result<
        unsafe extern "C" fn(
            __mutex: *mut pthread_mutex_t,
            __mutexattr: *const pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_destroy: Result<
        unsafe extern "C" fn(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_trylock: Result<
        unsafe extern "C" fn(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_lock: Result<
        unsafe extern "C" fn(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_timedlock: Result<
        unsafe extern "C" fn(
            __mutex: *mut pthread_mutex_t,
            __abstime: *const timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_unlock: Result<
        unsafe extern "C" fn(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_getprioceiling: Result<
        unsafe extern "C" fn(
            __mutex: *const pthread_mutex_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_setprioceiling: Result<
        unsafe extern "C" fn(
            __mutex: *mut pthread_mutex_t,
            __prioceiling: ::std::os::raw::c_int,
            __old_ceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutex_consistent: Result<
        unsafe extern "C" fn(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_init: Result<
        unsafe extern "C" fn(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_destroy: Result<
        unsafe extern "C" fn(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_getpshared: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_mutexattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_setpshared: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_mutexattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_gettype: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_mutexattr_t,
            __kind: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_settype: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_mutexattr_t,
            __kind: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_getprotocol: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_mutexattr_t,
            __protocol: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_setprotocol: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_mutexattr_t,
            __protocol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_getprioceiling: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_mutexattr_t,
            __prioceiling: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_setprioceiling: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_mutexattr_t,
            __prioceiling: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_getrobust: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_mutexattr_t,
            __robustness: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_mutexattr_setrobust: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_mutexattr_t,
            __robustness: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_init: Result<
        unsafe extern "C" fn(
            __rwlock: *mut pthread_rwlock_t,
            __attr: *const pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_destroy: Result<
        unsafe extern "C" fn(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_rdlock: Result<
        unsafe extern "C" fn(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_tryrdlock: Result<
        unsafe extern "C" fn(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_timedrdlock: Result<
        unsafe extern "C" fn(
            __rwlock: *mut pthread_rwlock_t,
            __abstime: *const timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_wrlock: Result<
        unsafe extern "C" fn(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_trywrlock: Result<
        unsafe extern "C" fn(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_timedwrlock: Result<
        unsafe extern "C" fn(
            __rwlock: *mut pthread_rwlock_t,
            __abstime: *const timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlock_unlock: Result<
        unsafe extern "C" fn(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlockattr_init: Result<
        unsafe extern "C" fn(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlockattr_destroy: Result<
        unsafe extern "C" fn(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlockattr_getpshared: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_rwlockattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlockattr_setpshared: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_rwlockattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlockattr_getkind_np: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_rwlockattr_t,
            __pref: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_rwlockattr_setkind_np: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_rwlockattr_t,
            __pref: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_cond_init: Result<
        unsafe extern "C" fn(
            __cond: *mut pthread_cond_t,
            __cond_attr: *const pthread_condattr_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_cond_destroy: Result<
        unsafe extern "C" fn(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_cond_signal: Result<
        unsafe extern "C" fn(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_cond_broadcast: Result<
        unsafe extern "C" fn(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_cond_wait: Result<
        unsafe extern "C" fn(
            __cond: *mut pthread_cond_t,
            __mutex: *mut pthread_mutex_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_cond_timedwait: Result<
        unsafe extern "C" fn(
            __cond: *mut pthread_cond_t,
            __mutex: *mut pthread_mutex_t,
            __abstime: *const timespec,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_condattr_init: Result<
        unsafe extern "C" fn(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_condattr_destroy: Result<
        unsafe extern "C" fn(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_condattr_getpshared: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_condattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_condattr_setpshared: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_condattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_condattr_getclock: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_condattr_t,
            __clock_id: *mut __clockid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_condattr_setclock: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_condattr_t,
            __clock_id: __clockid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_spin_init: Result<
        unsafe extern "C" fn(
            __lock: *mut pthread_spinlock_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_spin_destroy: Result<
        unsafe extern "C" fn(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_spin_lock: Result<
        unsafe extern "C" fn(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_spin_trylock: Result<
        unsafe extern "C" fn(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_spin_unlock: Result<
        unsafe extern "C" fn(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_barrier_init: Result<
        unsafe extern "C" fn(
            __barrier: *mut pthread_barrier_t,
            __attr: *const pthread_barrierattr_t,
            __count: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_barrier_destroy: Result<
        unsafe extern "C" fn(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_barrier_wait: Result<
        unsafe extern "C" fn(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_barrierattr_init: Result<
        unsafe extern "C" fn(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_barrierattr_destroy: Result<
        unsafe extern "C" fn(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_barrierattr_getpshared: Result<
        unsafe extern "C" fn(
            __attr: *const pthread_barrierattr_t,
            __pshared: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_barrierattr_setpshared: Result<
        unsafe extern "C" fn(
            __attr: *mut pthread_barrierattr_t,
            __pshared: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_key_create: Result<
        unsafe extern "C" fn(
            __key: *mut pthread_key_t,
            __destr_function: ::std::option::Option<
                unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
            >,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_key_delete: Result<
        unsafe extern "C" fn(__key: pthread_key_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_getspecific: Result<
        unsafe extern "C" fn(__key: pthread_key_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub pthread_setspecific: Result<
        unsafe extern "C" fn(
            __key: pthread_key_t,
            __pointer: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_getcpuclockid: Result<
        unsafe extern "C" fn(
            __thread_id: pthread_t,
            __clock_id: *mut __clockid_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub pthread_atfork: Result<
        unsafe extern "C" fn(
            __prepare: ::std::option::Option<unsafe extern "C" fn()>,
            __parent: ::std::option::Option<unsafe extern "C" fn()>,
            __child: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ioctl: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __request: ::std::os::raw::c_ulong,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub device_audio: Result<unsafe extern "C" fn() -> audio_id_t, ::libloading::Error>,
    pub device_has_audio: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_hp_detect_cfg:
        Result<unsafe extern "C" fn() -> *const hp_detect_cfg_t, ::libloading::Error>,
    pub init_hwconfig: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_ID: Result<unsafe extern "C" fn() -> device_id_t, ::libloading::Error>,
    pub device_platform: Result<unsafe extern "C" fn() -> platform_id_t, ::libloading::Error>,
    pub device_number:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub device_display: Result<unsafe extern "C" fn() -> display_id_t, ::libloading::Error>,
    pub device_display_colormask:
        Result<unsafe extern "C" fn() -> colormask_t, ::libloading::Error>,
    pub device_display_height:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub device_display_width:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub device_display_scanline:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub device_display_dpi:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub device_display_native_orientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_uint, ::libloading::Error>,
    pub device_display_position: Result<unsafe extern "C" fn() -> u8, ::libloading::Error>,
    pub device_epdc: Result<unsafe extern "C" fn() -> epdc_id_t, ::libloading::Error>,
    pub device_epdc_init:
        Result<unsafe extern "C" fn() -> *mut epdc_instance_t, ::libloading::Error>,
    pub device_keyboard: Result<unsafe extern "C" fn() -> keyboard_id_t, ::libloading::Error>,
    pub device_touchpanel: Result<unsafe extern "C" fn() -> touchpanel_id_t, ::libloading::Error>,
    pub device_has_touchpanel: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_input_init:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub device_input_read: Result<
        unsafe extern "C" fn(
            ie: *mut input_event,
            devtype: *mut input_dev_e,
            maxcount: ::std::os::raw::c_int,
            timeout_ms: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub device_keyboard_translate: Result<
        unsafe extern "C" fn(
            ev: *mut input_event,
            keymask: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub device_keyboard_buttons:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ulong, ::libloading::Error>,
    pub device_keyboard_state:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ulong, ::libloading::Error>,
    pub device_touchpanel_getmatrix:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_int, ::libloading::Error>,
    pub add_input_device: Result<
        unsafe extern "C" fn(
            devpath: *const ::std::os::raw::c_char,
            devtype: input_dev_e,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub remove_input_device: Result<
        unsafe extern "C" fn(devpath: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub device_slider: Result<unsafe extern "C" fn() -> slider_id_t, ::libloading::Error>,
    pub device_has_slider: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_slider_cfg:
        Result<unsafe extern "C" fn() -> *const slider_cfg_t, ::libloading::Error>,
    pub device_gyroscope: Result<unsafe extern "C" fn() -> gyroscop_id_t, ::libloading::Error>,
    pub device_gyroscope_placement: Result<unsafe extern "C" fn() -> u8, ::libloading::Error>,
    pub device_has_gyroscope: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_has_extcard: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_usb: Result<unsafe extern "C" fn() -> usb_id_t, ::libloading::Error>,
    pub device_has_usb: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_has_usbhost: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_frontlight: Result<unsafe extern "C" fn() -> frontlight_id_t, ::libloading::Error>,
    pub device_has_frontlight: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_model:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub device_serial_number:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub device_init_led: Result<unsafe extern "C" fn(cfg_led_state: bool), ::libloading::Error>,
    pub device_set_led:
        Result<unsafe extern "C" fn(value: ::std::os::raw::c_int), ::libloading::Error>,
    pub device_get_led:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub device_battery_percent:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub device_is_powered: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_set_bootcramfs_flag:
        Result<unsafe extern "C" fn(flag: bool) -> bool, ::libloading::Error>,
    pub device_reboot: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub device_poweroff: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub device_frontlight_init:
        Result<unsafe extern "C" fn() -> *mut frontlight_ctrl, ::libloading::Error>,
    pub device_lightsensor: Result<unsafe extern "C" fn() -> lightsensor_id_t, ::libloading::Error>,
    pub device_has_lightsensor: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_bluetooth: Result<unsafe extern "C" fn() -> bluetooth_id_t, ::libloading::Error>,
    pub device_has_bluetooth: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_wifi: Result<unsafe extern "C" fn() -> wifi_id_t, ::libloading::Error>,
    pub device_has_wifi: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_gsm: Result<unsafe extern "C" fn() -> gsm_id_t, ::libloading::Error>,
    pub device_has_gsm: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub device_suspend: Result<unsafe extern "C" fn(deep: bool) -> bool, ::libloading::Error>,
    pub device_set_wakealarm:
        Result<unsafe extern "C" fn(seconds: ::std::os::raw::c_int) -> bool, ::libloading::Error>,
    pub device_write_file: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            buf: *const ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub device_write_file_int: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int) -> bool,
        ::libloading::Error,
    >,
    pub device_read_bin_file: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            buf: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub device_read_file: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            buf: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> bool,
        ::libloading::Error,
    >,
    pub device_read_file_int: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub device_power_led_cfg:
        Result<unsafe extern "C" fn() -> *const power_led_cfg_t, ::libloading::Error>,
    pub device_storage_cfg:
        Result<unsafe extern "C" fn() -> *mut storage_cfg_t, ::libloading::Error>,
    pub iv_get_default_font: Result<
        unsafe extern "C" fn(fonttype: FONT_TYPE) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetHardwareDepth:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_sizei:
        Result<unsafe extern "C" fn(bitmap: *const iv_bitmap) -> iv_vector2i, ::libloading::Error>,
    pub iv_sizef:
        Result<unsafe extern "C" fn(bitmap: *const iv_bitmap) -> iv_vector2f, ::libloading::Error>,
    pub iv_sized:
        Result<unsafe extern "C" fn(bitmap: *const iv_bitmap) -> iv_vector2d, ::libloading::Error>,
    pub iv_half_sizei:
        Result<unsafe extern "C" fn(bitmap: *mut ibitmap) -> iv_vector2i, ::libloading::Error>,
    pub iv_half_sizef:
        Result<unsafe extern "C" fn(bitmap: *mut ibitmap) -> iv_vector2f, ::libloading::Error>,
    pub iv_half_sized:
        Result<unsafe extern "C" fn(bitmap: *mut ibitmap) -> iv_vector2d, ::libloading::Error>,
    pub iv_bitmap_ref_from_canvas:
        Result<unsafe extern "C" fn(canvas: *mut icanvas) -> iv_bitmap_ref, ::libloading::Error>,
    pub stacktrace_dump: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub OpenScreen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub IsScreenOpened:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenScreenExt: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub InkViewMain: Result<unsafe extern "C" fn(h: iv_handler), ::libloading::Error>,
    pub CloseApp: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub InitInkview:
        Result<unsafe extern "C" fn(reg_flags: ::std::os::raw::c_int), ::libloading::Error>,
    pub iv_new_vector2i: Result<
        unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_new_vector2f:
        Result<unsafe extern "C" fn(x: f32, y: f32) -> iv_vector2f, ::libloading::Error>,
    pub iv_new_vector2d:
        Result<unsafe extern "C" fn(x: f64, y: f64) -> iv_vector2d, ::libloading::Error>,
    pub iv_vec2i_to2d:
        Result<unsafe extern "C" fn(v: iv_vector2i) -> iv_vector2d, ::libloading::Error>,
    pub iv_new_matrix2i: Result<
        unsafe extern "C" fn(
            a00: ::std::os::raw::c_int,
            a01: ::std::os::raw::c_int,
            a10: ::std::os::raw::c_int,
            a11: ::std::os::raw::c_int,
        ) -> iv_matrix2i,
        ::libloading::Error,
    >,
    pub iv_new_matrix2f: Result<
        unsafe extern "C" fn(a00: f32, a01: f32, a10: f32, a11: f32) -> iv_matrix2f,
        ::libloading::Error,
    >,
    pub iv_new_matrix2d: Result<
        unsafe extern "C" fn(a00: f64, a01: f64, a10: f64, a11: f64) -> iv_matrix2d,
        ::libloading::Error,
    >,
    pub iv_new_complex2f: Result<
        unsafe extern "C" fn(real: f32, imaginary: f32) -> iv_complex2f,
        ::libloading::Error,
    >,
    pub iv_new_complex2d: Result<
        unsafe extern "C" fn(real: f64, imaginary: f64) -> iv_complex2d,
        ::libloading::Error,
    >,
    pub iv_new_identity_matrix2i:
        Result<unsafe extern "C" fn() -> iv_matrix2i, ::libloading::Error>,
    pub iv_new_identity_matrix2f:
        Result<unsafe extern "C" fn() -> iv_matrix2f, ::libloading::Error>,
    pub iv_new_identity_matrix2d:
        Result<unsafe extern "C" fn() -> iv_matrix2d, ::libloading::Error>,
    pub iRect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> irect,
        ::libloading::Error,
    >,
    pub iv_new_rect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> iv_rect,
        ::libloading::Error,
    >,
    pub iv_empty_rect: Result<unsafe extern "C" fn() -> iv_rect, ::libloading::Error>,
    pub ScreenWidth: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ScreenHeight: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetOrientation: Result<unsafe extern "C" fn(n: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetOrientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetGlobalOrientation:
        Result<unsafe extern "C" fn(n: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetGlobalOrientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub QueryGSensor: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetGSensor: Result<unsafe extern "C" fn(mode: ::std::os::raw::c_int), ::libloading::Error>,
    pub ReadGSensor: Result<
        unsafe extern "C" fn(
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            z: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub CalibrateGSensor: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetGSensorEnabled:
        Result<unsafe extern "C" fn(onOff: bool) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsGSensorEnabled: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub GetGSensorOrientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetActualGSensorOrientation:
        Result<unsafe extern "C" fn(orient: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetActualGSensorOrientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetDefaultOrientation:
        Result<unsafe extern "C" fn(orient: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetDefaultOrientation:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub CheckAndSetUpSideDownOrientation: Result<
        unsafe extern "C" fn(orient: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IsDeviceSupportUpSideDown:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ClearScreen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetClip: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SetClipRect: Result<unsafe extern "C" fn(rect: *const irect), ::libloading::Error>,
    pub GetClip: Result<
        unsafe extern "C" fn(
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            w: *mut ::std::os::raw::c_int,
            h: *mut ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub GetClipRect: Result<unsafe extern "C" fn() -> irect, ::libloading::Error>,
    pub MergeClipRect:
        Result<unsafe extern "C" fn(rect: *const irect) -> irect, ::libloading::Error>,
    pub DrawPixel: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawLine: Result<
        unsafe extern "C" fn(
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawLineEx: Result<
        unsafe extern "C" fn(
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            step: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawDashLine: Result<
        unsafe extern "C" fn(
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            fill: ::std::os::raw::c_uint,
            space: ::std::os::raw::c_uint,
        ),
        ::libloading::Error,
    >,
    pub DrawRect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawRectRound: Result<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub TriangleExternalRect: Result<
        unsafe extern "C" fn(v: *const iv_vector2i, flags: ::std::os::raw::c_int) -> irect,
        ::libloading::Error,
    >,
    pub FillTriangularArea: Result<
        unsafe extern "C" fn(
            v: *const iv_vector2i,
            color: ::std::os::raw::c_int,
            externalRectFlags: ::std::os::raw::c_int,
        ) -> irect,
        ::libloading::Error,
    >,
    pub FillArea: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub FillAreaRect: Result<
        unsafe extern "C" fn(rect: *const irect, color: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub InvertArea: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub InvertAreaBW: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub ColorMapCreate: Result<
        unsafe extern "C" fn(size: ::std::os::raw::c_int) -> *mut icolor_map,
        ::libloading::Error,
    >,
    pub ColorMapDestroy:
        Result<unsafe extern "C" fn(map: *mut *mut icolor_map), ::libloading::Error>,
    pub InvertAreaMap: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            map: *mut icolor_map,
        ),
        ::libloading::Error,
    >,
    pub DimArea: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawSelection: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawCircle: Result<
        unsafe extern "C" fn(
            x0: ::std::os::raw::c_int,
            y0: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawHorizontalSeparator: Result<
        unsafe extern "C" fn(
            x0: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawCircleQuarter: Result<
        unsafe extern "C" fn(
            x0: ::std::os::raw::c_int,
            y0: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
            thickness: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            bg_color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub GetDefaultFrameCertifiedThickness: Result<
        unsafe extern "C" fn(thickness: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetDefaultFrameCertifiedRadius: Result<
        unsafe extern "C" fn(thickness: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawFrameCertified: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            thickness: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawFrameRectCertified: Result<
        unsafe extern "C" fn(rect: irect, thickness: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub DrawFrameCertifiedEx: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            thickness: ::std::os::raw::c_int,
            sides: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            bg_color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawFrameRectCertifiedEx: Result<
        unsafe extern "C" fn(
            rect: irect,
            thickness: ::std::os::raw::c_int,
            sides: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            bg_color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub processCircle: Result<
        unsafe extern "C" fn(
            center_x: ::std::os::raw::c_int,
            center_y: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            context: *mut ::std::os::raw::c_void,
            cb: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: ::std::os::raw::c_int,
                    arg3: ::std::os::raw::c_int,
                    arg4: ::std::os::raw::c_int,
                    arg5: ::std::os::raw::c_int,
                    arg6: ::std::os::raw::c_int,
                ),
            >,
        ),
        ::libloading::Error,
    >,
    pub invertCircle: Result<
        unsafe extern "C" fn(
            center_x: ::std::os::raw::c_int,
            center_y: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            canvas: *mut icanvas,
        ),
        ::libloading::Error,
    >,
    pub DrawPickOut: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            key: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub DrawPickOutEx: Result<
        unsafe extern "C" fn(rect: *const irect, key: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub DitherArea: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            levels: ::std::os::raw::c_int,
            method: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DitherAreaQuick2Level: Result<
        unsafe extern "C" fn(
            dx: ::std::os::raw::c_int,
            dy: ::std::os::raw::c_int,
            dw: ::std::os::raw::c_int,
            dh: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DitherAreaPattern2Level: Result<
        unsafe extern "C" fn(
            dx: ::std::os::raw::c_int,
            dy: ::std::os::raw::c_int,
            dw: ::std::os::raw::c_int,
            dh: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub MakeBW:
        Result<unsafe extern "C" fn(btmp: *mut iv_bitmap_ref, rect: iv_rect), ::libloading::Error>,
    pub QuickFloyd16Dither: Result<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_uchar,
            row_size: ::std::os::raw::c_int,
            left: ::std::os::raw::c_int,
            top: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub Stretch: Result<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_uchar,
            format: ::std::os::raw::c_int,
            sw: ::std::os::raw::c_int,
            sh: ::std::os::raw::c_int,
            scanline: ::std::os::raw::c_int,
            dx: ::std::os::raw::c_int,
            dy: ::std::os::raw::c_int,
            dw: ::std::os::raw::c_int,
            dh: ::std::os::raw::c_int,
            rotate: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub StretchArea: Result<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_uchar,
            format: ::std::os::raw::c_int,
            sx: ::std::os::raw::c_int,
            sy: ::std::os::raw::c_int,
            sw: ::std::os::raw::c_int,
            sh: ::std::os::raw::c_int,
            scanline: ::std::os::raw::c_int,
            dx: ::std::os::raw::c_int,
            dy: ::std::os::raw::c_int,
            dw: ::std::os::raw::c_int,
            dh: ::std::os::raw::c_int,
            rotate: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub StretchAreaBW: Result<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_uchar,
            format: ::std::os::raw::c_int,
            sx: ::std::os::raw::c_int,
            sy: ::std::os::raw::c_int,
            sw: ::std::os::raw::c_int,
            sh: ::std::os::raw::c_int,
            scanline: ::std::os::raw::c_int,
            dx: ::std::os::raw::c_int,
            dy: ::std::os::raw::c_int,
            dw: ::std::os::raw::c_int,
            dh: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SetCanvas: Result<unsafe extern "C" fn(c: *mut icanvas), ::libloading::Error>,
    pub GetCanvas: Result<unsafe extern "C" fn() -> *mut icanvas, ::libloading::Error>,
    pub Repaint: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub DrawFrame: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            icon: *mut ibitmap,
            title: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            clientarea: *mut irect,
        ),
        ::libloading::Error,
    >,
    pub DrawFrameDialog: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            icon: *mut ibitmap,
            title: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            clientarea: *mut irect,
        ),
        ::libloading::Error,
    >,
    pub CheckFramePointer: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            ptx: ::std::os::raw::c_int,
            pty: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawBorder: Result<
        unsafe extern "C" fn(
            border_rect: *const irect,
            border_size: ::std::os::raw::c_int,
            style: ::std::os::raw::c_int,
            radius: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawPager: Result<unsafe extern "C" fn(pager: *mut ipager), ::libloading::Error>,
    pub GetPagerRect:
        Result<unsafe extern "C" fn(pager: *mut ipager) -> irect, ::libloading::Error>,
    pub GetPagerHeight: Result<
        unsafe extern "C" fn(pager: *mut ipager) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IsPagerEvent: Result<
        unsafe extern "C" fn(
            pager: *mut ipager,
            type_: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PagerHandler: Result<
        unsafe extern "C" fn(
            pager: *mut ipager,
            type_: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawDiagonalHatch: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            step: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawDiagonalHatchLimits: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            step: ::std::os::raw::c_int,
            color: ::std::os::raw::c_int,
            limit: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: ::std::os::raw::c_int,
                    arg2: ::std::os::raw::c_int,
                ) -> ::std::os::raw::c_int,
            >,
        ),
        ::libloading::Error,
    >,
    pub Transparent: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            percent: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub TransparentRect: Result<
        unsafe extern "C" fn(rect: irect, percent: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub TransparentGradientData: Result<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_uchar,
            depth: ::std::os::raw::c_int,
            scanline: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub TransparentGradient: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            direction: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub TransparentGradientRect: Result<
        unsafe extern "C" fn(rect: irect, direction: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub LoadBitmap: Result<
        unsafe extern "C" fn(filename: *const ::std::os::raw::c_char) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub zLoadBitmap: Result<
        unsafe extern "C" fn(
            zf: *mut ::std::os::raw::c_void,
            filename: *const ::std::os::raw::c_char,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub SaveBitmap: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            bm: *const ibitmap,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub BitmapFromCanvas: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            rotate: ::std::os::raw::c_int,
            canvas: *mut icanvas,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub BitmapFromScreen: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub BitmapFromScreenR: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            rotate: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub NewBitmap: Result<
        unsafe extern "C" fn(w: ::std::os::raw::c_int, h: ::std::os::raw::c_int) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub SetLoadImageFlags:
        Result<unsafe extern "C" fn(flags: ::std::os::raw::c_int), ::libloading::Error>,
    pub LoadJPEG: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            br: ::std::os::raw::c_int,
            co: ::std::os::raw::c_int,
            proportional: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub LoadTIFF: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            br: ::std::os::raw::c_int,
            co: ::std::os::raw::c_int,
            proportional: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub SaveJPEG: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            bmp: *mut ibitmap,
            quality: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub LoadPNG: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            dither: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub LoadPNGStretch: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            proportional: ::std::os::raw::c_int,
            dither: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetImageType: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ImageSignatureType,
        ::libloading::Error,
    >,
    pub LoadImageToFormat: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            format: PixelFormat,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub LoadGIFToFormat: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            format: PixelFormat,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub LoadPNGToFormat: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            format: PixelFormat,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub LoadJPEGToFormat: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            format: PixelFormat,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub LoadTiffToFormat: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            format: PixelFormat,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub NewBitmapWithFormat: Result<
        unsafe extern "C" fn(
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            format: PixelFormat,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub LoadPNG8: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub LoadJPEG8: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub NewBitmap8: Result<
        unsafe extern "C" fn(
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub NewBitmap24: Result<
        unsafe extern "C" fn(
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub SavePNG: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            bmp: *const ibitmap,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetTransparentColor: Result<
        unsafe extern "C" fn(bmp: *mut *mut ibitmap, color: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub CopyBitmapDepth4To8:
        Result<unsafe extern "C" fn(bmp: *const ibitmap) -> *mut ibitmap, ::libloading::Error>,
    pub CopyBitmapDepth8To4:
        Result<unsafe extern "C" fn(bmp: *const ibitmap) -> *mut ibitmap, ::libloading::Error>,
    pub CopyBitmapDepth24To8:
        Result<unsafe extern "C" fn(bmp: *const ibitmap) -> *mut ibitmap, ::libloading::Error>,
    pub MoveBitmap: Result<
        unsafe extern "C" fn(bmp: *mut ibitmap, offset: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub MoveBitmapRight: Result<
        unsafe extern "C" fn(bm: *mut ibitmap, offset: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub FindAverageBitmapColor: Result<
        unsafe extern "C" fn(
            bmp: *const ibitmap,
            side: ::std::os::raw::c_int,
            percent: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ApplyContrastToBitmap8: Result<
        unsafe extern "C" fn(bmp: *mut ibitmap, contrast: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub BitmapStretchCopy: Result<
        unsafe extern "C" fn(
            bmp: *const ibitmap,
            sx: ::std::os::raw::c_int,
            sy: ::std::os::raw::c_int,
            sw: ::std::os::raw::c_int,
            sh: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub BitmapStretchProportionally: Result<
        unsafe extern "C" fn(
            bmp: *const ibitmap,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub BitmapStretchFill: Result<
        unsafe extern "C" fn(
            bmp: *const ibitmap,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub adjustBitmapDefault: Result<unsafe extern "C" fn(bmp: *mut ibitmap), ::libloading::Error>,
    pub adjustBitmapWithSaturationBrightnessAndDithering: Result<
        unsafe extern "C" fn(
            bmp: *mut ibitmap,
            saturation_table: *mut ::std::os::raw::c_int,
            value_table: *mut ::std::os::raw::c_int,
            dithering: bool,
        ),
        ::libloading::Error,
    >,
    pub adjustAreaWithSaturationBrightnessAndDithering: Result<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_uchar,
            scanline: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            saturation_table: *mut ::std::os::raw::c_int,
            value_table: *mut ::std::os::raw::c_int,
            dithering: bool,
        ),
        ::libloading::Error,
    >,
    pub adjustAreaWithLabColorsSaturation: Result<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_uchar,
            scanline: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            koef: f64,
        ),
        ::libloading::Error,
    >,
    pub adjustAreaWithVibrance: Result<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_uchar,
            scanline: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            vibrance: f32,
        ),
        ::libloading::Error,
    >,
    pub adjustAreaDefault: Result<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_uchar,
            scanline: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub ditherAndAdjustArea: Result<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_uchar,
            scanline: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            params: *mut AdjustmentParams,
        ),
        ::libloading::Error,
    >,
    pub adjustAreaWithBrightnessContrastGamma: Result<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_uchar,
            scanline: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            brightness: f64,
            contrast: f64,
            gamma: f64,
        ),
        ::libloading::Error,
    >,
    pub getBrightnessContrastGammaAdjustParams: Result<
        unsafe extern "C" fn(
            brightness: *mut ::std::os::raw::c_int,
            contrast: *mut ::std::os::raw::c_int,
            gamma: *mut ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub bm_stretch8: Result<
        unsafe extern "C" fn(
            in_: *mut ::std::os::raw::c_uchar,
            ix: ::std::os::raw::c_int,
            iy: ::std::os::raw::c_int,
            iw: ::std::os::raw::c_int,
            ih: ::std::os::raw::c_int,
            ilw: ::std::os::raw::c_int,
            out: *mut ::std::os::raw::c_uchar,
            ox: ::std::os::raw::c_int,
            oy: ::std::os::raw::c_int,
            ow: ::std::os::raw::c_int,
            oh: ::std::os::raw::c_int,
            olw: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawBitmap: Result<
        unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int, b: *const ibitmap),
        ::libloading::Error,
    >,
    pub DrawBitmapArea: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            b: *const ibitmap,
            bx: ::std::os::raw::c_int,
            by: ::std::os::raw::c_int,
            bw: ::std::os::raw::c_int,
            bh: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawBitmapRect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            b: *const ibitmap,
            flags: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DrawBitmapRect2:
        Result<unsafe extern "C" fn(rect: *const irect, b: *const ibitmap), ::libloading::Error>,
    pub StretchBitmap: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            src: *const ibitmap,
            flags: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub TileBitmap: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            src: *const ibitmap,
        ),
        ::libloading::Error,
    >,
    pub CopyBitmap:
        Result<unsafe extern "C" fn(bm: *const ibitmap) -> *mut ibitmap, ::libloading::Error>,
    pub MirrorBitmap: Result<
        unsafe extern "C" fn(bm: *mut ibitmap, m: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub iv_inv_bitmap: Result<unsafe extern "C" fn(bitmap: *mut ibitmap), ::libloading::Error>,
    pub iv_copy_inv_bitmap:
        Result<unsafe extern "C" fn(bitmap: *const ibitmap) -> *mut ibitmap, ::libloading::Error>,
    pub EnumFonts:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub EnumFontsFromDirectory: Result<
        unsafe extern "C" fn(
            directory1: *const ::std::os::raw::c_char,
            directory2: *const ::std::os::raw::c_char,
        ) -> *mut *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub EnumFontsEx: Result<unsafe extern "C" fn() -> *mut FontForSort, ::libloading::Error>,
    pub EnumFontsFromDirectoryEx: Result<
        unsafe extern "C" fn(
            directory1: *const ::std::os::raw::c_char,
            directory2: *const ::std::os::raw::c_char,
        ) -> *mut FontForSort,
        ::libloading::Error,
    >,
    pub FreeFontsForSort:
        Result<unsafe extern "C" fn(fonts: *mut FontForSort), ::libloading::Error>,
    pub OpenFont: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
            aa: ::std::os::raw::c_int,
        ) -> *mut ifont,
        ::libloading::Error,
    >,
    pub OpenFontEx: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
            line_height: ::std::os::raw::c_int,
            aa: ::std::os::raw::c_int,
        ) -> *mut ifont,
        ::libloading::Error,
    >,
    pub CloseFont: Result<unsafe extern "C" fn(f: *mut ifont), ::libloading::Error>,
    pub SetFont: Result<
        unsafe extern "C" fn(font: *const ifont, color: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub GetFont: Result<unsafe extern "C" fn() -> *const ifont, ::libloading::Error>,
    pub DrawString: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub DrawStringR: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub TextRectHeight: Result<
        unsafe extern "C" fn(
            width: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub TextRectHeightEx: Result<
        unsafe extern "C" fn(
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub MinimalTextRectWidth: Result<
        unsafe extern "C" fn(
            w: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawTextRect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub DrawTextRect2: Result<
        unsafe extern "C" fn(
            rect: *const irect,
            s: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub DrawTextRect3: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            s: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            height: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub CharWidth: Result<
        unsafe extern "C" fn(c: ::std::os::raw::c_ushort) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub StringWidthExt: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            l: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub StringWidth: Result<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetMultilineStringWidth: Result<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            area_width: ::std::os::raw::c_int,
            font: *mut ifont,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawSymbol: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            symbol: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub RegisterFontList: Result<
        unsafe extern "C" fn(fontlist: *mut *mut ifont, count: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub SetTextStrength:
        Result<unsafe extern "C" fn(n: ::std::os::raw::c_int), ::libloading::Error>,
    pub FullUpdate: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub FullUpdateHQ: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SoftUpdate: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SoftUpdateHQ: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PartialUpdate: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdateBlack: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdateBW: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdateHQ: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub PartialUpdateDU4: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DynamicUpdate: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DynamicUpdateWithoutImprovingLinesColor: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DynamicUpdateBW: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_empty_update_area: Result<unsafe extern "C" fn() -> iv_update_area, ::libloading::Error>,
    pub iv_new_update_area: Result<
        unsafe extern "C" fn(rect: irect, prev_rect: irect, need_update: bool) -> iv_update_area,
        ::libloading::Error,
    >,
    pub iv_new_ptr_update_area: Result<
        unsafe extern "C" fn(
            rect: irect,
            prev_rect: irect,
            need_update: *mut bool,
        ) -> iv_update_area,
        ::libloading::Error,
    >,
    pub iv_update_screen: Result<
        unsafe extern "C" fn(
            update_area: iv_update_area,
            partial_update: ::std::option::Option<
                unsafe extern "C" fn(
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                ),
            >,
        ),
        ::libloading::Error,
    >,
    pub iv_update_many: Result<
        unsafe extern "C" fn(
            update_area: *mut iv_update_area,
            count: usize,
            partial_update: ::std::option::Option<
                unsafe extern "C" fn(
                    x: ::std::os::raw::c_int,
                    y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int,
                    h: ::std::os::raw::c_int,
                ),
            >,
        ),
        ::libloading::Error,
    >,
    pub DynamicUpdateA2: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub ExitUpdateA2: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub IsInA2Update: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub FineUpdate: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub FineUpdateSupported:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub HQUpdateSupported:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ScheduleUpdate: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            bw: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub WaitForUpdateComplete: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetWaveformTimes:
        Result<unsafe extern "C" fn(result: *mut ::std::os::raw::c_ushort), ::libloading::Error>,
    pub SetEventHandler:
        Result<unsafe extern "C" fn(hproc: iv_handler) -> iv_handler, ::libloading::Error>,
    pub SetEventHandlerEx:
        Result<unsafe extern "C" fn(hproc: iv_handler) -> iv_handler, ::libloading::Error>,
    pub GetEventHandler: Result<unsafe extern "C" fn() -> iv_handler, ::libloading::Error>,
    pub SendEvent: Result<
        unsafe extern "C" fn(
            hproc: iv_handler,
            type_: ::std::os::raw::c_int,
            par1: ::std::os::raw::c_int,
            par2: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SendEventEx: Result<
        unsafe extern "C" fn(
            hproc: iv_handler,
            type_: ::std::os::raw::c_int,
            par1: ::std::os::raw::c_int,
            par2: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub GetCurrentEventExData:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void, ::libloading::Error>,
    pub ProcessEventLoop: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ProcessEventLoopQuick: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub FlushEvents: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_evttype: Result<
        unsafe extern "C" fn(type_: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub IsAnyEvents: Result<unsafe extern "C" fn() -> ::std::os::raw::c_char, ::libloading::Error>,
    pub PrepareForLoop: Result<unsafe extern "C" fn(hproc: iv_handler), ::libloading::Error>,
    pub PrepareForLoopEx: Result<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void, hproc: iv_ctx_handler),
        ::libloading::Error,
    >,
    pub IsEventLoopBlocked:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetEventLoopBlockIntervalMicroseconds:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetEventsNotifier:
        Result<unsafe extern "C" fn(func: iv_eventsnotifierfunc), ::libloading::Error>,
    pub ClearOnExit: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetHardTimer: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            tproc: iv_timerproc,
            ms: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SetHardTimerEx: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            tproc: iv_timerprocEx,
            context: *mut ::std::os::raw::c_void,
            ms: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SetWeakTimer: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            tproc: iv_timerproc,
            ms: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SetWeakTimerEx: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            tp: iv_timerprocEx,
            context: *mut ::std::os::raw::c_void,
            ms: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub QueryTimer: Result<
        unsafe extern "C" fn(tp: iv_timerproc) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub QueryTimerEx: Result<
        unsafe extern "C" fn(
            tp: iv_timerprocEx,
            context: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub ClearTimer: Result<unsafe extern "C" fn(tproc: iv_timerproc), ::libloading::Error>,
    pub ClearTimerEx: Result<
        unsafe extern "C" fn(tproc: iv_timerprocEx, context: *mut ::std::os::raw::c_void),
        ::libloading::Error,
    >,
    pub ClearTimerByName:
        Result<unsafe extern "C" fn(name: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub OpenMenu: Result<
        unsafe extern "C" fn(
            menu: *mut imenu,
            pos: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            hproc: iv_menuhandler,
        ),
        ::libloading::Error,
    >,
    pub OpenMenuEx: Result<
        unsafe extern "C" fn(
            menu: *mut imenuex,
            pos: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            hproc: iv_menuhandler,
        ),
        ::libloading::Error,
    >,
    pub UpdateMenuEx: Result<unsafe extern "C" fn(menu: *mut imenuex), ::libloading::Error>,
    pub OpenContextMenu:
        Result<unsafe extern "C" fn(menu: *const icontext_menu), ::libloading::Error>,
    pub SetContextMenu:
        Result<unsafe extern "C" fn(menu: *const icontext_menu), ::libloading::Error>,
    pub CreateContextMenu: Result<
        unsafe extern "C" fn(id: *const ::std::os::raw::c_char) -> *mut icontext_menu,
        ::libloading::Error,
    >,
    pub CloseContextMenu:
        Result<unsafe extern "C" fn(menu: *mut icontext_menu), ::libloading::Error>,
    pub OpenMenu3x3: Result<
        unsafe extern "C" fn(
            mbitmap: *const ibitmap,
            strings: *mut *const ::std::os::raw::c_char,
            hproc: iv_menuhandler,
        ),
        ::libloading::Error,
    >,
    pub GetMenuRect: Result<unsafe extern "C" fn(menu: *const imenu) -> irect, ::libloading::Error>,
    pub GetMenuRectEx:
        Result<unsafe extern "C" fn(menu: *const imenuex) -> irect, ::libloading::Error>,
    pub OpenList: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            background: *const ibitmap,
            itemw: ::std::os::raw::c_int,
            itemh: ::std::os::raw::c_int,
            itemcount: ::std::os::raw::c_int,
            cpos: ::std::os::raw::c_int,
            hproc: iv_listhandler,
        ),
        ::libloading::Error,
    >,
    pub SetListHeaderLevel:
        Result<unsafe extern "C" fn(level: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetListHeaderLevel:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenDummyList: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            background: *const ibitmap,
            text: *mut ::std::os::raw::c_char,
            hproc: iv_listhandler,
        ),
        ::libloading::Error,
    >,
    pub EnumKeyboards:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub LoadKeyboard:
        Result<unsafe extern "C" fn(kbdlang: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub GetKeyboardFlags:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenKeyboard: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            maxlen: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            hproc: iv_keyboardhandler,
        ),
        ::libloading::Error,
    >,
    pub OpenKeyboardEx: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            maxlen: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            hproc: iv_keyboardhandlerex,
            cb_data: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub returnFocusToKeyboard: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub KeyboardProcessTextChanges: Result<
        unsafe extern "C" fn(
            text_before: *const ::std::os::raw::c_char,
            text_after: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub KeyboardNotifyTextChanges: Result<
        unsafe extern "C" fn(
            text_before: *const ::std::os::raw::c_char,
            text_after: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub setKeyboardTextChangeCallback: Result<
        unsafe extern "C" fn(
            cb: keyboard_text_change_callback,
            context: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub DrawKeyboard: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub OpenCustomKeyboard: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            maxlen: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            hproc: iv_keyboardhandler,
        ),
        ::libloading::Error,
    >,
    pub CloseKeyboard: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetKeyboardRect: Result<unsafe extern "C" fn(rect: *mut irect), ::libloading::Error>,
    pub GetKeyboardRectWithParams: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            buffer: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> irect,
        ::libloading::Error,
    >,
    pub IsKeyboardOpened:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setDrawTopLine: Result<
        unsafe extern "C" fn(kbd_draw_top_line_: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub OpenPageSelector:
        Result<unsafe extern "C" fn(hproc: iv_pageselecthandler), ::libloading::Error>,
    pub OpenTimeEdit: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            intime: ::std::os::raw::c_long,
            hproc: iv_timeedithandler,
        ),
        ::libloading::Error,
    >,
    pub OpenFontSelector: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            font: *const ::std::os::raw::c_char,
            with_size: ::std::os::raw::c_int,
            hproc: iv_fontselecthandler,
        ),
        ::libloading::Error,
    >,
    pub OpenFontSelectorEx:
        Result<unsafe extern "C" fn(menu: *const ifont_menu), ::libloading::Error>,
    pub GetFontMenuStruct: Result<unsafe extern "C" fn() -> ifont_menu, ::libloading::Error>,
    pub ClearFontMenuStruct:
        Result<unsafe extern "C" fn(menu: *mut ifont_menu), ::libloading::Error>,
    pub ClearFontListStruct:
        Result<unsafe extern "C" fn(list: *mut ifont_list), ::libloading::Error>,
    pub SetFontMenuStruct: Result<unsafe extern "C" fn(menu: *mut ifont_menu), ::libloading::Error>,
    pub OpenBookmarks: Result<
        unsafe extern "C" fn(
            page: ::std::os::raw::c_int,
            position: ::std::os::raw::c_longlong,
            bmklist: *mut ::std::os::raw::c_int,
            poslist: *mut ::std::os::raw::c_longlong,
            bmkcount: *mut ::std::os::raw::c_int,
            maxbmks: ::std::os::raw::c_int,
            hproc: iv_bmkhandler,
        ),
        ::libloading::Error,
    >,
    pub SwitchBookmark: Result<
        unsafe extern "C" fn(
            page: ::std::os::raw::c_int,
            position: ::std::os::raw::c_longlong,
            bmklist: *mut ::std::os::raw::c_int,
            poslist: *mut ::std::os::raw::c_longlong,
            bmkcount: *mut ::std::os::raw::c_int,
            maxbmks: ::std::os::raw::c_int,
            hproc: iv_bmkhandler,
        ),
        ::libloading::Error,
    >,
    pub OpenRotateBox: Result<unsafe extern "C" fn(hproc: iv_rotatehandler), ::libloading::Error>,
    pub Message: Result<
        unsafe extern "C" fn(
            icon: ::std::os::raw::c_int,
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
            timeout: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub Dialog: Result<
        unsafe extern "C" fn(
            icon: ::std::os::raw::c_int,
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
            button1: *const ::std::os::raw::c_char,
            button2: *const ::std::os::raw::c_char,
            hproc: iv_dialoghandler,
        ),
        ::libloading::Error,
    >,
    pub Dialog3: Result<
        unsafe extern "C" fn(
            icon: ::std::os::raw::c_int,
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
            button1: *const ::std::os::raw::c_char,
            button2: *const ::std::os::raw::c_char,
            button3: *const ::std::os::raw::c_char,
            hproc: iv_dialoghandler,
        ),
        ::libloading::Error,
    >,
    pub DialogSynchro: Result<
        unsafe extern "C" fn(
            icon: ::std::os::raw::c_int,
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
            button1: *const ::std::os::raw::c_char,
            button2: *const ::std::os::raw::c_char,
            button3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub CloseDialog: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub OpenProgressbar: Result<
        unsafe extern "C" fn(
            icon: ::std::os::raw::c_int,
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            hproc: iv_dialoghandler,
        ),
        ::libloading::Error,
    >,
    pub UpdateProgressbar: Result<
        unsafe extern "C" fn(
            text: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub CloseProgressbar: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ShowHourglassForce: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ShowHourglass: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ShowHourglassAt: Result<
        unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub ShowHourglassForceAt: Result<
        unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub ShowPureHourglass: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ShowPureHourglassForce: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub HideHourglass: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub DisableExitHourglass: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub LockDevice: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetManualPanelUpdates: Result<
        unsafe extern "C" fn(enable: ::std::os::raw::c_int, handler: iv_panelupdateshandler),
        ::libloading::Error,
    >,
    pub SetReadingMode: Result<
        unsafe extern "C" fn(
            enable: ::std::os::raw::c_int,
            after_time: ::std::os::raw::c_int,
            update: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SetPanelType:
        Result<unsafe extern "C" fn(type_: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetPanelType: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IvAddPanelTypeChangeHandler: Result<
        unsafe extern "C" fn(
            ctx: *mut ::std::os::raw::c_void,
            handler: iv_panel_type_change_handler,
        ) -> iv_handler_descriptor,
        ::libloading::Error,
    >,
    pub IvRemovePanelTypeChangeHandler: Result<
        unsafe extern "C" fn(descriptor: iv_handler_descriptor) -> bool,
        ::libloading::Error,
    >,
    pub SetFocusOnPanel:
        Result<unsafe extern "C" fn(focus: ::std::os::raw::c_int), ::libloading::Error>,
    pub IsPanelFocused:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetShowPanelReader:
        Result<unsafe extern "C" fn(show: ::std::os::raw::c_int), ::libloading::Error>,
    pub IsShowPanelReader:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetPanelSeparatorEnabled: Result<
        unsafe extern "C" fn(enable: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IsPanelSeparatorEnabled:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub InitPanel: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetPanelKeyForFullScreenEnabled:
        Result<unsafe extern "C" fn(key: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub SetPanelTransparent:
        Result<unsafe extern "C" fn(value: ::std::os::raw::c_int), ::libloading::Error>,
    pub SetShowPanelCenterIcon:
        Result<unsafe extern "C" fn(show: ::std::os::raw::c_int), ::libloading::Error>,
    pub StartPanelProgress: Result<
        unsafe extern "C" fn(progress: ::std::os::raw::c_int, timeoutMs: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub StopPanelProgress: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ShowPanelPackageProgress: Result<
        unsafe extern "C" fn(progress: ::std::os::raw::c_int, timeout: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub DrawPanel: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            text: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawPanel2: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            text: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            readingModeEnable: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawPanel3: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            currentPage: ::std::os::raw::c_int,
            totalPages: ::std::os::raw::c_int,
            readingModeEnable: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawPanel4: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            bookName: *const ::std::os::raw::c_char,
            currentPage: ::std::os::raw::c_int,
            totalPages: ::std::os::raw::c_int,
            readingModeEnable: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DrawPanel5: Result<
        unsafe extern "C" fn(
            icon: *const ibitmap,
            text: *const ::std::os::raw::c_char,
            title: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            readingModeEnable: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub OpenControlPanel:
        Result<unsafe extern "C" fn(ctx: *mut control_panel), ::libloading::Error>,
    pub PanelHeight: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PanelHeightFBOffset:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetKeyboardRate: Result<
        unsafe extern "C" fn(t1: ::std::os::raw::c_int, t2: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub QuickNavigatorSupported: Result<
        unsafe extern "C" fn(flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub QuickNavigator: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub SetQuickNavigatorXY: Result<
        unsafe extern "C" fn(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub DrawApplicationCaption: Result<
        unsafe extern "C" fn(caption: *const ::std::os::raw::c_char, title_rect: *const irect),
        ::libloading::Error,
    >,
    pub GetCaptionHeight:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetApplicationCaptionHeight:
        Result<unsafe extern "C" fn(h: ::std::os::raw::c_int), ::libloading::Error>,
    pub LoadApplicationCaptionProperties:
        Result<unsafe extern "C" fn() -> *mut iapp_caption, ::libloading::Error>,
    pub LoadTaskManagerProperties:
        Result<unsafe extern "C" fn() -> *mut itaskmgr, ::libloading::Error>,
    pub LoadPagerProperties: Result<unsafe extern "C" fn() -> *mut ipager, ::libloading::Error>,
    pub LoadSelectionProperties: Result<
        unsafe extern "C" fn(key: *const ::std::os::raw::c_char) -> *mut iselection,
        ::libloading::Error,
    >,
    pub LoadContextMenuProperties:
        Result<unsafe extern "C" fn() -> *mut icontext_menu_properties, ::libloading::Error>,
    pub GetAppGlobalStyle: Result<unsafe extern "C" fn() -> AppStyles, ::libloading::Error>,
    pub GetAppStyle: Result<
        unsafe extern "C" fn(key: *const ::std::os::raw::c_char) -> AppStyles,
        ::libloading::Error,
    >,
    pub GetAppStyleEx: Result<
        unsafe extern "C" fn(key: *const ::std::os::raw::c_char) -> *mut iappstyle,
        ::libloading::Error,
    >,
    pub GetFontSelectorProperties:
        Result<unsafe extern "C" fn() -> *mut font_selector_properties, ::libloading::Error>,
    pub GetCustomFontString:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub GetGlobalConfig: Result<unsafe extern "C" fn() -> *mut iconfig, ::libloading::Error>,
    pub OpenConfig: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            ce: *mut iconfigedit,
        ) -> *mut iconfig,
        ::libloading::Error,
    >,
    pub RefreshConfig: Result<
        unsafe extern "C" fn(cfg: *mut *mut iconfig) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SaveConfig: Result<
        unsafe extern "C" fn(cfg: *mut iconfig) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub CloseConfig: Result<unsafe extern "C" fn(cfg: *mut iconfig), ::libloading::Error>,
    pub CloseConfigNoSave: Result<unsafe extern "C" fn(cfg: *mut iconfig), ::libloading::Error>,
    pub ReadInt: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            deflt: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ReadLongLong: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            deflt: ::std::os::raw::c_longlong,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub ReadString: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            deflt: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ReadSecret: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            deflt: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub WriteInt: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub WriteLongLong: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_longlong,
        ),
        ::libloading::Error,
    >,
    pub WriteString: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub WriteSecret: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub WriteIntVolatile: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            value: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub WriteStringVolatile: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub DeleteInt: Result<
        unsafe extern "C" fn(cfg: *mut iconfig, name: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub DeleteString: Result<
        unsafe extern "C" fn(cfg: *mut iconfig, name: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub SetConfigEditorBackground:
        Result<unsafe extern "C" fn(bmp: *mut ibitmap), ::libloading::Error>,
    pub OpenConfigEditor: Result<
        unsafe extern "C" fn(
            header: *const ::std::os::raw::c_char,
            cfg: *mut iconfig,
            ce: *mut iconfigedit,
            hproc: iv_confighandler,
            cproc: iv_itemchangehandler,
        ),
        ::libloading::Error,
    >,
    pub OpenConfigSubmenuExt: Result<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            ice: *mut iconfigedit,
            pos: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub OpenConfigSubmenu: Result<
        unsafe extern "C" fn(title: *const ::std::os::raw::c_char, ice: *mut iconfigedit),
        ::libloading::Error,
    >,
    pub UpdateCurrentConfigPage: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub UpdateConfigPage: Result<
        unsafe extern "C" fn(title: *const ::std::os::raw::c_char, ice: *mut iconfigedit),
        ::libloading::Error,
    >,
    pub CloseConfigLevel: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub NotifyConfigChanged: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ClearConfig: Result<unsafe extern "C" fn(cfg: *mut iconfig), ::libloading::Error>,
    pub EnumerateConfig: Result<
        unsafe extern "C" fn(
            cfg: *mut iconfig,
            func: ::std::option::Option<
                unsafe extern "C" fn(
                    name: *mut ::std::os::raw::c_char,
                    value: *mut ::std::os::raw::c_void,
                    userdata: *mut ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
            user_data: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub GetKeyMapping: Result<
        unsafe extern "C" fn(
            act0: *mut *const ::std::os::raw::c_char,
            act1: *mut *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub GetKeyMappingEx: Result<
        unsafe extern "C" fn(
            what: ::std::os::raw::c_int,
            act0: *mut *const ::std::os::raw::c_char,
            act1: *mut *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub GetKeyMappingExtended: Result<
        unsafe extern "C" fn(
            type_: keymap_t,
            act0: *mut *const ::std::os::raw::c_char,
            act1: *mut *const ::std::os::raw::c_char,
            act2: *mut *const ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub AdjustDirectionKeys: Result<
        unsafe extern "C" fn(key: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub QueryDeviceButtons:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_ulong, ::libloading::Error>,
    pub IsJoystickButtonsPresent:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub MultitaskingSupported:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub NewTask: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            args: *const *const ::std::os::raw::c_char,
            appname: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            icon: *const ibitmap,
            flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NewTaskEx: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            args: *const *mut ::std::os::raw::c_char,
            appname: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            icon: *const ibitmap,
            flags: ::std::os::raw::c_uint,
            run_as_reader_if_needed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub OpenTask: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NewSubtask: Result<
        unsafe extern "C" fn(name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SwitchSubtask: Result<
        unsafe extern "C" fn(subtask: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SubtaskFinished:
        Result<unsafe extern "C" fn(subtask: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetCurrentTask:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetActiveTask: Result<
        unsafe extern "C" fn(task: *mut ::std::os::raw::c_int, subtask: *mut ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub IsTaskActive: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetPreviousTask: Result<
        unsafe extern "C" fn(task: *mut ::std::os::raw::c_int, subtask: *mut ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub GetPreviousTaskInStack: Result<
        unsafe extern "C" fn(task: *mut ::std::os::raw::c_int, subtask: *mut ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub GetTaskList: Result<
        unsafe extern "C" fn(
            list: *mut ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetTaskInfo: Result<
        unsafe extern "C" fn(task: ::std::os::raw::c_int) -> *mut taskinfo,
        ::libloading::Error,
    >,
    pub FindTaskByBook: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            task: *mut ::std::os::raw::c_int,
            subtask: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub FindTaskByAppName: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetTaskParameters: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            appname: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
            icon: *mut ibitmap,
            flags: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetSubtaskInfo: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            subtask: ::std::os::raw::c_int,
            name: *const ::std::os::raw::c_char,
            book: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetActiveTask: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            subtask: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GoToBackground: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub CloseTask: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            subtask: ::std::os::raw::c_int,
            force: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendEventTo: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
            par1: ::std::os::raw::c_int,
            par2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendEventSyncTo: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
            par1: ::std::os::raw::c_int,
            par2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendMessageTo: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            request: ::std::os::raw::c_int,
            message: *mut ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetRequestListener: Result<
        unsafe extern "C" fn(
            request: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            hproc: iv_requestlistener,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetRequestListenerEx: Result<
        unsafe extern "C" fn(
            request: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            ctx: *mut ::std::os::raw::c_void,
            hproc: iv_requestlistener_ex,
        ) -> iv_set_request_listener_ex_result,
        ::libloading::Error,
    >,
    pub SendRequest: Result<
        unsafe extern "C" fn(
            request: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
            timeout: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendRequestNoWait: Result<
        unsafe extern "C" fn(
            request: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendRequestTo: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            request: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
            timeout: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendRequestToNoWait: Result<
        unsafe extern "C" fn(
            task: ::std::os::raw::c_int,
            request: ::std::os::raw::c_int,
            data: *mut ::std::os::raw::c_void,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SendGlobalRequest: Result<
        unsafe extern "C" fn(param: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetMessageHandler: Result<unsafe extern "C" fn(hproc: iv_msghandler), ::libloading::Error>,
    pub OpenTaskList: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetTaskFramebuffer: Result<
        unsafe extern "C" fn(task: ::std::os::raw::c_int) -> *mut icanvas,
        ::libloading::Error,
    >,
    pub GetTaskFramebufferInfo: Result<
        unsafe extern "C" fn(task: ::std::os::raw::c_int) -> *mut iv_fbinfo,
        ::libloading::Error,
    >,
    pub ReleaseTaskFramebuffer: Result<unsafe extern "C" fn(fb: *mut icanvas), ::libloading::Error>,
    pub iv_wait_task_activation:
        Result<unsafe extern "C" fn(timeout: ::std::os::raw::c_int), ::libloading::Error>,
    pub CopyActiveFb: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub CopyTaskFb: Result<unsafe extern "C" fn(task: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetFrontlightVersion:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetFrontlightState:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetFrontlightState:
        Result<unsafe extern "C" fn(flstate: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetFrontlightEnabled:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetFrontlightEnabled:
        Result<unsafe extern "C" fn(enabled: ::std::os::raw::c_int), ::libloading::Error>,
    pub SetFrontlightStateEx: Result<
        unsafe extern "C" fn(flstate: ::std::os::raw::c_int, temporary: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub OpenFrontLightConfig: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SwitchFrontlightState: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetFrontlightColor:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetFrontlightColor:
        Result<unsafe extern "C" fn(color: ::std::os::raw::c_int), ::libloading::Error>,
    pub hash_new: Result<
        unsafe extern "C" fn(prime: ::std::os::raw::c_int) -> *mut ihash,
        ::libloading::Error,
    >,
    pub hash_add: Result<
        unsafe extern "C" fn(
            h: *mut ihash,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub hash_delete: Result<
        unsafe extern "C" fn(h: *mut ihash, name: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub hash_find: Result<
        unsafe extern "C" fn(
            h: *mut ihash,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub vhash_new: Result<
        unsafe extern "C" fn(
            prime: ::std::os::raw::c_int,
            addproc: iv_hashaddproc,
            delproc: iv_hashdelproc,
        ) -> *mut ihash,
        ::libloading::Error,
    >,
    pub vhash_add: Result<
        unsafe extern "C" fn(
            h: *mut ihash,
            name: *const ::std::os::raw::c_char,
            value: *const ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub vhash_delete: Result<
        unsafe extern "C" fn(h: *mut ihash, name: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub vhash_find: Result<
        unsafe extern "C" fn(
            h: *mut ihash,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub hash_clear: Result<unsafe extern "C" fn(h: *mut ihash), ::libloading::Error>,
    pub hash_destroy: Result<unsafe extern "C" fn(h: *mut ihash), ::libloading::Error>,
    pub hash_count:
        Result<unsafe extern "C" fn(h: *mut ihash) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub hash_enumerate: Result<
        unsafe extern "C" fn(
            h: *mut ihash,
            cmpproc: iv_hashcmpproc,
            enumproc: iv_hashenumproc,
            userdata: *mut ::std::os::raw::c_void,
        ),
        ::libloading::Error,
    >,
    pub hash_merge: Result<
        unsafe extern "C" fn(base_hash: *mut ihash, hash_to_merge: *mut ihash) -> *mut ihash,
        ::libloading::Error,
    >,
    pub hash_merge_to: Result<
        unsafe extern "C" fn(
            base_hash: *mut ihash,
            hash_to_merge: *mut ihash,
            dest_hash: *mut ihash,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub hash_copy:
        Result<unsafe extern "C" fn(source_hash: *mut ihash) -> *mut ihash, ::libloading::Error>,
    pub hash_copy_to: Result<
        unsafe extern "C" fn(
            source_hash: *mut ihash,
            dest_hash: *mut ihash,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_stat: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            st: *mut stat,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_access: Result<
        unsafe extern "C" fn(
            pathname: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_fopen: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub iv_fread: Result<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            f: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_fwrite: Result<
        unsafe extern "C" fn(
            buffer: *const ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            f: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_fseek: Result<
        unsafe extern "C" fn(
            f: *mut FILE,
            offset: ::std::os::raw::c_long,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_ftell:
        Result<unsafe extern "C" fn(f: *mut FILE) -> ::std::os::raw::c_long, ::libloading::Error>,
    pub iv_fclose:
        Result<unsafe extern "C" fn(f: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_fclose_no_sync:
        Result<unsafe extern "C" fn(f: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_fgetc:
        Result<unsafe extern "C" fn(f: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_fgets: Result<
        unsafe extern "C" fn(
            string: *mut ::std::os::raw::c_char,
            n: ::std::os::raw::c_int,
            f: *mut FILE,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub iv_mkdir: Result<
        unsafe extern "C" fn(
            pathname: *const ::std::os::raw::c_char,
            mode: mode_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_buildpath:
        Result<unsafe extern "C" fn(filename: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub iv_opendir: Result<
        unsafe extern "C" fn(dirname: *const ::std::os::raw::c_char) -> *mut DIR,
        ::libloading::Error,
    >,
    pub iv_readdir: Result<unsafe extern "C" fn(dir: *mut DIR) -> *mut dirent, ::libloading::Error>,
    pub iv_closedir:
        Result<unsafe extern "C" fn(dir: *mut DIR) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_unlink: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_rmdir: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_truncate: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_rename: Result<
        unsafe extern "C" fn(
            oldname: *const ::std::os::raw::c_char,
            newname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_preload: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, count: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub iv_sync: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_validate_name: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_setbgresponse:
        Result<unsafe extern "C" fn(t: ::std::os::raw::c_int), ::libloading::Error>,
    pub Path2String: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            string: *mut ::std::os::raw::c_char,
            maxLength: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_ipc_request: Result<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_long,
            attr: ::std::os::raw::c_long,
            data: *mut ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub iv_ipc_request_secure: Result<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_long,
            param: ::std::os::raw::c_long,
            data: *mut ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub iv_ipc_cmd: Result<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_long,
            param: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub iv_ipc_request_with_timeout: Result<
        unsafe extern "C" fn(
            type_: ::std::os::raw::c_long,
            param: ::std::os::raw::c_long,
            data: *mut ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_int,
            outlen: ::std::os::raw::c_int,
            timeout_ms: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub currentLang:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub EnumLanguages:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub DumpLanguage: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub LoadLanguageFromStream: Result<
        unsafe extern "C" fn(lang: *const ::std::os::raw::c_char, f: *mut FILE, ef: *mut FILE),
        ::libloading::Error,
    >,
    pub LoadLanguage:
        Result<unsafe extern "C" fn(lang: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub AddTranslation: Result<
        unsafe extern "C" fn(
            label: *const ::std::os::raw::c_char,
            trans: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub GetCurrentLangText: Result<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetLangText: Result<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub FormattedDate: Result<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            max_size: usize,
            t: time_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetLangTextF: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            ...
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetLangTextPlural: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            amount: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub iv_lang_format: Result<
        unsafe extern "C" fn(
            dst: *mut ::std::os::raw::c_char,
            max_size: usize,
            format_key: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetLangTime: Result<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            size: usize,
            key: *const ::std::os::raw::c_char,
            t: *mut tm,
            current_time: *mut tm,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetRTLBook: Result<unsafe extern "C" fn(rtl: ::std::os::raw::c_int), ::libloading::Error>,
    pub IsRTL: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsBookRTL: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub EnumProfiles:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetProfileType: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub EnumProfileAvatars:
        Result<unsafe extern "C" fn() -> *mut *mut ibitmap, ::libloading::Error>,
    pub GetProfileAvatar: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub SetProfileAvatar: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            ava: *mut ibitmap,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub RenameProfile: Result<
        unsafe extern "C" fn(
            oldname: *const ::std::os::raw::c_char,
            newname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DeleteProfile: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetCurrentProfile:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub SetCurrentProfile: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, flags: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub GetProfilesCountAfterEnum:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenProfileSelector: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ScanProfiles: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            type_: ::std::os::raw::c_int,
            profiles: *mut iprofiles,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetLocalProfilesLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetSDProfilesLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetProfilesLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub CreateProfileStruct: Result<unsafe extern "C" fn() -> iprofile, ::libloading::Error>,
    pub CreateProfilesStruct: Result<unsafe extern "C" fn() -> iprofiles, ::libloading::Error>,
    pub ClearProfilesStruct:
        Result<unsafe extern "C" fn(profiles: *mut iprofiles), ::libloading::Error>,
    pub ClearProfileStruct:
        Result<unsafe extern "C" fn(profile: *mut iprofile), ::libloading::Error>,
    pub GetProfilesList: Result<
        unsafe extern "C" fn(profiles: *mut iprofiles) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub CreateProfile: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DeleteProfileEx: Result<
        unsafe extern "C" fn(profile: *const iprofile) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub RenameProfileEx: Result<
        unsafe extern "C" fn(
            profile: *const iprofile,
            new_name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetCurrentProfileEx: Result<
        unsafe extern "C" fn(profile: *mut iprofile) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetCurrentProfileEx: Result<
        unsafe extern "C" fn(profile: *const iprofile) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetProfilesCount:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub EnumThemes:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub OpenTheme:
        Result<unsafe extern "C" fn(path: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub GetResource: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: *const ibitmap,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetThemeInt: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetThemeString: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetLayoutFromTheme: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetThemeFont: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            deflt: *const ::std::os::raw::c_char,
        ) -> *mut ifont,
        ::libloading::Error,
    >,
    pub GetThemeRect: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            rect: *mut irect,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub GetKeyResource: Result<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_char,
            deflt: *const ibitmap,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub IsResourcePresent: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub GetSupportedFileTypes:
        Result<unsafe extern "C" fn() -> *mut iv_filetype, ::libloading::Error>,
    pub GetSupportedFileTypesLength:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetBookInfo: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut bookinfo,
        ::libloading::Error,
    >,
    pub GetBookInfoExt: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            separator: *const ::std::os::raw::c_char,
        ) -> *mut bookinfo,
        ::libloading::Error,
    >,
    pub GetBookISBN: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetBookCover: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetBookCoverEx: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            pixel_format: PixelFormat,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub GetBookSyncStatus: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> BookSyncStatus,
        ::libloading::Error,
    >,
    pub GetAssociatedFile: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub CheckAssociatedFile: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub FileType: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *mut iv_filetype,
        ::libloading::Error,
    >,
    pub FileTypeExt: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            f_stat: *mut stat,
        ) -> *mut iv_filetype,
        ::libloading::Error,
    >,
    pub SetFileHandler: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            handler: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub GetFileHandler: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub PackParameters: Result<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
            data: *mut *mut ::std::os::raw::c_void,
            len: *mut ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub UnpackParameters: Result<
        unsafe extern "C" fn(
            data: *mut ::std::os::raw::c_void,
            len: ::std::os::raw::c_int,
            argc: *mut ::std::os::raw::c_int,
            argv: *mut *mut *mut ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub OpenBook: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            parameters: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub OpenBook2: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub BookPreparing:
        Result<unsafe extern "C" fn(path: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub BookReady:
        Result<unsafe extern "C" fn(path: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub GetLastOpen:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub AddLastOpen:
        Result<unsafe extern "C" fn(path: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub OpenLastBooks: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub FlushLastOpen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub FindIsbnInText: Result<
        unsafe extern "C" fn(text: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub IvTTSSupported: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub OpenPlayer: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub ClosePlayer: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub PlayFile:
        Result<unsafe extern "C" fn(filename: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub LoadPlaylist:
        Result<unsafe extern "C" fn(pl: *mut *mut ::std::os::raw::c_char), ::libloading::Error>,
    pub GetPlaylist:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub PlayTrack: Result<unsafe extern "C" fn(n: ::std::os::raw::c_int), ::libloading::Error>,
    pub PreviousTrack: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub NextTrack: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetCurrentTrack:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetTrackSize: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetTrackPosition:
        Result<unsafe extern "C" fn(pos: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetTrackPosition:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetPlayerState:
        Result<unsafe extern "C" fn(state: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetPlayerState:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetPlayerMode:
        Result<unsafe extern "C" fn(mode: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetPlayerMode: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub TogglePlaying: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetVolume: Result<unsafe extern "C" fn(n: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetVolume: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetEqualizer:
        Result<unsafe extern "C" fn(eq: *mut ::std::os::raw::c_int), ::libloading::Error>,
    pub GetEqualizer:
        Result<unsafe extern "C" fn(eq: *mut ::std::os::raw::c_int), ::libloading::Error>,
    pub SetAudioPlayingInfo: Result<
        unsafe extern "C" fn(info: AudioPlayingInfo) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetAudioPlayingInfo: Result<
        unsafe extern "C" fn(info: *mut AudioPlayingInfo) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetHighVolumeTimeout:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ResetHighVolumeTimeout: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub IncreaseHighVolumeInterval:
        Result<unsafe extern "C" fn(value: ::std::os::raw::c_int), ::libloading::Error>,
    pub LoadHighVolumeTimeout: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SaveHighVolumeTimeout: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetSafeVolumeLimit:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetHighVolumeMaxInterval:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub EnumDictionaries:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub EnumDictionariesFiles:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub EnumDictionariesFilesCallAfterEnumDictionaries:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetKeyboardLayoutForOpenedDictionary:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub haveDictionaryKeyboard: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub OpenDictionary: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> bool,
        ::libloading::Error,
    >,
    pub CloseDictionary: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub DictionaryOpened:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub LookupWord: Result<
        unsafe extern "C" fn(
            what: *const ::std::os::raw::c_char,
            word: *mut *mut ::std::os::raw::c_char,
            trans: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub LookupWordExact: Result<
        unsafe extern "C" fn(
            what: *const ::std::os::raw::c_char,
            word: *mut *mut ::std::os::raw::c_char,
            trans: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub LookupPrevious: Result<
        unsafe extern "C" fn(
            word: *mut *mut ::std::os::raw::c_char,
            trans: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub LookupNext: Result<
        unsafe extern "C" fn(
            word: *mut *mut ::std::os::raw::c_char,
            trans: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetWordListWithPrefix: Result<
        unsafe extern "C" fn(
            prefix_utf8: *const ::std::os::raw::c_char,
            maxWords: ::std::os::raw::c_int,
            wordList: *mut *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_reflow_start: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            scale: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_reflow_bt: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_reflow_et: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_reflow_div: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_reflow_addchar: Result<
        unsafe extern "C" fn(
            code: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_reflow_addimage: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub iv_reflow_subpages:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_reflow_render:
        Result<unsafe extern "C" fn(spnum: ::std::os::raw::c_int), ::libloading::Error>,
    pub iv_reflow_getchar: Result<
        unsafe extern "C" fn(
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_reflow_getimage: Result<
        unsafe extern "C" fn(
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            scale: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_reflow_words:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_reflow_getword: Result<
        unsafe extern "C" fn(
            n: ::std::os::raw::c_int,
            spnum: *mut ::std::os::raw::c_int,
            x: *mut ::std::os::raw::c_int,
            y: *mut ::std::os::raw::c_int,
            w: *mut ::std::os::raw::c_int,
            h: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub iv_reflow_clear: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub AddScrolledArea: Result<
        unsafe extern "C" fn(area: *mut irect, receivePointerUp: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub RemoveScrolledArea: Result<unsafe extern "C" fn(area: *mut irect), ::libloading::Error>,
    pub ClearAllScrolledAreas: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SetMinimalXScrollIndent: Result<
        unsafe extern "C" fn(area: *mut irect, Xindent: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub SetMinimalYScrollIndent: Result<
        unsafe extern "C" fn(area: *mut irect, Yindent: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub IsAnyScrolledArea:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetCurrentApplicationAttribute: Result<
        unsafe extern "C" fn(attribute: APPLICATION_ATTRIBUTE, on: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub TestCurrentApplicationAttribute: Result<
        unsafe extern "C" fn(attribute: APPLICATION_ATTRIBUTE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_fullscreen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_nofullscreen: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub iv_sleepmode: Result<unsafe extern "C" fn(on: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetSleepmode: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetBatteryPower:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetTemperature:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsCharging: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsUSBconnected:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsSDinserted: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsPlayingMP3: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsKeyPressed: Result<
        unsafe extern "C" fn(key: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetDeviceModel:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetHardwareType:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetSoftwareVersion:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub IvReadVersionFromFirmwareFile: Result<
        unsafe extern "C" fn(
            output: *mut ::std::os::raw::c_char,
            max_length: usize,
            path: *const ::std::os::raw::c_char,
        ) -> bool,
        ::libloading::Error,
    >,
    pub isUsbStorAttached: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub isUsbStorMounted: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub usbStorEject: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub usbStorSerialNumber:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetSerialSoftwareInfo: Result<
        unsafe extern "C" fn(
            device_model: *mut *mut ::std::os::raw::c_char,
            major_version: *mut ::std::os::raw::c_int,
            minor_version: *mut ::std::os::raw::c_int,
            build_version: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetSerialNumber:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetExternalCardSerialNumber:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub GetWaveformFilename:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetDeviceKey:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetDeviceFingerprint:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_uchar, ::libloading::Error>,
    pub CurrentDateStr:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub DateStr:
        Result<unsafe extern "C" fn(t: time_t) -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GoSleep: Result<
        unsafe extern "C" fn(
            ms: ::std::os::raw::c_int,
            deep: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub BanSleep: Result<unsafe extern "C" fn(sec: ::std::os::raw::c_int), ::libloading::Error>,
    pub SetAutoPowerOff: Result<unsafe extern "C" fn(en: bool), ::libloading::Error>,
    pub SetAutoKeylock: Result<unsafe extern "C" fn(en: bool), ::libloading::Error>,
    pub PowerOff: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub SafeMode: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub OpenMainMenu: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub CloseAllTasks: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub WriteStartupLogo: Result<
        unsafe extern "C" fn(bm: *const ibitmap) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub WritePartnerPowerOffLogo:
        Result<unsafe extern "C" fn(bm: *const ibitmap), ::libloading::Error>,
    pub WriteLowPoweRLogo: Result<
        unsafe extern "C" fn(bm: *const ibitmap) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub PageSnapshot: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub RestoreStartupLogo:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub QueryTouchpanel:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub CalibrateTouchpanel: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub CalibrateTouchDevice:
        Result<unsafe extern "C" fn(TouchDevice: input_dev_e), ::libloading::Error>,
    pub TouchScreenEnable:
        Result<unsafe extern "C" fn(onOff: bool) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsTouchScreenEnabled: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub OpenCalendar: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub StartSoftwareUpdate:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IvStartSoftwareUpdateEx: Result<
        unsafe extern "C" fn(withDialog: bool) -> iv_start_software_update_result,
        ::libloading::Error,
    >,
    pub HavePowerForSoftwareUpdate: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub ForcingSleep: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub WiFiPower: Result<
        unsafe extern "C" fn(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetWiFiScanResults: Result<
        unsafe extern "C" fn(aps: *mut iv_wifi_ap_list) -> *mut iv_wifi_ap_list,
        ::libloading::Error,
    >,
    pub WiFiScanProcessStart:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub WiFiScanProcessSetSelectiveList:
        Result<unsafe extern "C" fn(list: *mut iv_wifi_ap_list), ::libloading::Error>,
    pub WiFiScanProcessGetResults:
        Result<unsafe extern "C" fn() -> *mut iv_wifi_ap_list, ::libloading::Error>,
    pub WiFiScanProcessStop:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub QueryNetwork: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetHwAddress:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetHwBTAddress:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetHw3GIMEI:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetBluetoothMode:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetBluetoothMode: Result<
        unsafe extern "C" fn(
            mode: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetBluetoothStatus: Result<unsafe extern "C" fn() -> bt_state, ::libloading::Error>,
    pub SetBluetoothOn:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetBluetoothOff:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsBluetoothEnabled:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsBluetoothAwake:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub BluetoothWakeUp:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub BluetoothSuspend:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub EnumBTdevices:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub OpenBTdevicesMenu: Result<
        unsafe extern "C" fn(
            title: *mut ::std::os::raw::c_char,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            hproc: iv_itemchangehandler,
        ),
        ::libloading::Error,
    >,
    pub BtSendFiles: Result<
        unsafe extern "C" fn(
            mac: *mut ::std::os::raw::c_char,
            files: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetFlightMode:
        Result<unsafe extern "C" fn(fm: bool) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub IsFlightModeEnabled: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub EnumWirelessNetworks:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub EnumConnections:
        Result<unsafe extern "C" fn() -> *mut *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetBTservice: Result<
        unsafe extern "C" fn(
            mac: *const ::std::os::raw::c_char,
            service: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetConnect: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetConnect2: Result<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            showHourglass: bool,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetConnectSilent: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetConnectAsync: Result<
        unsafe extern "C" fn(
            cb: ::std::option::Option<
                unsafe extern "C" fn(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetDisconnect: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub NetDisconnectAsync: Result<
        unsafe extern "C" fn(
            cb: ::std::option::Option<
                unsafe extern "C" fn(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetConnect3: Result<unsafe extern "C" fn(silent: bool) -> bool, ::libloading::Error>,
    pub NetInfo: Result<unsafe extern "C" fn() -> *mut iv_netinfo, ::libloading::Error>,
    pub OpenNetworkInfo: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub GetUserAgent:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetDefaultUserAgent:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub GetProxyUrl:
        Result<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char, ::libloading::Error>,
    pub QuickDownloadExt3: Result<
        unsafe extern "C" fn(
            url: *const ::std::os::raw::c_char,
            retsize: *mut ::std::os::raw::c_int,
            timeout: ::std::os::raw::c_int,
            cookie: *mut ::std::os::raw::c_char,
            post: *mut ::std::os::raw::c_char,
            error_code: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub QuickDownloadExt2: Result<
        unsafe extern "C" fn(
            url: *const ::std::os::raw::c_char,
            retsize: *mut ::std::os::raw::c_int,
            timeout: ::std::os::raw::c_int,
            cookie: *mut ::std::os::raw::c_char,
            post: *mut ::std::os::raw::c_char,
            error_code: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub QuickDownloadExt: Result<
        unsafe extern "C" fn(
            url: *const ::std::os::raw::c_char,
            retsize: *mut ::std::os::raw::c_int,
            timeout: ::std::os::raw::c_int,
            cookie: *mut ::std::os::raw::c_char,
            post: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub QuickDownload: Result<
        unsafe extern "C" fn(
            url: *const ::std::os::raw::c_char,
            retsize: *mut ::std::os::raw::c_int,
            timeout: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub NewSession: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub CloseSession: Result<unsafe extern "C" fn(id: ::std::os::raw::c_int), ::libloading::Error>,
    pub SetUserAgent: Result<
        unsafe extern "C" fn(id: ::std::os::raw::c_int, ua: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub SetProxy: Result<
        unsafe extern "C" fn(
            id: ::std::os::raw::c_int,
            host: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_int,
            user: *const ::std::os::raw::c_char,
            pass: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub Download: Result<
        unsafe extern "C" fn(
            id: ::std::os::raw::c_int,
            url: *const ::std::os::raw::c_char,
            postdata: *const ::std::os::raw::c_char,
            fp: *mut *mut FILE,
            timeout: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DownloadTo: Result<
        unsafe extern "C" fn(
            id: ::std::os::raw::c_int,
            url: *const ::std::os::raw::c_char,
            postdata: *const ::std::os::raw::c_char,
            filename: *const ::std::os::raw::c_char,
            timeout: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub DownloadTo_Crutch: Result<
        unsafe extern "C" fn(
            id: ::std::os::raw::c_int,
            url: *const ::std::os::raw::c_char,
            postdata: *const ::std::os::raw::c_char,
            filename: *const ::std::os::raw::c_char,
            timeout: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub SetSessionFlag: Result<
        unsafe extern "C" fn(
            _id: ::std::os::raw::c_int,
            _flag: ::std::os::raw::c_int,
            _value: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetSessionStatus: Result<
        unsafe extern "C" fn(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetHeader: Result<
        unsafe extern "C" fn(
            id: ::std::os::raw::c_int,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub GetSessionInfo: Result<
        unsafe extern "C" fn(id: ::std::os::raw::c_int) -> *mut iv_sessioninfo,
        ::libloading::Error,
    >,
    pub PauseTransfer: Result<unsafe extern "C" fn(id: ::std::os::raw::c_int), ::libloading::Error>,
    pub ResumeTransfer:
        Result<unsafe extern "C" fn(id: ::std::os::raw::c_int), ::libloading::Error>,
    pub AbortTransfer: Result<unsafe extern "C" fn(id: ::std::os::raw::c_int), ::libloading::Error>,
    pub NetError: Result<
        unsafe extern "C" fn(e: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub NetErrorMessage:
        Result<unsafe extern "C" fn(e: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetA2dpStatus: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetPort: Result<unsafe extern "C" fn(port: ::std::os::raw::c_int), ::libloading::Error>,
    pub GetTouchInfoI: Result<
        unsafe extern "C" fn(index: ::std::os::raw::c_uint) -> *mut iv_mtinfo,
        ::libloading::Error,
    >,
    pub GetTouchContainerLength: Result<
        unsafe extern "C" fn(index: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub GetTouchSection: Result<
        unsafe extern "C" fn(
            index: ::std::os::raw::c_uint,
            section: ::std::os::raw::c_uint,
        ) -> *mut iv_mtinfo_section,
        ::libloading::Error,
    >,
    pub GetLastTouchSection: Result<
        unsafe extern "C" fn(index: ::std::os::raw::c_uint) -> *mut iv_mtinfo_section,
        ::libloading::Error,
    >,
    pub PopTouchSection: Result<
        unsafe extern "C" fn(
            index: ::std::os::raw::c_uint,
            count: *mut ::std::os::raw::c_uint,
        ) -> *mut iv_mtinfo_section,
        ::libloading::Error,
    >,
    pub QueryHeadphone:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub wpa_passphrase: Result<
        unsafe extern "C" fn(
            ssid: *mut ::std::os::raw::c_char,
            passphrase: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub iv_strcmp: Result<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_strncmp: Result<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
            n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_strcasecmp: Result<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_strncasecmp: Result<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
            n: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub escape: Result<
        unsafe extern "C" fn(
            val: *const ::std::os::raw::c_char,
            buf: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unescape: Result<
        unsafe extern "C" fn(
            val: *const ::std::os::raw::c_char,
            buf: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub url_decode: Result<
        unsafe extern "C" fn(dst: *mut ::std::os::raw::c_char, src: *const ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub trim_right:
        Result<unsafe extern "C" fn(s: *mut ::std::os::raw::c_char), ::libloading::Error>,
    pub get_encoding_table: Result<
        unsafe extern "C" fn(enc: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub convert_to_utf: Result<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            dest: *mut ::std::os::raw::c_char,
            destsize: ::std::os::raw::c_int,
            enc: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utf2ucs: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            us: *mut ::std::os::raw::c_ushort,
            maxlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utf2ucsEx: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            us: *mut ::std::os::raw::c_ushort,
            maxlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utf2ucs4: Result<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            us: *mut ::std::os::raw::c_uint,
            maxlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ucs2utf: Result<
        unsafe extern "C" fn(
            us: *const ::std::os::raw::c_ushort,
            s: *mut ::std::os::raw::c_char,
            maxlen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utf_toupper_ext: Result<
        unsafe extern "C" fn(
            src: *mut ::std::os::raw::c_char,
            src_len: ::std::os::raw::c_int,
            dest: *mut *mut ::std::os::raw::c_char,
            dest_len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub utf_tolower_ext: Result<
        unsafe extern "C" fn(
            src: *mut ::std::os::raw::c_char,
            src_len: ::std::os::raw::c_int,
            dest: *mut *mut ::std::os::raw::c_char,
            dest_len: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub md5sum: Result<
        unsafe extern "C" fn(
            data: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
            digest: *mut ::std::os::raw::c_uchar,
        ),
        ::libloading::Error,
    >,
    pub base64_encode: Result<
        unsafe extern "C" fn(
            in_: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
            out: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub base64_decode: Result<
        unsafe extern "C" fn(
            in_: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub copy_file: Result<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            dst: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub move_file: Result<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            dst: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub copy_file_with_af: Result<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            dst: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub move_file_with_af: Result<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            dst: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unlink_file_with_af: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub recurse_action: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            proc_: iv_recurser,
            data: *mut ::std::os::raw::c_void,
            creative: ::std::os::raw::c_int,
            this_too: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub LeaveInkViewMain: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub IsInRect: Result<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            rect: *const irect,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub MD5PartFile: Result<
        unsafe extern "C" fn(src: *const ::std::os::raw::c_char, r: *mut ::std::os::raw::c_uchar),
        ::libloading::Error,
    >,
    pub crc32hash: Result<
        unsafe extern "C" fn(
            buf: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub FastBookHash: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
            result: *mut ::std::os::raw::c_char,
            result_size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetDialogShow: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub SetMenuFont: Result<unsafe extern "C" fn(font: *mut ifont), ::libloading::Error>,
    pub iv_get_obreey_status:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub CustomDialogCreate: Result<
        unsafe extern "C" fn(
            info_bubble_type: eBubbleTypes,
            hero_name: *const ::std::os::raw::c_char,
            bubble_count: ::std::os::raw::c_int,
        ) -> *mut icustomdialog,
        ::libloading::Error,
    >,
    pub CustomDialogRender:
        Result<unsafe extern "C" fn(dialog: *mut icustomdialog), ::libloading::Error>,
    pub CustomDialogShow:
        Result<unsafe extern "C" fn(dialog: *mut icustomdialog), ::libloading::Error>,
    pub CustomDialogDestroy:
        Result<unsafe extern "C" fn(dialog: *mut icustomdialog), ::libloading::Error>,
    pub create_proxy_object: Result<
        unsafe extern "C" fn(
            type_: proxy_type,
            host: *const ::std::os::raw::c_char,
            port: ::std::os::raw::c_int,
            user: *const ::std::os::raw::c_char,
            pass: *const ::std::os::raw::c_char,
        ) -> *mut proxy_settings,
        ::libloading::Error,
    >,
    pub copy_proxy_object: Result<
        unsafe extern "C" fn(proxy: *mut proxy_settings) -> *mut proxy_settings,
        ::libloading::Error,
    >,
    pub clean_proxy_object:
        Result<unsafe extern "C" fn(proxy: *mut *mut proxy_settings), ::libloading::Error>,
    pub delete_proxy: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub set_proxy: Result<
        unsafe extern "C" fn(proxy: *mut proxy_settings) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub get_proxy: Result<unsafe extern "C" fn() -> *mut proxy_settings, ::libloading::Error>,
    pub GetNetInfo: Result<
        unsafe extern "C" fn(interface: *const network_interface) -> *mut network_interface_info,
        ::libloading::Error,
    >,
    pub GetNetGateway: Result<
        unsafe extern "C" fn(interface: *const network_interface) -> *mut network_interface,
        ::libloading::Error,
    >,
    pub GetNetDNS:
        Result<unsafe extern "C" fn() -> *mut network_interface_array, ::libloading::Error>,
    pub GetNetSignalQuality:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetNetState: Result<unsafe extern "C" fn() -> NET_STATE, ::libloading::Error>,
    pub GetLastNetConnectionError:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub NetMgr: Result<
        unsafe extern "C" fn(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetMgrStatus: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub NetMgrPing: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetNetList: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetAdd: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetDelete: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetDelete_by_ssid: Result<
        unsafe extern "C" fn(ssid: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetSelect: Result<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub NetSelect_by_ssid: Result<
        unsafe extern "C" fn(ssid: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub CoverCachePut: Result<
        unsafe extern "C" fn(
            storage: COVERCACHE_STORAGES,
            file_path: *const ::std::os::raw::c_char,
            bmp: *mut ibitmap,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub CoverCacheGet: Result<
        unsafe extern "C" fn(
            storage: COVERCACHE_STORAGES,
            file_path: *const ::std::os::raw::c_char,
        ) -> *mut ibitmap,
        ::libloading::Error,
    >,
    pub PostponeTimedPoweroff:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub arc_filename: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub get_partner_id:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub get_keylock: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub is_enough_free_space:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_file_extension: Result<
        unsafe extern "C" fn(
            filename: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub get_screen_dpi:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub get_screen_scale_factor: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub DebugResourceBitmaps_trackBitmapCreation: Result<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, bmp: *const ibitmap),
        ::libloading::Error,
    >,
    pub DebugResourceBitmaps_trackBitmapDrawing: Result<
        unsafe extern "C" fn(
            bmp: *const ibitmap,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub DebugResourceBitmaps_generateReport:
        Result<unsafe extern "C" fn(filename: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub DebugResourceBitmaps_trackBitmapCopy:
        Result<unsafe extern "C" fn(from: *const ibitmap, to: *const ibitmap), ::libloading::Error>,
    pub CopyBitmapNoTrack:
        Result<unsafe extern "C" fn(bm: *const ibitmap) -> *mut ibitmap, ::libloading::Error>,
    pub DebugResourceBitmaps_isEnabled:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub isHighPriorityJobRunning:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub startHighPriorityJob: Result<
        unsafe extern "C" fn(job_id: ::std::os::raw::c_int, timeout_sec: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub finishHighPriorityJob:
        Result<unsafe extern "C" fn(job_id: ::std::os::raw::c_int), ::libloading::Error>,
    pub iv_usleep: Result<
        unsafe extern "C" fn(__useconds: __useconds_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub set_usleep_func: Result<
        unsafe extern "C" fn(f: usleep_func_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IsUpdateInProcess:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub PendingHwEventsCount:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub configureAudioOutput:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setAvrcpMetadata: Result<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            title: *const ::std::os::raw::c_char,
            artist: *const ::std::os::raw::c_char,
            album: *const ::std::os::raw::c_char,
            genre: *const ::std::os::raw::c_char,
        ),
        ::libloading::Error,
    >,
    pub get_audio_status: Result<
        unsafe extern "C" fn(status: *mut audio_output_info) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setNeedAvrcpFocus:
        Result<unsafe extern "C" fn(need: ::std::os::raw::c_int), ::libloading::Error>,
    pub haveAvrcpFocus:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getAvrcpFocusPid:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setTaskOomPriority: Result<
        unsafe extern "C" fn(value: TaskOomPriority) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getDDRMemoryInfo: Result<
        unsafe extern "C" fn(
            total: *mut ::std::os::raw::c_int,
            free: *mut ::std::os::raw::c_int,
            total_swap: *mut ::std::os::raw::c_int,
            free_swap: *mut ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub needCanvasLock: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub lockCanvasDrawing: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub unlockCanvasDrawing: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub StartCustomGattService: Result<
        unsafe extern "C" fn(name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub StopCustomGattService:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub GetCustomGattSessionStatus: Result<
        unsafe extern "C" fn(obj: *mut CustomGattSession) -> CustomGattSessionStatus_e,
        ::libloading::Error,
    >,
    pub Connect2CustomGattService: Result<
        unsafe extern "C" fn(dest_mac_addr: *mut ::std::os::raw::c_char) -> *mut CustomGattSession,
        ::libloading::Error,
    >,
    pub CloseCustomGattConnection: Result<
        unsafe extern "C" fn(s: *mut CustomGattSession) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ReadCustomGattService: Result<
        unsafe extern "C" fn(
            obj: *mut CustomGattSession,
            data: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub WriteCustomGattService: Result<
        unsafe extern "C" fn(
            obj: *mut CustomGattSession,
            data: *const ::std::os::raw::c_char,
            data_len: usize,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub StartScanBTLE: Result<
        unsafe extern "C" fn(
            cb: ::std::option::Option<
                unsafe extern "C" fn(
                    cb_data: *mut ::std::os::raw::c_void,
                    mac: *const ::std::os::raw::c_char,
                    name: *const ::std::os::raw::c_char,
                ),
            >,
            cb_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub StopScanBTLE: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ReadConfigStorage: Result<
        unsafe extern "C" fn(
            num: ConfigStorageSlot_t,
            data: *mut ::std::os::raw::c_void,
            data_size: *mut usize,
            sert: *mut ConfigStorageSert,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub WriteConfigStorage: Result<
        unsafe extern "C" fn(
            num: ConfigStorageSlot_t,
            data: *mut ::std::os::raw::c_void,
            data_size: usize,
            sert: ConfigStorageSert,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub design_to_pixel: Result<
        unsafe extern "C" fn(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub GetSoftwareLocalizationType:
        Result<unsafe extern "C" fn() -> software_localization_type, ::libloading::Error>,
    pub LocalizationTypeToStr: Result<
        unsafe extern "C" fn(type_: software_localization_type) -> *const ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub iv_debug_mode: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub iv_exit_on_error: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub IvGetTimeDiffInDays: Result<
        unsafe extern "C" fn(t: *mut tm, current_time: *mut tm) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IvTimeToRelativeHumanDate: Result<
        unsafe extern "C" fn(
            output: *mut ::std::os::raw::c_char,
            buffer_size: usize,
            time: *mut tm,
            current_time: *mut tm,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub IvReleaseTime: Result<unsafe extern "C" fn() -> time_t, ::libloading::Error>,
    pub iv_sleep_preventor_start: Result<
        unsafe extern "C" fn(sleep_preventor: *mut iv_sleep_preventor_t),
        ::libloading::Error,
    >,
    pub iv_sleep_preventor_stop: Result<
        unsafe extern "C" fn(sleep_preventor: *mut iv_sleep_preventor_t),
        ::libloading::Error,
    >,
    pub iv_math_minf:
        Result<unsafe extern "C" fn(a: f32, b: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_math_maxf:
        Result<unsafe extern "C" fn(a: f32, b: f32) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_math_mind:
        Result<unsafe extern "C" fn(a: f64, b: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_math_maxd:
        Result<unsafe extern "C" fn(a: f64, b: f64) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub iv_math_mini: Result<
        unsafe extern "C" fn(
            a: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_math_maxi: Result<
        unsafe extern "C" fn(
            a: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_math_mapf: Result<
        unsafe extern "C" fn(
            value: f32,
            min_in: f32,
            max_in: f32,
            min_out: f32,
            max_out: f32,
        ) -> f32,
        ::libloading::Error,
    >,
    pub iv_math_mapd: Result<
        unsafe extern "C" fn(
            value: f64,
            min_in: f64,
            max_in: f64,
            min_out: f64,
            max_out: f64,
        ) -> f64,
        ::libloading::Error,
    >,
    pub iv_math_mapi: Result<
        unsafe extern "C" fn(
            value: ::std::os::raw::c_int,
            min_in: ::std::os::raw::c_int,
            max_in: ::std::os::raw::c_int,
            min_out: ::std::os::raw::c_int,
            max_out: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_math_maps: Result<
        unsafe extern "C" fn(
            value: ::std::os::raw::c_short,
            min_in: ::std::os::raw::c_short,
            max_in: ::std::os::raw::c_short,
            min_out: ::std::os::raw::c_short,
            max_out: ::std::os::raw::c_short,
        ) -> ::std::os::raw::c_short,
        ::libloading::Error,
    >,
    pub iv_math_mapu: Result<
        unsafe extern "C" fn(
            value: ::std::os::raw::c_uint,
            min_in: ::std::os::raw::c_uint,
            max_in: ::std::os::raw::c_uint,
            min_out: ::std::os::raw::c_uint,
            max_out: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_uint,
        ::libloading::Error,
    >,
    pub iv_math_cross_product2d:
        Result<unsafe extern "C" fn(p0: iv_vector2d, p1: iv_vector2d) -> f64, ::libloading::Error>,
    pub iv_math_cross_product2f:
        Result<unsafe extern "C" fn(p0: iv_vector2f, p1: iv_vector2f) -> f32, ::libloading::Error>,
    pub iv_math_cross_product2i: Result<
        unsafe extern "C" fn(p0: iv_vector2i, p1: iv_vector2i) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_add2i: Result<
        unsafe extern "C" fn(vector0: iv_vector2i, vector1: iv_vector2i) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_add2f: Result<
        unsafe extern "C" fn(vector0: iv_vector2f, vector1: iv_vector2f) -> iv_vector2f,
        ::libloading::Error,
    >,
    pub iv_add2d: Result<
        unsafe extern "C" fn(vector0: iv_vector2d, vector1: iv_vector2d) -> iv_vector2d,
        ::libloading::Error,
    >,
    pub iv_sub2i: Result<
        unsafe extern "C" fn(vector0: iv_vector2i, vector1: iv_vector2i) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_sub2f: Result<
        unsafe extern "C" fn(vector0: iv_vector2f, vector1: iv_vector2f) -> iv_vector2f,
        ::libloading::Error,
    >,
    pub iv_sub2d: Result<
        unsafe extern "C" fn(vector0: iv_vector2d, vector1: iv_vector2d) -> iv_vector2d,
        ::libloading::Error,
    >,
    pub iv_mul2i: Result<
        unsafe extern "C" fn(vector: iv_vector2i, scalar: ::std::os::raw::c_int) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_mul2f: Result<
        unsafe extern "C" fn(vector: iv_vector2f, scalar: f32) -> iv_vector2f,
        ::libloading::Error,
    >,
    pub iv_mul2d: Result<
        unsafe extern "C" fn(vector: iv_vector2d, scalar: f64) -> iv_vector2d,
        ::libloading::Error,
    >,
    pub iv_div2i: Result<
        unsafe extern "C" fn(vector: iv_vector2i, scalar: ::std::os::raw::c_int) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_div2f: Result<
        unsafe extern "C" fn(vector: iv_vector2f, scalar: f32) -> iv_vector2f,
        ::libloading::Error,
    >,
    pub iv_div2d: Result<
        unsafe extern "C" fn(vector: iv_vector2d, scalar: f64) -> iv_vector2d,
        ::libloading::Error,
    >,
    pub iv_matvec_mul2i: Result<
        unsafe extern "C" fn(matrix: iv_matrix2i, vector: iv_vector2i) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_matvec_mul2f: Result<
        unsafe extern "C" fn(matrix: iv_matrix2f, vector: iv_vector2f) -> iv_vector2f,
        ::libloading::Error,
    >,
    pub iv_matvec_mul2d: Result<
        unsafe extern "C" fn(matrix: iv_matrix2d, vector: iv_vector2d) -> iv_vector2d,
        ::libloading::Error,
    >,
    pub iv_rotvec_mul2i: Result<
        unsafe extern "C" fn(
            matrix: iv_matrix2d,
            vector: iv_vector2i,
            center: iv_vector2i,
        ) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_matrix_mul2i: Result<
        unsafe extern "C" fn(matrix0: iv_matrix2i, matrix1: iv_matrix2i) -> iv_matrix2i,
        ::libloading::Error,
    >,
    pub iv_matrix_mul2f: Result<
        unsafe extern "C" fn(matrix0: iv_matrix2f, matrix1: iv_matrix2f) -> iv_matrix2f,
        ::libloading::Error,
    >,
    pub iv_matrix_mul2d: Result<
        unsafe extern "C" fn(matrix0: iv_matrix2d, matrix1: iv_matrix2d) -> iv_matrix2d,
        ::libloading::Error,
    >,
    pub iv_matrix_from_angle2f:
        Result<unsafe extern "C" fn(angle: f32) -> iv_matrix2f, ::libloading::Error>,
    pub iv_matrix_from_angle2d:
        Result<unsafe extern "C" fn(angle: f64) -> iv_matrix2d, ::libloading::Error>,
    pub iv_abs_vector2i:
        Result<unsafe extern "C" fn(vector: iv_vector2i) -> iv_vector2i, ::libloading::Error>,
    pub iv_abs_vector2f:
        Result<unsafe extern "C" fn(vector: iv_vector2f) -> iv_vector2f, ::libloading::Error>,
    pub iv_abs_vector2d:
        Result<unsafe extern "C" fn(vector: iv_vector2d) -> iv_vector2d, ::libloading::Error>,
    pub iv_avr_vector2i: Result<
        unsafe extern "C" fn(vector0: iv_vector2i, vector1: iv_vector2i) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_avr_vector2f: Result<
        unsafe extern "C" fn(vector0: iv_vector2f, vector1: iv_vector2f) -> iv_vector2f,
        ::libloading::Error,
    >,
    pub iv_avr_vector2d: Result<
        unsafe extern "C" fn(vector0: iv_vector2d, vector1: iv_vector2d) -> iv_vector2d,
        ::libloading::Error,
    >,
    pub iv_eq_matrix2i: Result<
        unsafe extern "C" fn(matrix0: iv_matrix2i, matrix1: iv_matrix2i) -> bool,
        ::libloading::Error,
    >,
    pub iv_eq_matrix2f: Result<
        unsafe extern "C" fn(matrix0: iv_matrix2f, matrix1: iv_matrix2f) -> bool,
        ::libloading::Error,
    >,
    pub iv_eq_matrix2d: Result<
        unsafe extern "C" fn(matrix0: iv_matrix2d, matrix1: iv_matrix2d) -> bool,
        ::libloading::Error,
    >,
    pub iv_to_radiansf: Result<unsafe extern "C" fn(degrees: f32) -> f32, ::libloading::Error>,
    pub iv_to_radiansd: Result<unsafe extern "C" fn(degrees: f64) -> f64, ::libloading::Error>,
    pub iv_to_degreesf: Result<unsafe extern "C" fn(radians: f32) -> f32, ::libloading::Error>,
    pub iv_to_degreesd: Result<unsafe extern "C" fn(radians: f64) -> f64, ::libloading::Error>,
    pub iv_complex_add2d: Result<
        unsafe extern "C" fn(num0: iv_complex2d, num1: iv_complex2d) -> iv_complex2d,
        ::libloading::Error,
    >,
    pub iv_complex_sub2d: Result<
        unsafe extern "C" fn(num0: iv_complex2d, num1: iv_complex2d) -> iv_complex2d,
        ::libloading::Error,
    >,
    pub iv_complex_mul2f: Result<
        unsafe extern "C" fn(num0: iv_complex2f, num1: iv_complex2f) -> iv_complex2f,
        ::libloading::Error,
    >,
    pub iv_complex_mul2d: Result<
        unsafe extern "C" fn(num0: iv_complex2d, num1: iv_complex2d) -> iv_complex2d,
        ::libloading::Error,
    >,
    pub iv_complex_from_angle2d:
        Result<unsafe extern "C" fn(angle: f64) -> iv_complex2d, ::libloading::Error>,
    pub iv_complex_from_draw_flags: Result<
        unsafe extern "C" fn(flags: ::std::os::raw::c_int) -> iv_complex2d,
        ::libloading::Error,
    >,
    pub iv_complex_rotvec_mul2i: Result<
        unsafe extern "C" fn(
            rotor: iv_complex2d,
            vector: iv_vector2i,
            center: iv_vector2i,
        ) -> iv_vector2i,
        ::libloading::Error,
    >,
    pub iv_complex_rotvec_mul2f: Result<
        unsafe extern "C" fn(
            rotor: iv_complex2f,
            vector: iv_vector2f,
            center: iv_vector2f,
        ) -> iv_vector2f,
        ::libloading::Error,
    >,
    pub iv_complex_rotvec_mul2d: Result<
        unsafe extern "C" fn(
            rotor: iv_complex2d,
            vector: iv_vector2d,
            center: iv_vector2d,
        ) -> iv_vector2d,
        ::libloading::Error,
    >,
    pub iv_eq_complex2f: Result<
        unsafe extern "C" fn(num0: iv_complex2f, num1: iv_complex2f) -> bool,
        ::libloading::Error,
    >,
    pub iv_eq_complex2d: Result<
        unsafe extern "C" fn(num0: iv_complex2d, num1: iv_complex2d) -> bool,
        ::libloading::Error,
    >,
    pub iv_eq_vector2i: Result<
        unsafe extern "C" fn(vector0: iv_vector2i, vector1: iv_vector2i) -> bool,
        ::libloading::Error,
    >,
    pub iv_eq_vector2f: Result<
        unsafe extern "C" fn(vector0: iv_vector2f, vector1: iv_vector2f) -> bool,
        ::libloading::Error,
    >,
    pub iv_eq_vector2d: Result<
        unsafe extern "C" fn(vector0: iv_vector2d, vector1: iv_vector2d) -> bool,
        ::libloading::Error,
    >,
    pub iv_eq_f:
        Result<unsafe extern "C" fn(scalar0: f32, scalar1: f32) -> bool, ::libloading::Error>,
    pub iv_eq_d:
        Result<unsafe extern "C" fn(scalar0: f64, scalar1: f64) -> bool, ::libloading::Error>,
    pub iv_from_design1i: Result<
        unsafe extern "C" fn(scalar: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub iv_from_design1f: Result<unsafe extern "C" fn(scalar: f32) -> f32, ::libloading::Error>,
    pub iv_from_design1d: Result<unsafe extern "C" fn(scalar: f64) -> f64, ::libloading::Error>,
    pub iv_from_design2i:
        Result<unsafe extern "C" fn(vec: iv_vector2i) -> iv_vector2i, ::libloading::Error>,
    pub iv_from_design2f:
        Result<unsafe extern "C" fn(vec: iv_vector2f) -> iv_vector2f, ::libloading::Error>,
    pub iv_from_design2d:
        Result<unsafe extern "C" fn(vec: iv_vector2d) -> iv_vector2d, ::libloading::Error>,
    pub iv_random_d: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub iv_sign2i:
        Result<unsafe extern "C" fn(vec: iv_vector2i) -> iv_vector2i, ::libloading::Error>,
    pub iv_sign2f:
        Result<unsafe extern "C" fn(vec: iv_vector2f) -> iv_vector2f, ::libloading::Error>,
    pub iv_sign2d:
        Result<unsafe extern "C" fn(vec: iv_vector2d) -> iv_vector2d, ::libloading::Error>,
    pub IvGetScreenModeInversion: Result<unsafe extern "C" fn() -> bool, ::libloading::Error>,
    pub IvSetScreenModeInversion: Result<unsafe extern "C" fn(state: bool), ::libloading::Error>,
    pub IvSetAppCapability:
        Result<unsafe extern "C" fn(caps: ::std::os::raw::c_int), ::libloading::Error>,
    pub IvGetAppCapability:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ltrim_non_alphanum: Result<
        unsafe extern "C" fn(value: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
}
impl inkview {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let __underflow = __library.get(b"__underflow\0").map(|sym| *sym);
        let __uflow = __library.get(b"__uflow\0").map(|sym| *sym);
        let __overflow = __library.get(b"__overflow\0").map(|sym| *sym);
        let _IO_getc = __library.get(b"_IO_getc\0").map(|sym| *sym);
        let _IO_putc = __library.get(b"_IO_putc\0").map(|sym| *sym);
        let _IO_feof = __library.get(b"_IO_feof\0").map(|sym| *sym);
        let _IO_ferror = __library.get(b"_IO_ferror\0").map(|sym| *sym);
        let _IO_peekc_locked = __library.get(b"_IO_peekc_locked\0").map(|sym| *sym);
        let _IO_flockfile = __library.get(b"_IO_flockfile\0").map(|sym| *sym);
        let _IO_funlockfile = __library.get(b"_IO_funlockfile\0").map(|sym| *sym);
        let _IO_ftrylockfile = __library.get(b"_IO_ftrylockfile\0").map(|sym| *sym);
        let _IO_vfscanf = __library.get(b"_IO_vfscanf\0").map(|sym| *sym);
        let _IO_vfprintf = __library.get(b"_IO_vfprintf\0").map(|sym| *sym);
        let _IO_padn = __library.get(b"_IO_padn\0").map(|sym| *sym);
        let _IO_sgetn = __library.get(b"_IO_sgetn\0").map(|sym| *sym);
        let _IO_seekoff = __library.get(b"_IO_seekoff\0").map(|sym| *sym);
        let _IO_seekpos = __library.get(b"_IO_seekpos\0").map(|sym| *sym);
        let _IO_free_backup_area = __library.get(b"_IO_free_backup_area\0").map(|sym| *sym);
        let remove = __library.get(b"remove\0").map(|sym| *sym);
        let rename = __library.get(b"rename\0").map(|sym| *sym);
        let renameat = __library.get(b"renameat\0").map(|sym| *sym);
        let tmpfile = __library.get(b"tmpfile\0").map(|sym| *sym);
        let tmpnam = __library.get(b"tmpnam\0").map(|sym| *sym);
        let tmpnam_r = __library.get(b"tmpnam_r\0").map(|sym| *sym);
        let tempnam = __library.get(b"tempnam\0").map(|sym| *sym);
        let fclose = __library.get(b"fclose\0").map(|sym| *sym);
        let fflush = __library.get(b"fflush\0").map(|sym| *sym);
        let fflush_unlocked = __library.get(b"fflush_unlocked\0").map(|sym| *sym);
        let fopen = __library.get(b"fopen\0").map(|sym| *sym);
        let freopen = __library.get(b"freopen\0").map(|sym| *sym);
        let fdopen = __library.get(b"fdopen\0").map(|sym| *sym);
        let fmemopen = __library.get(b"fmemopen\0").map(|sym| *sym);
        let open_memstream = __library.get(b"open_memstream\0").map(|sym| *sym);
        let setbuf = __library.get(b"setbuf\0").map(|sym| *sym);
        let setvbuf = __library.get(b"setvbuf\0").map(|sym| *sym);
        let setbuffer = __library.get(b"setbuffer\0").map(|sym| *sym);
        let setlinebuf = __library.get(b"setlinebuf\0").map(|sym| *sym);
        let fprintf = __library.get(b"fprintf\0").map(|sym| *sym);
        let printf = __library.get(b"printf\0").map(|sym| *sym);
        let sprintf = __library.get(b"sprintf\0").map(|sym| *sym);
        let vfprintf = __library.get(b"vfprintf\0").map(|sym| *sym);
        let vprintf = __library.get(b"vprintf\0").map(|sym| *sym);
        let vsprintf = __library.get(b"vsprintf\0").map(|sym| *sym);
        let snprintf = __library.get(b"snprintf\0").map(|sym| *sym);
        let vsnprintf = __library.get(b"vsnprintf\0").map(|sym| *sym);
        let vdprintf = __library.get(b"vdprintf\0").map(|sym| *sym);
        let dprintf = __library.get(b"dprintf\0").map(|sym| *sym);
        let fscanf = __library.get(b"fscanf\0").map(|sym| *sym);
        let scanf = __library.get(b"scanf\0").map(|sym| *sym);
        let sscanf = __library.get(b"sscanf\0").map(|sym| *sym);
        let fscanf1 = __library.get(b"fscanf1\0").map(|sym| *sym);
        let scanf1 = __library.get(b"scanf1\0").map(|sym| *sym);
        let sscanf1 = __library.get(b"sscanf1\0").map(|sym| *sym);
        let vfscanf = __library.get(b"vfscanf\0").map(|sym| *sym);
        let vscanf = __library.get(b"vscanf\0").map(|sym| *sym);
        let vsscanf = __library.get(b"vsscanf\0").map(|sym| *sym);
        let vfscanf1 = __library.get(b"vfscanf1\0").map(|sym| *sym);
        let vscanf1 = __library.get(b"vscanf1\0").map(|sym| *sym);
        let vsscanf1 = __library.get(b"vsscanf1\0").map(|sym| *sym);
        let fgetc = __library.get(b"fgetc\0").map(|sym| *sym);
        let getc = __library.get(b"getc\0").map(|sym| *sym);
        let getchar = __library.get(b"getchar\0").map(|sym| *sym);
        let getc_unlocked = __library.get(b"getc_unlocked\0").map(|sym| *sym);
        let getchar_unlocked = __library.get(b"getchar_unlocked\0").map(|sym| *sym);
        let fgetc_unlocked = __library.get(b"fgetc_unlocked\0").map(|sym| *sym);
        let fputc = __library.get(b"fputc\0").map(|sym| *sym);
        let putc = __library.get(b"putc\0").map(|sym| *sym);
        let putchar = __library.get(b"putchar\0").map(|sym| *sym);
        let fputc_unlocked = __library.get(b"fputc_unlocked\0").map(|sym| *sym);
        let putc_unlocked = __library.get(b"putc_unlocked\0").map(|sym| *sym);
        let putchar_unlocked = __library.get(b"putchar_unlocked\0").map(|sym| *sym);
        let getw = __library.get(b"getw\0").map(|sym| *sym);
        let putw = __library.get(b"putw\0").map(|sym| *sym);
        let fgets = __library.get(b"fgets\0").map(|sym| *sym);
        let __getdelim = __library.get(b"__getdelim\0").map(|sym| *sym);
        let getdelim = __library.get(b"getdelim\0").map(|sym| *sym);
        let getline = __library.get(b"getline\0").map(|sym| *sym);
        let fputs = __library.get(b"fputs\0").map(|sym| *sym);
        let puts = __library.get(b"puts\0").map(|sym| *sym);
        let ungetc = __library.get(b"ungetc\0").map(|sym| *sym);
        let fread = __library.get(b"fread\0").map(|sym| *sym);
        let fwrite = __library.get(b"fwrite\0").map(|sym| *sym);
        let fread_unlocked = __library.get(b"fread_unlocked\0").map(|sym| *sym);
        let fwrite_unlocked = __library.get(b"fwrite_unlocked\0").map(|sym| *sym);
        let fseek = __library.get(b"fseek\0").map(|sym| *sym);
        let ftell = __library.get(b"ftell\0").map(|sym| *sym);
        let rewind = __library.get(b"rewind\0").map(|sym| *sym);
        let fseeko = __library.get(b"fseeko\0").map(|sym| *sym);
        let ftello = __library.get(b"ftello\0").map(|sym| *sym);
        let fgetpos = __library.get(b"fgetpos\0").map(|sym| *sym);
        let fsetpos = __library.get(b"fsetpos\0").map(|sym| *sym);
        let clearerr = __library.get(b"clearerr\0").map(|sym| *sym);
        let feof = __library.get(b"feof\0").map(|sym| *sym);
        let ferror = __library.get(b"ferror\0").map(|sym| *sym);
        let clearerr_unlocked = __library.get(b"clearerr_unlocked\0").map(|sym| *sym);
        let feof_unlocked = __library.get(b"feof_unlocked\0").map(|sym| *sym);
        let ferror_unlocked = __library.get(b"ferror_unlocked\0").map(|sym| *sym);
        let perror = __library.get(b"perror\0").map(|sym| *sym);
        let fileno = __library.get(b"fileno\0").map(|sym| *sym);
        let fileno_unlocked = __library.get(b"fileno_unlocked\0").map(|sym| *sym);
        let popen = __library.get(b"popen\0").map(|sym| *sym);
        let pclose = __library.get(b"pclose\0").map(|sym| *sym);
        let ctermid = __library.get(b"ctermid\0").map(|sym| *sym);
        let flockfile = __library.get(b"flockfile\0").map(|sym| *sym);
        let ftrylockfile = __library.get(b"ftrylockfile\0").map(|sym| *sym);
        let funlockfile = __library.get(b"funlockfile\0").map(|sym| *sym);
        let __ctype_get_mb_cur_max = __library.get(b"__ctype_get_mb_cur_max\0").map(|sym| *sym);
        let atof = __library.get(b"atof\0").map(|sym| *sym);
        let atoi = __library.get(b"atoi\0").map(|sym| *sym);
        let atol = __library.get(b"atol\0").map(|sym| *sym);
        let atoll = __library.get(b"atoll\0").map(|sym| *sym);
        let strtod = __library.get(b"strtod\0").map(|sym| *sym);
        let strtof = __library.get(b"strtof\0").map(|sym| *sym);
        let strtold = __library.get(b"strtold\0").map(|sym| *sym);
        let strtol = __library.get(b"strtol\0").map(|sym| *sym);
        let strtoul = __library.get(b"strtoul\0").map(|sym| *sym);
        let strtoq = __library.get(b"strtoq\0").map(|sym| *sym);
        let strtouq = __library.get(b"strtouq\0").map(|sym| *sym);
        let strtoll = __library.get(b"strtoll\0").map(|sym| *sym);
        let strtoull = __library.get(b"strtoull\0").map(|sym| *sym);
        let l64a = __library.get(b"l64a\0").map(|sym| *sym);
        let a64l = __library.get(b"a64l\0").map(|sym| *sym);
        let select = __library.get(b"select\0").map(|sym| *sym);
        let pselect = __library.get(b"pselect\0").map(|sym| *sym);
        let gnu_dev_major = __library.get(b"gnu_dev_major\0").map(|sym| *sym);
        let gnu_dev_minor = __library.get(b"gnu_dev_minor\0").map(|sym| *sym);
        let gnu_dev_makedev = __library.get(b"gnu_dev_makedev\0").map(|sym| *sym);
        let random = __library.get(b"random\0").map(|sym| *sym);
        let srandom = __library.get(b"srandom\0").map(|sym| *sym);
        let initstate = __library.get(b"initstate\0").map(|sym| *sym);
        let setstate = __library.get(b"setstate\0").map(|sym| *sym);
        let random_r = __library.get(b"random_r\0").map(|sym| *sym);
        let srandom_r = __library.get(b"srandom_r\0").map(|sym| *sym);
        let initstate_r = __library.get(b"initstate_r\0").map(|sym| *sym);
        let setstate_r = __library.get(b"setstate_r\0").map(|sym| *sym);
        let rand = __library.get(b"rand\0").map(|sym| *sym);
        let srand = __library.get(b"srand\0").map(|sym| *sym);
        let rand_r = __library.get(b"rand_r\0").map(|sym| *sym);
        let drand48 = __library.get(b"drand48\0").map(|sym| *sym);
        let erand48 = __library.get(b"erand48\0").map(|sym| *sym);
        let lrand48 = __library.get(b"lrand48\0").map(|sym| *sym);
        let nrand48 = __library.get(b"nrand48\0").map(|sym| *sym);
        let mrand48 = __library.get(b"mrand48\0").map(|sym| *sym);
        let jrand48 = __library.get(b"jrand48\0").map(|sym| *sym);
        let srand48 = __library.get(b"srand48\0").map(|sym| *sym);
        let seed48 = __library.get(b"seed48\0").map(|sym| *sym);
        let lcong48 = __library.get(b"lcong48\0").map(|sym| *sym);
        let drand48_r = __library.get(b"drand48_r\0").map(|sym| *sym);
        let erand48_r = __library.get(b"erand48_r\0").map(|sym| *sym);
        let lrand48_r = __library.get(b"lrand48_r\0").map(|sym| *sym);
        let nrand48_r = __library.get(b"nrand48_r\0").map(|sym| *sym);
        let mrand48_r = __library.get(b"mrand48_r\0").map(|sym| *sym);
        let jrand48_r = __library.get(b"jrand48_r\0").map(|sym| *sym);
        let srand48_r = __library.get(b"srand48_r\0").map(|sym| *sym);
        let seed48_r = __library.get(b"seed48_r\0").map(|sym| *sym);
        let lcong48_r = __library.get(b"lcong48_r\0").map(|sym| *sym);
        let malloc = __library.get(b"malloc\0").map(|sym| *sym);
        let calloc = __library.get(b"calloc\0").map(|sym| *sym);
        let realloc = __library.get(b"realloc\0").map(|sym| *sym);
        let free = __library.get(b"free\0").map(|sym| *sym);
        let cfree = __library.get(b"cfree\0").map(|sym| *sym);
        let alloca = __library.get(b"alloca\0").map(|sym| *sym);
        let valloc = __library.get(b"valloc\0").map(|sym| *sym);
        let posix_memalign = __library.get(b"posix_memalign\0").map(|sym| *sym);
        let aligned_alloc = __library.get(b"aligned_alloc\0").map(|sym| *sym);
        let abort = __library.get(b"abort\0").map(|sym| *sym);
        let atexit = __library.get(b"atexit\0").map(|sym| *sym);
        let at_quick_exit = __library.get(b"at_quick_exit\0").map(|sym| *sym);
        let on_exit = __library.get(b"on_exit\0").map(|sym| *sym);
        let exit = __library.get(b"exit\0").map(|sym| *sym);
        let quick_exit = __library.get(b"quick_exit\0").map(|sym| *sym);
        let _Exit = __library.get(b"_Exit\0").map(|sym| *sym);
        let getenv = __library.get(b"getenv\0").map(|sym| *sym);
        let putenv = __library.get(b"putenv\0").map(|sym| *sym);
        let setenv = __library.get(b"setenv\0").map(|sym| *sym);
        let unsetenv = __library.get(b"unsetenv\0").map(|sym| *sym);
        let clearenv = __library.get(b"clearenv\0").map(|sym| *sym);
        let mktemp = __library.get(b"mktemp\0").map(|sym| *sym);
        let mkstemp = __library.get(b"mkstemp\0").map(|sym| *sym);
        let mkstemps = __library.get(b"mkstemps\0").map(|sym| *sym);
        let mkdtemp = __library.get(b"mkdtemp\0").map(|sym| *sym);
        let system = __library.get(b"system\0").map(|sym| *sym);
        let realpath = __library.get(b"realpath\0").map(|sym| *sym);
        let bsearch = __library.get(b"bsearch\0").map(|sym| *sym);
        let qsort = __library.get(b"qsort\0").map(|sym| *sym);
        let abs = __library.get(b"abs\0").map(|sym| *sym);
        let labs = __library.get(b"labs\0").map(|sym| *sym);
        let llabs = __library.get(b"llabs\0").map(|sym| *sym);
        let div = __library.get(b"div\0").map(|sym| *sym);
        let ldiv = __library.get(b"ldiv\0").map(|sym| *sym);
        let lldiv = __library.get(b"lldiv\0").map(|sym| *sym);
        let ecvt = __library.get(b"ecvt\0").map(|sym| *sym);
        let fcvt = __library.get(b"fcvt\0").map(|sym| *sym);
        let gcvt = __library.get(b"gcvt\0").map(|sym| *sym);
        let qecvt = __library.get(b"qecvt\0").map(|sym| *sym);
        let qfcvt = __library.get(b"qfcvt\0").map(|sym| *sym);
        let qgcvt = __library.get(b"qgcvt\0").map(|sym| *sym);
        let ecvt_r = __library.get(b"ecvt_r\0").map(|sym| *sym);
        let fcvt_r = __library.get(b"fcvt_r\0").map(|sym| *sym);
        let qecvt_r = __library.get(b"qecvt_r\0").map(|sym| *sym);
        let qfcvt_r = __library.get(b"qfcvt_r\0").map(|sym| *sym);
        let mblen = __library.get(b"mblen\0").map(|sym| *sym);
        let mbtowc = __library.get(b"mbtowc\0").map(|sym| *sym);
        let wctomb = __library.get(b"wctomb\0").map(|sym| *sym);
        let mbstowcs = __library.get(b"mbstowcs\0").map(|sym| *sym);
        let wcstombs = __library.get(b"wcstombs\0").map(|sym| *sym);
        let rpmatch = __library.get(b"rpmatch\0").map(|sym| *sym);
        let getsubopt = __library.get(b"getsubopt\0").map(|sym| *sym);
        let getloadavg = __library.get(b"getloadavg\0").map(|sym| *sym);
        let memcpy = __library.get(b"memcpy\0").map(|sym| *sym);
        let memmove = __library.get(b"memmove\0").map(|sym| *sym);
        let memccpy = __library.get(b"memccpy\0").map(|sym| *sym);
        let memset = __library.get(b"memset\0").map(|sym| *sym);
        let memcmp = __library.get(b"memcmp\0").map(|sym| *sym);
        let memchr = __library.get(b"memchr\0").map(|sym| *sym);
        let strcpy = __library.get(b"strcpy\0").map(|sym| *sym);
        let strncpy = __library.get(b"strncpy\0").map(|sym| *sym);
        let strcat = __library.get(b"strcat\0").map(|sym| *sym);
        let strncat = __library.get(b"strncat\0").map(|sym| *sym);
        let strcmp = __library.get(b"strcmp\0").map(|sym| *sym);
        let strncmp = __library.get(b"strncmp\0").map(|sym| *sym);
        let strcoll = __library.get(b"strcoll\0").map(|sym| *sym);
        let strxfrm = __library.get(b"strxfrm\0").map(|sym| *sym);
        let strcoll_l = __library.get(b"strcoll_l\0").map(|sym| *sym);
        let strxfrm_l = __library.get(b"strxfrm_l\0").map(|sym| *sym);
        let strdup = __library.get(b"strdup\0").map(|sym| *sym);
        let strndup = __library.get(b"strndup\0").map(|sym| *sym);
        let strchr = __library.get(b"strchr\0").map(|sym| *sym);
        let strrchr = __library.get(b"strrchr\0").map(|sym| *sym);
        let strcspn = __library.get(b"strcspn\0").map(|sym| *sym);
        let strspn = __library.get(b"strspn\0").map(|sym| *sym);
        let strpbrk = __library.get(b"strpbrk\0").map(|sym| *sym);
        let strstr = __library.get(b"strstr\0").map(|sym| *sym);
        let strtok = __library.get(b"strtok\0").map(|sym| *sym);
        let __strtok_r = __library.get(b"__strtok_r\0").map(|sym| *sym);
        let strtok_r = __library.get(b"strtok_r\0").map(|sym| *sym);
        let strlen = __library.get(b"strlen\0").map(|sym| *sym);
        let strnlen = __library.get(b"strnlen\0").map(|sym| *sym);
        let strerror = __library.get(b"strerror\0").map(|sym| *sym);
        let strerror_r = __library.get(b"strerror_r\0").map(|sym| *sym);
        let strerror_l = __library.get(b"strerror_l\0").map(|sym| *sym);
        let __bzero = __library.get(b"__bzero\0").map(|sym| *sym);
        let bcopy = __library.get(b"bcopy\0").map(|sym| *sym);
        let bzero = __library.get(b"bzero\0").map(|sym| *sym);
        let bcmp = __library.get(b"bcmp\0").map(|sym| *sym);
        let index = __library.get(b"index\0").map(|sym| *sym);
        let rindex = __library.get(b"rindex\0").map(|sym| *sym);
        let ffs = __library.get(b"ffs\0").map(|sym| *sym);
        let strcasecmp = __library.get(b"strcasecmp\0").map(|sym| *sym);
        let strncasecmp = __library.get(b"strncasecmp\0").map(|sym| *sym);
        let strsep = __library.get(b"strsep\0").map(|sym| *sym);
        let strsignal = __library.get(b"strsignal\0").map(|sym| *sym);
        let __stpcpy = __library.get(b"__stpcpy\0").map(|sym| *sym);
        let stpcpy = __library.get(b"stpcpy\0").map(|sym| *sym);
        let __stpncpy = __library.get(b"__stpncpy\0").map(|sym| *sym);
        let stpncpy = __library.get(b"stpncpy\0").map(|sym| *sym);
        let __ctype_b_loc = __library.get(b"__ctype_b_loc\0").map(|sym| *sym);
        let __ctype_tolower_loc = __library.get(b"__ctype_tolower_loc\0").map(|sym| *sym);
        let __ctype_toupper_loc = __library.get(b"__ctype_toupper_loc\0").map(|sym| *sym);
        let isalnum = __library.get(b"isalnum\0").map(|sym| *sym);
        let isalpha = __library.get(b"isalpha\0").map(|sym| *sym);
        let iscntrl = __library.get(b"iscntrl\0").map(|sym| *sym);
        let isdigit = __library.get(b"isdigit\0").map(|sym| *sym);
        let islower = __library.get(b"islower\0").map(|sym| *sym);
        let isgraph = __library.get(b"isgraph\0").map(|sym| *sym);
        let isprint = __library.get(b"isprint\0").map(|sym| *sym);
        let ispunct = __library.get(b"ispunct\0").map(|sym| *sym);
        let isspace = __library.get(b"isspace\0").map(|sym| *sym);
        let isupper = __library.get(b"isupper\0").map(|sym| *sym);
        let isxdigit = __library.get(b"isxdigit\0").map(|sym| *sym);
        let tolower = __library.get(b"tolower\0").map(|sym| *sym);
        let toupper = __library.get(b"toupper\0").map(|sym| *sym);
        let isblank = __library.get(b"isblank\0").map(|sym| *sym);
        let isascii = __library.get(b"isascii\0").map(|sym| *sym);
        let toascii = __library.get(b"toascii\0").map(|sym| *sym);
        let _toupper = __library.get(b"_toupper\0").map(|sym| *sym);
        let _tolower = __library.get(b"_tolower\0").map(|sym| *sym);
        let isalnum_l = __library.get(b"isalnum_l\0").map(|sym| *sym);
        let isalpha_l = __library.get(b"isalpha_l\0").map(|sym| *sym);
        let iscntrl_l = __library.get(b"iscntrl_l\0").map(|sym| *sym);
        let isdigit_l = __library.get(b"isdigit_l\0").map(|sym| *sym);
        let islower_l = __library.get(b"islower_l\0").map(|sym| *sym);
        let isgraph_l = __library.get(b"isgraph_l\0").map(|sym| *sym);
        let isprint_l = __library.get(b"isprint_l\0").map(|sym| *sym);
        let ispunct_l = __library.get(b"ispunct_l\0").map(|sym| *sym);
        let isspace_l = __library.get(b"isspace_l\0").map(|sym| *sym);
        let isupper_l = __library.get(b"isupper_l\0").map(|sym| *sym);
        let isxdigit_l = __library.get(b"isxdigit_l\0").map(|sym| *sym);
        let isblank_l = __library.get(b"isblank_l\0").map(|sym| *sym);
        let __tolower_l = __library.get(b"__tolower_l\0").map(|sym| *sym);
        let tolower_l = __library.get(b"tolower_l\0").map(|sym| *sym);
        let __toupper_l = __library.get(b"__toupper_l\0").map(|sym| *sym);
        let toupper_l = __library.get(b"toupper_l\0").map(|sym| *sym);
        let access = __library.get(b"access\0").map(|sym| *sym);
        let faccessat = __library.get(b"faccessat\0").map(|sym| *sym);
        let lseek = __library.get(b"lseek\0").map(|sym| *sym);
        let close = __library.get(b"close\0").map(|sym| *sym);
        let read = __library.get(b"read\0").map(|sym| *sym);
        let write = __library.get(b"write\0").map(|sym| *sym);
        let pread = __library.get(b"pread\0").map(|sym| *sym);
        let pwrite = __library.get(b"pwrite\0").map(|sym| *sym);
        let pipe = __library.get(b"pipe\0").map(|sym| *sym);
        let alarm = __library.get(b"alarm\0").map(|sym| *sym);
        let sleep = __library.get(b"sleep\0").map(|sym| *sym);
        let ualarm = __library.get(b"ualarm\0").map(|sym| *sym);
        let usleep = __library.get(b"usleep\0").map(|sym| *sym);
        let pause = __library.get(b"pause\0").map(|sym| *sym);
        let chown = __library.get(b"chown\0").map(|sym| *sym);
        let fchown = __library.get(b"fchown\0").map(|sym| *sym);
        let lchown = __library.get(b"lchown\0").map(|sym| *sym);
        let fchownat = __library.get(b"fchownat\0").map(|sym| *sym);
        let chdir = __library.get(b"chdir\0").map(|sym| *sym);
        let fchdir = __library.get(b"fchdir\0").map(|sym| *sym);
        let getcwd = __library.get(b"getcwd\0").map(|sym| *sym);
        let getwd = __library.get(b"getwd\0").map(|sym| *sym);
        let dup = __library.get(b"dup\0").map(|sym| *sym);
        let dup2 = __library.get(b"dup2\0").map(|sym| *sym);
        let execve = __library.get(b"execve\0").map(|sym| *sym);
        let fexecve = __library.get(b"fexecve\0").map(|sym| *sym);
        let execv = __library.get(b"execv\0").map(|sym| *sym);
        let execle = __library.get(b"execle\0").map(|sym| *sym);
        let execl = __library.get(b"execl\0").map(|sym| *sym);
        let execvp = __library.get(b"execvp\0").map(|sym| *sym);
        let execlp = __library.get(b"execlp\0").map(|sym| *sym);
        let nice = __library.get(b"nice\0").map(|sym| *sym);
        let _exit = __library.get(b"_exit\0").map(|sym| *sym);
        let pathconf = __library.get(b"pathconf\0").map(|sym| *sym);
        let fpathconf = __library.get(b"fpathconf\0").map(|sym| *sym);
        let sysconf = __library.get(b"sysconf\0").map(|sym| *sym);
        let confstr = __library.get(b"confstr\0").map(|sym| *sym);
        let getpid = __library.get(b"getpid\0").map(|sym| *sym);
        let getppid = __library.get(b"getppid\0").map(|sym| *sym);
        let getpgrp = __library.get(b"getpgrp\0").map(|sym| *sym);
        let __getpgid = __library.get(b"__getpgid\0").map(|sym| *sym);
        let getpgid = __library.get(b"getpgid\0").map(|sym| *sym);
        let setpgid = __library.get(b"setpgid\0").map(|sym| *sym);
        let setpgrp = __library.get(b"setpgrp\0").map(|sym| *sym);
        let setsid = __library.get(b"setsid\0").map(|sym| *sym);
        let getsid = __library.get(b"getsid\0").map(|sym| *sym);
        let getuid = __library.get(b"getuid\0").map(|sym| *sym);
        let geteuid = __library.get(b"geteuid\0").map(|sym| *sym);
        let getgid = __library.get(b"getgid\0").map(|sym| *sym);
        let getegid = __library.get(b"getegid\0").map(|sym| *sym);
        let getgroups = __library.get(b"getgroups\0").map(|sym| *sym);
        let setuid = __library.get(b"setuid\0").map(|sym| *sym);
        let setreuid = __library.get(b"setreuid\0").map(|sym| *sym);
        let seteuid = __library.get(b"seteuid\0").map(|sym| *sym);
        let setgid = __library.get(b"setgid\0").map(|sym| *sym);
        let setregid = __library.get(b"setregid\0").map(|sym| *sym);
        let setegid = __library.get(b"setegid\0").map(|sym| *sym);
        let fork = __library.get(b"fork\0").map(|sym| *sym);
        let vfork = __library.get(b"vfork\0").map(|sym| *sym);
        let ttyname = __library.get(b"ttyname\0").map(|sym| *sym);
        let ttyname_r = __library.get(b"ttyname_r\0").map(|sym| *sym);
        let isatty = __library.get(b"isatty\0").map(|sym| *sym);
        let ttyslot = __library.get(b"ttyslot\0").map(|sym| *sym);
        let link = __library.get(b"link\0").map(|sym| *sym);
        let linkat = __library.get(b"linkat\0").map(|sym| *sym);
        let symlink = __library.get(b"symlink\0").map(|sym| *sym);
        let readlink = __library.get(b"readlink\0").map(|sym| *sym);
        let symlinkat = __library.get(b"symlinkat\0").map(|sym| *sym);
        let readlinkat = __library.get(b"readlinkat\0").map(|sym| *sym);
        let unlink = __library.get(b"unlink\0").map(|sym| *sym);
        let unlinkat = __library.get(b"unlinkat\0").map(|sym| *sym);
        let rmdir = __library.get(b"rmdir\0").map(|sym| *sym);
        let tcgetpgrp = __library.get(b"tcgetpgrp\0").map(|sym| *sym);
        let tcsetpgrp = __library.get(b"tcsetpgrp\0").map(|sym| *sym);
        let getlogin = __library.get(b"getlogin\0").map(|sym| *sym);
        let getlogin_r = __library.get(b"getlogin_r\0").map(|sym| *sym);
        let setlogin = __library.get(b"setlogin\0").map(|sym| *sym);
        let getopt = __library.get(b"getopt\0").map(|sym| *sym);
        let gethostname = __library.get(b"gethostname\0").map(|sym| *sym);
        let sethostname = __library.get(b"sethostname\0").map(|sym| *sym);
        let sethostid = __library.get(b"sethostid\0").map(|sym| *sym);
        let getdomainname = __library.get(b"getdomainname\0").map(|sym| *sym);
        let setdomainname = __library.get(b"setdomainname\0").map(|sym| *sym);
        let vhangup = __library.get(b"vhangup\0").map(|sym| *sym);
        let revoke = __library.get(b"revoke\0").map(|sym| *sym);
        let profil = __library.get(b"profil\0").map(|sym| *sym);
        let acct = __library.get(b"acct\0").map(|sym| *sym);
        let getusershell = __library.get(b"getusershell\0").map(|sym| *sym);
        let endusershell = __library.get(b"endusershell\0").map(|sym| *sym);
        let setusershell = __library.get(b"setusershell\0").map(|sym| *sym);
        let daemon = __library.get(b"daemon\0").map(|sym| *sym);
        let chroot = __library.get(b"chroot\0").map(|sym| *sym);
        let getpass = __library.get(b"getpass\0").map(|sym| *sym);
        let fsync = __library.get(b"fsync\0").map(|sym| *sym);
        let gethostid = __library.get(b"gethostid\0").map(|sym| *sym);
        let sync = __library.get(b"sync\0").map(|sym| *sym);
        let getpagesize = __library.get(b"getpagesize\0").map(|sym| *sym);
        let getdtablesize = __library.get(b"getdtablesize\0").map(|sym| *sym);
        let truncate = __library.get(b"truncate\0").map(|sym| *sym);
        let ftruncate = __library.get(b"ftruncate\0").map(|sym| *sym);
        let brk = __library.get(b"brk\0").map(|sym| *sym);
        let sbrk = __library.get(b"sbrk\0").map(|sym| *sym);
        let syscall = __library.get(b"syscall\0").map(|sym| *sym);
        let lockf = __library.get(b"lockf\0").map(|sym| *sym);
        let fdatasync = __library.get(b"fdatasync\0").map(|sym| *sym);
        let clock = __library.get(b"clock\0").map(|sym| *sym);
        let time = __library.get(b"time\0").map(|sym| *sym);
        let difftime = __library.get(b"difftime\0").map(|sym| *sym);
        let mktime = __library.get(b"mktime\0").map(|sym| *sym);
        let strftime = __library.get(b"strftime\0").map(|sym| *sym);
        let strftime_l = __library.get(b"strftime_l\0").map(|sym| *sym);
        let gmtime = __library.get(b"gmtime\0").map(|sym| *sym);
        let localtime = __library.get(b"localtime\0").map(|sym| *sym);
        let gmtime_r = __library.get(b"gmtime_r\0").map(|sym| *sym);
        let localtime_r = __library.get(b"localtime_r\0").map(|sym| *sym);
        let asctime = __library.get(b"asctime\0").map(|sym| *sym);
        let ctime = __library.get(b"ctime\0").map(|sym| *sym);
        let asctime_r = __library.get(b"asctime_r\0").map(|sym| *sym);
        let ctime_r = __library.get(b"ctime_r\0").map(|sym| *sym);
        let tzset = __library.get(b"tzset\0").map(|sym| *sym);
        let stime = __library.get(b"stime\0").map(|sym| *sym);
        let timegm = __library.get(b"timegm\0").map(|sym| *sym);
        let timelocal = __library.get(b"timelocal\0").map(|sym| *sym);
        let dysize = __library.get(b"dysize\0").map(|sym| *sym);
        let nanosleep = __library.get(b"nanosleep\0").map(|sym| *sym);
        let clock_getres = __library.get(b"clock_getres\0").map(|sym| *sym);
        let clock_gettime = __library.get(b"clock_gettime\0").map(|sym| *sym);
        let clock_settime = __library.get(b"clock_settime\0").map(|sym| *sym);
        let clock_nanosleep = __library.get(b"clock_nanosleep\0").map(|sym| *sym);
        let clock_getcpuclockid = __library.get(b"clock_getcpuclockid\0").map(|sym| *sym);
        let timer_create = __library.get(b"timer_create\0").map(|sym| *sym);
        let timer_delete = __library.get(b"timer_delete\0").map(|sym| *sym);
        let timer_settime = __library.get(b"timer_settime\0").map(|sym| *sym);
        let timer_gettime = __library.get(b"timer_gettime\0").map(|sym| *sym);
        let timer_getoverrun = __library.get(b"timer_getoverrun\0").map(|sym| *sym);
        let timespec_get = __library.get(b"timespec_get\0").map(|sym| *sym);
        let gettimeofday = __library.get(b"gettimeofday\0").map(|sym| *sym);
        let settimeofday = __library.get(b"settimeofday\0").map(|sym| *sym);
        let adjtime = __library.get(b"adjtime\0").map(|sym| *sym);
        let getitimer = __library.get(b"getitimer\0").map(|sym| *sym);
        let setitimer = __library.get(b"setitimer\0").map(|sym| *sym);
        let utimes = __library.get(b"utimes\0").map(|sym| *sym);
        let lutimes = __library.get(b"lutimes\0").map(|sym| *sym);
        let futimes = __library.get(b"futimes\0").map(|sym| *sym);
        let stat = __library.get(b"stat\0").map(|sym| *sym);
        let fstat = __library.get(b"fstat\0").map(|sym| *sym);
        let fstatat = __library.get(b"fstatat\0").map(|sym| *sym);
        let lstat = __library.get(b"lstat\0").map(|sym| *sym);
        let chmod = __library.get(b"chmod\0").map(|sym| *sym);
        let lchmod = __library.get(b"lchmod\0").map(|sym| *sym);
        let fchmod = __library.get(b"fchmod\0").map(|sym| *sym);
        let fchmodat = __library.get(b"fchmodat\0").map(|sym| *sym);
        let umask = __library.get(b"umask\0").map(|sym| *sym);
        let mkdir = __library.get(b"mkdir\0").map(|sym| *sym);
        let mkdirat = __library.get(b"mkdirat\0").map(|sym| *sym);
        let mknod = __library.get(b"mknod\0").map(|sym| *sym);
        let mknodat = __library.get(b"mknodat\0").map(|sym| *sym);
        let mkfifo = __library.get(b"mkfifo\0").map(|sym| *sym);
        let mkfifoat = __library.get(b"mkfifoat\0").map(|sym| *sym);
        let utimensat = __library.get(b"utimensat\0").map(|sym| *sym);
        let futimens = __library.get(b"futimens\0").map(|sym| *sym);
        let __fxstat = __library.get(b"__fxstat\0").map(|sym| *sym);
        let __xstat = __library.get(b"__xstat\0").map(|sym| *sym);
        let __lxstat = __library.get(b"__lxstat\0").map(|sym| *sym);
        let __fxstatat = __library.get(b"__fxstatat\0").map(|sym| *sym);
        let __xmknod = __library.get(b"__xmknod\0").map(|sym| *sym);
        let __xmknodat = __library.get(b"__xmknodat\0").map(|sym| *sym);
        let __sigismember = __library.get(b"__sigismember\0").map(|sym| *sym);
        let __sigaddset = __library.get(b"__sigaddset\0").map(|sym| *sym);
        let __sigdelset = __library.get(b"__sigdelset\0").map(|sym| *sym);
        let __sysv_signal = __library.get(b"__sysv_signal\0").map(|sym| *sym);
        let signal = __library.get(b"signal\0").map(|sym| *sym);
        let kill = __library.get(b"kill\0").map(|sym| *sym);
        let killpg = __library.get(b"killpg\0").map(|sym| *sym);
        let raise = __library.get(b"raise\0").map(|sym| *sym);
        let ssignal = __library.get(b"ssignal\0").map(|sym| *sym);
        let gsignal = __library.get(b"gsignal\0").map(|sym| *sym);
        let psignal = __library.get(b"psignal\0").map(|sym| *sym);
        let psiginfo = __library.get(b"psiginfo\0").map(|sym| *sym);
        let sigblock = __library.get(b"sigblock\0").map(|sym| *sym);
        let sigsetmask = __library.get(b"sigsetmask\0").map(|sym| *sym);
        let siggetmask = __library.get(b"siggetmask\0").map(|sym| *sym);
        let sigemptyset = __library.get(b"sigemptyset\0").map(|sym| *sym);
        let sigfillset = __library.get(b"sigfillset\0").map(|sym| *sym);
        let sigaddset = __library.get(b"sigaddset\0").map(|sym| *sym);
        let sigdelset = __library.get(b"sigdelset\0").map(|sym| *sym);
        let sigismember = __library.get(b"sigismember\0").map(|sym| *sym);
        let sigprocmask = __library.get(b"sigprocmask\0").map(|sym| *sym);
        let sigsuspend = __library.get(b"sigsuspend\0").map(|sym| *sym);
        let sigaction = __library.get(b"sigaction\0").map(|sym| *sym);
        let sigpending = __library.get(b"sigpending\0").map(|sym| *sym);
        let sigwait = __library.get(b"sigwait\0").map(|sym| *sym);
        let sigwaitinfo = __library.get(b"sigwaitinfo\0").map(|sym| *sym);
        let sigtimedwait = __library.get(b"sigtimedwait\0").map(|sym| *sym);
        let sigqueue = __library.get(b"sigqueue\0").map(|sym| *sym);
        let sigreturn = __library.get(b"sigreturn\0").map(|sym| *sym);
        let siginterrupt = __library.get(b"siginterrupt\0").map(|sym| *sym);
        let sigstack = __library.get(b"sigstack\0").map(|sym| *sym);
        let sigaltstack = __library.get(b"sigaltstack\0").map(|sym| *sym);
        let pthread_sigmask = __library.get(b"pthread_sigmask\0").map(|sym| *sym);
        let pthread_kill = __library.get(b"pthread_kill\0").map(|sym| *sym);
        let __libc_current_sigrtmin = __library.get(b"__libc_current_sigrtmin\0").map(|sym| *sym);
        let __libc_current_sigrtmax = __library.get(b"__libc_current_sigrtmax\0").map(|sym| *sym);
        let wait = __library.get(b"wait\0").map(|sym| *sym);
        let waitpid = __library.get(b"waitpid\0").map(|sym| *sym);
        let waitid = __library.get(b"waitid\0").map(|sym| *sym);
        let wait3 = __library.get(b"wait3\0").map(|sym| *sym);
        let wait4 = __library.get(b"wait4\0").map(|sym| *sym);
        let opendir = __library.get(b"opendir\0").map(|sym| *sym);
        let fdopendir = __library.get(b"fdopendir\0").map(|sym| *sym);
        let closedir = __library.get(b"closedir\0").map(|sym| *sym);
        let readdir = __library.get(b"readdir\0").map(|sym| *sym);
        let readdir_r = __library.get(b"readdir_r\0").map(|sym| *sym);
        let rewinddir = __library.get(b"rewinddir\0").map(|sym| *sym);
        let seekdir = __library.get(b"seekdir\0").map(|sym| *sym);
        let telldir = __library.get(b"telldir\0").map(|sym| *sym);
        let dirfd = __library.get(b"dirfd\0").map(|sym| *sym);
        let scandir = __library.get(b"scandir\0").map(|sym| *sym);
        let alphasort = __library.get(b"alphasort\0").map(|sym| *sym);
        let getdirentries = __library.get(b"getdirentries\0").map(|sym| *sym);
        let fcntl = __library.get(b"fcntl\0").map(|sym| *sym);
        let open = __library.get(b"open\0").map(|sym| *sym);
        let openat = __library.get(b"openat\0").map(|sym| *sym);
        let creat = __library.get(b"creat\0").map(|sym| *sym);
        let posix_fadvise = __library.get(b"posix_fadvise\0").map(|sym| *sym);
        let posix_fallocate = __library.get(b"posix_fallocate\0").map(|sym| *sym);
        let setgrent = __library.get(b"setgrent\0").map(|sym| *sym);
        let endgrent = __library.get(b"endgrent\0").map(|sym| *sym);
        let getgrent = __library.get(b"getgrent\0").map(|sym| *sym);
        let fgetgrent = __library.get(b"fgetgrent\0").map(|sym| *sym);
        let getgrgid = __library.get(b"getgrgid\0").map(|sym| *sym);
        let getgrnam = __library.get(b"getgrnam\0").map(|sym| *sym);
        let getgrgid_r = __library.get(b"getgrgid_r\0").map(|sym| *sym);
        let getgrnam_r = __library.get(b"getgrnam_r\0").map(|sym| *sym);
        let fgetgrent_r = __library.get(b"fgetgrent_r\0").map(|sym| *sym);
        let setgroups = __library.get(b"setgroups\0").map(|sym| *sym);
        let getgrouplist = __library.get(b"getgrouplist\0").map(|sym| *sym);
        let initgroups = __library.get(b"initgroups\0").map(|sym| *sym);
        let ftok = __library.get(b"ftok\0").map(|sym| *sym);
        let __getpagesize = __library.get(b"__getpagesize\0").map(|sym| *sym);
        let shmctl = __library.get(b"shmctl\0").map(|sym| *sym);
        let shmget = __library.get(b"shmget\0").map(|sym| *sym);
        let shmat = __library.get(b"shmat\0").map(|sym| *sym);
        let shmdt = __library.get(b"shmdt\0").map(|sym| *sym);
        let msgctl = __library.get(b"msgctl\0").map(|sym| *sym);
        let msgget = __library.get(b"msgget\0").map(|sym| *sym);
        let msgrcv = __library.get(b"msgrcv\0").map(|sym| *sym);
        let msgsnd = __library.get(b"msgsnd\0").map(|sym| *sym);
        let sysinfo = __library.get(b"sysinfo\0").map(|sym| *sym);
        let get_nprocs_conf = __library.get(b"get_nprocs_conf\0").map(|sym| *sym);
        let get_nprocs = __library.get(b"get_nprocs\0").map(|sym| *sym);
        let get_phys_pages = __library.get(b"get_phys_pages\0").map(|sym| *sym);
        let get_avphys_pages = __library.get(b"get_avphys_pages\0").map(|sym| *sym);
        let __errno_location = __library.get(b"__errno_location\0").map(|sym| *sym);
        let zlibVersion = __library.get(b"zlibVersion\0").map(|sym| *sym);
        let deflate = __library.get(b"deflate\0").map(|sym| *sym);
        let deflateEnd = __library.get(b"deflateEnd\0").map(|sym| *sym);
        let inflate = __library.get(b"inflate\0").map(|sym| *sym);
        let inflateEnd = __library.get(b"inflateEnd\0").map(|sym| *sym);
        let deflateSetDictionary = __library.get(b"deflateSetDictionary\0").map(|sym| *sym);
        let deflateGetDictionary = __library.get(b"deflateGetDictionary\0").map(|sym| *sym);
        let deflateCopy = __library.get(b"deflateCopy\0").map(|sym| *sym);
        let deflateReset = __library.get(b"deflateReset\0").map(|sym| *sym);
        let deflateParams = __library.get(b"deflateParams\0").map(|sym| *sym);
        let deflateTune = __library.get(b"deflateTune\0").map(|sym| *sym);
        let deflateBound = __library.get(b"deflateBound\0").map(|sym| *sym);
        let deflatePending = __library.get(b"deflatePending\0").map(|sym| *sym);
        let deflatePrime = __library.get(b"deflatePrime\0").map(|sym| *sym);
        let deflateSetHeader = __library.get(b"deflateSetHeader\0").map(|sym| *sym);
        let inflateSetDictionary = __library.get(b"inflateSetDictionary\0").map(|sym| *sym);
        let inflateGetDictionary = __library.get(b"inflateGetDictionary\0").map(|sym| *sym);
        let inflateSync = __library.get(b"inflateSync\0").map(|sym| *sym);
        let inflateCopy = __library.get(b"inflateCopy\0").map(|sym| *sym);
        let inflateReset = __library.get(b"inflateReset\0").map(|sym| *sym);
        let inflateReset2 = __library.get(b"inflateReset2\0").map(|sym| *sym);
        let inflatePrime = __library.get(b"inflatePrime\0").map(|sym| *sym);
        let inflateMark = __library.get(b"inflateMark\0").map(|sym| *sym);
        let inflateGetHeader = __library.get(b"inflateGetHeader\0").map(|sym| *sym);
        let inflateBack = __library.get(b"inflateBack\0").map(|sym| *sym);
        let inflateBackEnd = __library.get(b"inflateBackEnd\0").map(|sym| *sym);
        let zlibCompileFlags = __library.get(b"zlibCompileFlags\0").map(|sym| *sym);
        let compress = __library.get(b"compress\0").map(|sym| *sym);
        let compress2 = __library.get(b"compress2\0").map(|sym| *sym);
        let compressBound = __library.get(b"compressBound\0").map(|sym| *sym);
        let uncompress = __library.get(b"uncompress\0").map(|sym| *sym);
        let uncompress2 = __library.get(b"uncompress2\0").map(|sym| *sym);
        let gzdopen = __library.get(b"gzdopen\0").map(|sym| *sym);
        let gzbuffer = __library.get(b"gzbuffer\0").map(|sym| *sym);
        let gzsetparams = __library.get(b"gzsetparams\0").map(|sym| *sym);
        let gzread = __library.get(b"gzread\0").map(|sym| *sym);
        let gzfread = __library.get(b"gzfread\0").map(|sym| *sym);
        let gzwrite = __library.get(b"gzwrite\0").map(|sym| *sym);
        let gzfwrite = __library.get(b"gzfwrite\0").map(|sym| *sym);
        let gzprintf = __library.get(b"gzprintf\0").map(|sym| *sym);
        let gzputs = __library.get(b"gzputs\0").map(|sym| *sym);
        let gzgets = __library.get(b"gzgets\0").map(|sym| *sym);
        let gzputc = __library.get(b"gzputc\0").map(|sym| *sym);
        let gzgetc = __library.get(b"gzgetc\0").map(|sym| *sym);
        let gzungetc = __library.get(b"gzungetc\0").map(|sym| *sym);
        let gzflush = __library.get(b"gzflush\0").map(|sym| *sym);
        let gzrewind = __library.get(b"gzrewind\0").map(|sym| *sym);
        let gzeof = __library.get(b"gzeof\0").map(|sym| *sym);
        let gzdirect = __library.get(b"gzdirect\0").map(|sym| *sym);
        let gzclose = __library.get(b"gzclose\0").map(|sym| *sym);
        let gzclose_r = __library.get(b"gzclose_r\0").map(|sym| *sym);
        let gzclose_w = __library.get(b"gzclose_w\0").map(|sym| *sym);
        let gzerror = __library.get(b"gzerror\0").map(|sym| *sym);
        let gzclearerr = __library.get(b"gzclearerr\0").map(|sym| *sym);
        let adler32 = __library.get(b"adler32\0").map(|sym| *sym);
        let adler32_z = __library.get(b"adler32_z\0").map(|sym| *sym);
        let crc32 = __library.get(b"crc32\0").map(|sym| *sym);
        let crc32_z = __library.get(b"crc32_z\0").map(|sym| *sym);
        let deflateInit_ = __library.get(b"deflateInit_\0").map(|sym| *sym);
        let inflateInit_ = __library.get(b"inflateInit_\0").map(|sym| *sym);
        let deflateInit2_ = __library.get(b"deflateInit2_\0").map(|sym| *sym);
        let inflateInit2_ = __library.get(b"inflateInit2_\0").map(|sym| *sym);
        let inflateBackInit_ = __library.get(b"inflateBackInit_\0").map(|sym| *sym);
        let gzgetc_ = __library.get(b"gzgetc_\0").map(|sym| *sym);
        let gzopen = __library.get(b"gzopen\0").map(|sym| *sym);
        let gzseek = __library.get(b"gzseek\0").map(|sym| *sym);
        let gztell = __library.get(b"gztell\0").map(|sym| *sym);
        let gzoffset = __library.get(b"gzoffset\0").map(|sym| *sym);
        let adler32_combine = __library.get(b"adler32_combine\0").map(|sym| *sym);
        let crc32_combine = __library.get(b"crc32_combine\0").map(|sym| *sym);
        let zError = __library.get(b"zError\0").map(|sym| *sym);
        let inflateSyncPoint = __library.get(b"inflateSyncPoint\0").map(|sym| *sym);
        let get_crc_table = __library.get(b"get_crc_table\0").map(|sym| *sym);
        let inflateUndermine = __library.get(b"inflateUndermine\0").map(|sym| *sym);
        let inflateValidate = __library.get(b"inflateValidate\0").map(|sym| *sym);
        let inflateCodesUsed = __library.get(b"inflateCodesUsed\0").map(|sym| *sym);
        let inflateResetKeep = __library.get(b"inflateResetKeep\0").map(|sym| *sym);
        let deflateResetKeep = __library.get(b"deflateResetKeep\0").map(|sym| *sym);
        let gzvprintf = __library.get(b"gzvprintf\0").map(|sym| *sym);
        let __sched_cpucount = __library.get(b"__sched_cpucount\0").map(|sym| *sym);
        let __sched_cpualloc = __library.get(b"__sched_cpualloc\0").map(|sym| *sym);
        let __sched_cpufree = __library.get(b"__sched_cpufree\0").map(|sym| *sym);
        let sched_setparam = __library.get(b"sched_setparam\0").map(|sym| *sym);
        let sched_getparam = __library.get(b"sched_getparam\0").map(|sym| *sym);
        let sched_setscheduler = __library.get(b"sched_setscheduler\0").map(|sym| *sym);
        let sched_getscheduler = __library.get(b"sched_getscheduler\0").map(|sym| *sym);
        let sched_yield = __library.get(b"sched_yield\0").map(|sym| *sym);
        let sched_get_priority_max = __library.get(b"sched_get_priority_max\0").map(|sym| *sym);
        let sched_get_priority_min = __library.get(b"sched_get_priority_min\0").map(|sym| *sym);
        let sched_rr_get_interval = __library.get(b"sched_rr_get_interval\0").map(|sym| *sym);
        let pthread_create = __library.get(b"pthread_create\0").map(|sym| *sym);
        let pthread_exit = __library.get(b"pthread_exit\0").map(|sym| *sym);
        let pthread_join = __library.get(b"pthread_join\0").map(|sym| *sym);
        let pthread_detach = __library.get(b"pthread_detach\0").map(|sym| *sym);
        let pthread_self = __library.get(b"pthread_self\0").map(|sym| *sym);
        let pthread_equal = __library.get(b"pthread_equal\0").map(|sym| *sym);
        let pthread_attr_init = __library.get(b"pthread_attr_init\0").map(|sym| *sym);
        let pthread_attr_destroy = __library.get(b"pthread_attr_destroy\0").map(|sym| *sym);
        let pthread_attr_getdetachstate = __library
            .get(b"pthread_attr_getdetachstate\0")
            .map(|sym| *sym);
        let pthread_attr_setdetachstate = __library
            .get(b"pthread_attr_setdetachstate\0")
            .map(|sym| *sym);
        let pthread_attr_getguardsize = __library
            .get(b"pthread_attr_getguardsize\0")
            .map(|sym| *sym);
        let pthread_attr_setguardsize = __library
            .get(b"pthread_attr_setguardsize\0")
            .map(|sym| *sym);
        let pthread_attr_getschedparam = __library
            .get(b"pthread_attr_getschedparam\0")
            .map(|sym| *sym);
        let pthread_attr_setschedparam = __library
            .get(b"pthread_attr_setschedparam\0")
            .map(|sym| *sym);
        let pthread_attr_getschedpolicy = __library
            .get(b"pthread_attr_getschedpolicy\0")
            .map(|sym| *sym);
        let pthread_attr_setschedpolicy = __library
            .get(b"pthread_attr_setschedpolicy\0")
            .map(|sym| *sym);
        let pthread_attr_getinheritsched = __library
            .get(b"pthread_attr_getinheritsched\0")
            .map(|sym| *sym);
        let pthread_attr_setinheritsched = __library
            .get(b"pthread_attr_setinheritsched\0")
            .map(|sym| *sym);
        let pthread_attr_getscope = __library.get(b"pthread_attr_getscope\0").map(|sym| *sym);
        let pthread_attr_setscope = __library.get(b"pthread_attr_setscope\0").map(|sym| *sym);
        let pthread_attr_getstackaddr = __library
            .get(b"pthread_attr_getstackaddr\0")
            .map(|sym| *sym);
        let pthread_attr_setstackaddr = __library
            .get(b"pthread_attr_setstackaddr\0")
            .map(|sym| *sym);
        let pthread_attr_getstacksize = __library
            .get(b"pthread_attr_getstacksize\0")
            .map(|sym| *sym);
        let pthread_attr_setstacksize = __library
            .get(b"pthread_attr_setstacksize\0")
            .map(|sym| *sym);
        let pthread_attr_getstack = __library.get(b"pthread_attr_getstack\0").map(|sym| *sym);
        let pthread_attr_setstack = __library.get(b"pthread_attr_setstack\0").map(|sym| *sym);
        let pthread_setschedparam = __library.get(b"pthread_setschedparam\0").map(|sym| *sym);
        let pthread_getschedparam = __library.get(b"pthread_getschedparam\0").map(|sym| *sym);
        let pthread_setschedprio = __library.get(b"pthread_setschedprio\0").map(|sym| *sym);
        let pthread_once = __library.get(b"pthread_once\0").map(|sym| *sym);
        let pthread_setcancelstate = __library.get(b"pthread_setcancelstate\0").map(|sym| *sym);
        let pthread_setcanceltype = __library.get(b"pthread_setcanceltype\0").map(|sym| *sym);
        let pthread_cancel = __library.get(b"pthread_cancel\0").map(|sym| *sym);
        let pthread_testcancel = __library.get(b"pthread_testcancel\0").map(|sym| *sym);
        let __pthread_register_cancel = __library
            .get(b"__pthread_register_cancel\0")
            .map(|sym| *sym);
        let __pthread_unregister_cancel = __library
            .get(b"__pthread_unregister_cancel\0")
            .map(|sym| *sym);
        let __pthread_unwind_next = __library.get(b"__pthread_unwind_next\0").map(|sym| *sym);
        let __sigsetjmp = __library.get(b"__sigsetjmp\0").map(|sym| *sym);
        let pthread_mutex_init = __library.get(b"pthread_mutex_init\0").map(|sym| *sym);
        let pthread_mutex_destroy = __library.get(b"pthread_mutex_destroy\0").map(|sym| *sym);
        let pthread_mutex_trylock = __library.get(b"pthread_mutex_trylock\0").map(|sym| *sym);
        let pthread_mutex_lock = __library.get(b"pthread_mutex_lock\0").map(|sym| *sym);
        let pthread_mutex_timedlock = __library.get(b"pthread_mutex_timedlock\0").map(|sym| *sym);
        let pthread_mutex_unlock = __library.get(b"pthread_mutex_unlock\0").map(|sym| *sym);
        let pthread_mutex_getprioceiling = __library
            .get(b"pthread_mutex_getprioceiling\0")
            .map(|sym| *sym);
        let pthread_mutex_setprioceiling = __library
            .get(b"pthread_mutex_setprioceiling\0")
            .map(|sym| *sym);
        let pthread_mutex_consistent = __library.get(b"pthread_mutex_consistent\0").map(|sym| *sym);
        let pthread_mutexattr_init = __library.get(b"pthread_mutexattr_init\0").map(|sym| *sym);
        let pthread_mutexattr_destroy = __library
            .get(b"pthread_mutexattr_destroy\0")
            .map(|sym| *sym);
        let pthread_mutexattr_getpshared = __library
            .get(b"pthread_mutexattr_getpshared\0")
            .map(|sym| *sym);
        let pthread_mutexattr_setpshared = __library
            .get(b"pthread_mutexattr_setpshared\0")
            .map(|sym| *sym);
        let pthread_mutexattr_gettype = __library
            .get(b"pthread_mutexattr_gettype\0")
            .map(|sym| *sym);
        let pthread_mutexattr_settype = __library
            .get(b"pthread_mutexattr_settype\0")
            .map(|sym| *sym);
        let pthread_mutexattr_getprotocol = __library
            .get(b"pthread_mutexattr_getprotocol\0")
            .map(|sym| *sym);
        let pthread_mutexattr_setprotocol = __library
            .get(b"pthread_mutexattr_setprotocol\0")
            .map(|sym| *sym);
        let pthread_mutexattr_getprioceiling = __library
            .get(b"pthread_mutexattr_getprioceiling\0")
            .map(|sym| *sym);
        let pthread_mutexattr_setprioceiling = __library
            .get(b"pthread_mutexattr_setprioceiling\0")
            .map(|sym| *sym);
        let pthread_mutexattr_getrobust = __library
            .get(b"pthread_mutexattr_getrobust\0")
            .map(|sym| *sym);
        let pthread_mutexattr_setrobust = __library
            .get(b"pthread_mutexattr_setrobust\0")
            .map(|sym| *sym);
        let pthread_rwlock_init = __library.get(b"pthread_rwlock_init\0").map(|sym| *sym);
        let pthread_rwlock_destroy = __library.get(b"pthread_rwlock_destroy\0").map(|sym| *sym);
        let pthread_rwlock_rdlock = __library.get(b"pthread_rwlock_rdlock\0").map(|sym| *sym);
        let pthread_rwlock_tryrdlock = __library.get(b"pthread_rwlock_tryrdlock\0").map(|sym| *sym);
        let pthread_rwlock_timedrdlock = __library
            .get(b"pthread_rwlock_timedrdlock\0")
            .map(|sym| *sym);
        let pthread_rwlock_wrlock = __library.get(b"pthread_rwlock_wrlock\0").map(|sym| *sym);
        let pthread_rwlock_trywrlock = __library.get(b"pthread_rwlock_trywrlock\0").map(|sym| *sym);
        let pthread_rwlock_timedwrlock = __library
            .get(b"pthread_rwlock_timedwrlock\0")
            .map(|sym| *sym);
        let pthread_rwlock_unlock = __library.get(b"pthread_rwlock_unlock\0").map(|sym| *sym);
        let pthread_rwlockattr_init = __library.get(b"pthread_rwlockattr_init\0").map(|sym| *sym);
        let pthread_rwlockattr_destroy = __library
            .get(b"pthread_rwlockattr_destroy\0")
            .map(|sym| *sym);
        let pthread_rwlockattr_getpshared = __library
            .get(b"pthread_rwlockattr_getpshared\0")
            .map(|sym| *sym);
        let pthread_rwlockattr_setpshared = __library
            .get(b"pthread_rwlockattr_setpshared\0")
            .map(|sym| *sym);
        let pthread_rwlockattr_getkind_np = __library
            .get(b"pthread_rwlockattr_getkind_np\0")
            .map(|sym| *sym);
        let pthread_rwlockattr_setkind_np = __library
            .get(b"pthread_rwlockattr_setkind_np\0")
            .map(|sym| *sym);
        let pthread_cond_init = __library.get(b"pthread_cond_init\0").map(|sym| *sym);
        let pthread_cond_destroy = __library.get(b"pthread_cond_destroy\0").map(|sym| *sym);
        let pthread_cond_signal = __library.get(b"pthread_cond_signal\0").map(|sym| *sym);
        let pthread_cond_broadcast = __library.get(b"pthread_cond_broadcast\0").map(|sym| *sym);
        let pthread_cond_wait = __library.get(b"pthread_cond_wait\0").map(|sym| *sym);
        let pthread_cond_timedwait = __library.get(b"pthread_cond_timedwait\0").map(|sym| *sym);
        let pthread_condattr_init = __library.get(b"pthread_condattr_init\0").map(|sym| *sym);
        let pthread_condattr_destroy = __library.get(b"pthread_condattr_destroy\0").map(|sym| *sym);
        let pthread_condattr_getpshared = __library
            .get(b"pthread_condattr_getpshared\0")
            .map(|sym| *sym);
        let pthread_condattr_setpshared = __library
            .get(b"pthread_condattr_setpshared\0")
            .map(|sym| *sym);
        let pthread_condattr_getclock = __library
            .get(b"pthread_condattr_getclock\0")
            .map(|sym| *sym);
        let pthread_condattr_setclock = __library
            .get(b"pthread_condattr_setclock\0")
            .map(|sym| *sym);
        let pthread_spin_init = __library.get(b"pthread_spin_init\0").map(|sym| *sym);
        let pthread_spin_destroy = __library.get(b"pthread_spin_destroy\0").map(|sym| *sym);
        let pthread_spin_lock = __library.get(b"pthread_spin_lock\0").map(|sym| *sym);
        let pthread_spin_trylock = __library.get(b"pthread_spin_trylock\0").map(|sym| *sym);
        let pthread_spin_unlock = __library.get(b"pthread_spin_unlock\0").map(|sym| *sym);
        let pthread_barrier_init = __library.get(b"pthread_barrier_init\0").map(|sym| *sym);
        let pthread_barrier_destroy = __library.get(b"pthread_barrier_destroy\0").map(|sym| *sym);
        let pthread_barrier_wait = __library.get(b"pthread_barrier_wait\0").map(|sym| *sym);
        let pthread_barrierattr_init = __library.get(b"pthread_barrierattr_init\0").map(|sym| *sym);
        let pthread_barrierattr_destroy = __library
            .get(b"pthread_barrierattr_destroy\0")
            .map(|sym| *sym);
        let pthread_barrierattr_getpshared = __library
            .get(b"pthread_barrierattr_getpshared\0")
            .map(|sym| *sym);
        let pthread_barrierattr_setpshared = __library
            .get(b"pthread_barrierattr_setpshared\0")
            .map(|sym| *sym);
        let pthread_key_create = __library.get(b"pthread_key_create\0").map(|sym| *sym);
        let pthread_key_delete = __library.get(b"pthread_key_delete\0").map(|sym| *sym);
        let pthread_getspecific = __library.get(b"pthread_getspecific\0").map(|sym| *sym);
        let pthread_setspecific = __library.get(b"pthread_setspecific\0").map(|sym| *sym);
        let pthread_getcpuclockid = __library.get(b"pthread_getcpuclockid\0").map(|sym| *sym);
        let pthread_atfork = __library.get(b"pthread_atfork\0").map(|sym| *sym);
        let ioctl = __library.get(b"ioctl\0").map(|sym| *sym);
        let device_audio = __library.get(b"device_audio\0").map(|sym| *sym);
        let device_has_audio = __library.get(b"device_has_audio\0").map(|sym| *sym);
        let device_hp_detect_cfg = __library.get(b"device_hp_detect_cfg\0").map(|sym| *sym);
        let init_hwconfig = __library.get(b"init_hwconfig\0").map(|sym| *sym);
        let device_ID = __library.get(b"device_ID\0").map(|sym| *sym);
        let device_platform = __library.get(b"device_platform\0").map(|sym| *sym);
        let device_number = __library.get(b"device_number\0").map(|sym| *sym);
        let device_display = __library.get(b"device_display\0").map(|sym| *sym);
        let device_display_colormask = __library.get(b"device_display_colormask\0").map(|sym| *sym);
        let device_display_height = __library.get(b"device_display_height\0").map(|sym| *sym);
        let device_display_width = __library.get(b"device_display_width\0").map(|sym| *sym);
        let device_display_scanline = __library.get(b"device_display_scanline\0").map(|sym| *sym);
        let device_display_dpi = __library.get(b"device_display_dpi\0").map(|sym| *sym);
        let device_display_native_orientation = __library
            .get(b"device_display_native_orientation\0")
            .map(|sym| *sym);
        let device_display_position = __library.get(b"device_display_position\0").map(|sym| *sym);
        let device_epdc = __library.get(b"device_epdc\0").map(|sym| *sym);
        let device_epdc_init = __library.get(b"device_epdc_init\0").map(|sym| *sym);
        let device_keyboard = __library.get(b"device_keyboard\0").map(|sym| *sym);
        let device_touchpanel = __library.get(b"device_touchpanel\0").map(|sym| *sym);
        let device_has_touchpanel = __library.get(b"device_has_touchpanel\0").map(|sym| *sym);
        let device_input_init = __library.get(b"device_input_init\0").map(|sym| *sym);
        let device_input_read = __library.get(b"device_input_read\0").map(|sym| *sym);
        let device_keyboard_translate = __library
            .get(b"device_keyboard_translate\0")
            .map(|sym| *sym);
        let device_keyboard_buttons = __library.get(b"device_keyboard_buttons\0").map(|sym| *sym);
        let device_keyboard_state = __library.get(b"device_keyboard_state\0").map(|sym| *sym);
        let device_touchpanel_getmatrix = __library
            .get(b"device_touchpanel_getmatrix\0")
            .map(|sym| *sym);
        let add_input_device = __library.get(b"add_input_device\0").map(|sym| *sym);
        let remove_input_device = __library.get(b"remove_input_device\0").map(|sym| *sym);
        let device_slider = __library.get(b"device_slider\0").map(|sym| *sym);
        let device_has_slider = __library.get(b"device_has_slider\0").map(|sym| *sym);
        let device_slider_cfg = __library.get(b"device_slider_cfg\0").map(|sym| *sym);
        let device_gyroscope = __library.get(b"device_gyroscope\0").map(|sym| *sym);
        let device_gyroscope_placement = __library
            .get(b"device_gyroscope_placement\0")
            .map(|sym| *sym);
        let device_has_gyroscope = __library.get(b"device_has_gyroscope\0").map(|sym| *sym);
        let device_has_extcard = __library.get(b"device_has_extcard\0").map(|sym| *sym);
        let device_usb = __library.get(b"device_usb\0").map(|sym| *sym);
        let device_has_usb = __library.get(b"device_has_usb\0").map(|sym| *sym);
        let device_has_usbhost = __library.get(b"device_has_usbhost\0").map(|sym| *sym);
        let device_frontlight = __library.get(b"device_frontlight\0").map(|sym| *sym);
        let device_has_frontlight = __library.get(b"device_has_frontlight\0").map(|sym| *sym);
        let device_model = __library.get(b"device_model\0").map(|sym| *sym);
        let device_serial_number = __library.get(b"device_serial_number\0").map(|sym| *sym);
        let device_init_led = __library.get(b"device_init_led\0").map(|sym| *sym);
        let device_set_led = __library.get(b"device_set_led\0").map(|sym| *sym);
        let device_get_led = __library.get(b"device_get_led\0").map(|sym| *sym);
        let device_battery_percent = __library.get(b"device_battery_percent\0").map(|sym| *sym);
        let device_is_powered = __library.get(b"device_is_powered\0").map(|sym| *sym);
        let device_set_bootcramfs_flag = __library
            .get(b"device_set_bootcramfs_flag\0")
            .map(|sym| *sym);
        let device_reboot = __library.get(b"device_reboot\0").map(|sym| *sym);
        let device_poweroff = __library.get(b"device_poweroff\0").map(|sym| *sym);
        let device_frontlight_init = __library.get(b"device_frontlight_init\0").map(|sym| *sym);
        let device_lightsensor = __library.get(b"device_lightsensor\0").map(|sym| *sym);
        let device_has_lightsensor = __library.get(b"device_has_lightsensor\0").map(|sym| *sym);
        let device_bluetooth = __library.get(b"device_bluetooth\0").map(|sym| *sym);
        let device_has_bluetooth = __library.get(b"device_has_bluetooth\0").map(|sym| *sym);
        let device_wifi = __library.get(b"device_wifi\0").map(|sym| *sym);
        let device_has_wifi = __library.get(b"device_has_wifi\0").map(|sym| *sym);
        let device_gsm = __library.get(b"device_gsm\0").map(|sym| *sym);
        let device_has_gsm = __library.get(b"device_has_gsm\0").map(|sym| *sym);
        let device_suspend = __library.get(b"device_suspend\0").map(|sym| *sym);
        let device_set_wakealarm = __library.get(b"device_set_wakealarm\0").map(|sym| *sym);
        let device_write_file = __library.get(b"device_write_file\0").map(|sym| *sym);
        let device_write_file_int = __library.get(b"device_write_file_int\0").map(|sym| *sym);
        let device_read_bin_file = __library.get(b"device_read_bin_file\0").map(|sym| *sym);
        let device_read_file = __library.get(b"device_read_file\0").map(|sym| *sym);
        let device_read_file_int = __library.get(b"device_read_file_int\0").map(|sym| *sym);
        let device_power_led_cfg = __library.get(b"device_power_led_cfg\0").map(|sym| *sym);
        let device_storage_cfg = __library.get(b"device_storage_cfg\0").map(|sym| *sym);
        let iv_get_default_font = __library.get(b"iv_get_default_font\0").map(|sym| *sym);
        let GetHardwareDepth = __library.get(b"GetHardwareDepth\0").map(|sym| *sym);
        let iv_sizei = __library.get(b"iv_sizei\0").map(|sym| *sym);
        let iv_sizef = __library.get(b"iv_sizef\0").map(|sym| *sym);
        let iv_sized = __library.get(b"iv_sized\0").map(|sym| *sym);
        let iv_half_sizei = __library.get(b"iv_half_sizei\0").map(|sym| *sym);
        let iv_half_sizef = __library.get(b"iv_half_sizef\0").map(|sym| *sym);
        let iv_half_sized = __library.get(b"iv_half_sized\0").map(|sym| *sym);
        let iv_bitmap_ref_from_canvas = __library
            .get(b"iv_bitmap_ref_from_canvas\0")
            .map(|sym| *sym);
        let stacktrace_dump = __library.get(b"stacktrace_dump\0").map(|sym| *sym);
        let OpenScreen = __library.get(b"OpenScreen\0").map(|sym| *sym);
        let IsScreenOpened = __library.get(b"IsScreenOpened\0").map(|sym| *sym);
        let OpenScreenExt = __library.get(b"OpenScreenExt\0").map(|sym| *sym);
        let InkViewMain = __library.get(b"InkViewMain\0").map(|sym| *sym);
        let CloseApp = __library.get(b"CloseApp\0").map(|sym| *sym);
        let InitInkview = __library.get(b"InitInkview\0").map(|sym| *sym);
        let iv_new_vector2i = __library.get(b"iv_new_vector2i\0").map(|sym| *sym);
        let iv_new_vector2f = __library.get(b"iv_new_vector2f\0").map(|sym| *sym);
        let iv_new_vector2d = __library.get(b"iv_new_vector2d\0").map(|sym| *sym);
        let iv_vec2i_to2d = __library.get(b"iv_vec2i_to2d\0").map(|sym| *sym);
        let iv_new_matrix2i = __library.get(b"iv_new_matrix2i\0").map(|sym| *sym);
        let iv_new_matrix2f = __library.get(b"iv_new_matrix2f\0").map(|sym| *sym);
        let iv_new_matrix2d = __library.get(b"iv_new_matrix2d\0").map(|sym| *sym);
        let iv_new_complex2f = __library.get(b"iv_new_complex2f\0").map(|sym| *sym);
        let iv_new_complex2d = __library.get(b"iv_new_complex2d\0").map(|sym| *sym);
        let iv_new_identity_matrix2i = __library.get(b"iv_new_identity_matrix2i\0").map(|sym| *sym);
        let iv_new_identity_matrix2f = __library.get(b"iv_new_identity_matrix2f\0").map(|sym| *sym);
        let iv_new_identity_matrix2d = __library.get(b"iv_new_identity_matrix2d\0").map(|sym| *sym);
        let iRect = __library.get(b"iRect\0").map(|sym| *sym);
        let iv_new_rect = __library.get(b"iv_new_rect\0").map(|sym| *sym);
        let iv_empty_rect = __library.get(b"iv_empty_rect\0").map(|sym| *sym);
        let ScreenWidth = __library.get(b"ScreenWidth\0").map(|sym| *sym);
        let ScreenHeight = __library.get(b"ScreenHeight\0").map(|sym| *sym);
        let SetOrientation = __library.get(b"SetOrientation\0").map(|sym| *sym);
        let GetOrientation = __library.get(b"GetOrientation\0").map(|sym| *sym);
        let SetGlobalOrientation = __library.get(b"SetGlobalOrientation\0").map(|sym| *sym);
        let GetGlobalOrientation = __library.get(b"GetGlobalOrientation\0").map(|sym| *sym);
        let QueryGSensor = __library.get(b"QueryGSensor\0").map(|sym| *sym);
        let SetGSensor = __library.get(b"SetGSensor\0").map(|sym| *sym);
        let ReadGSensor = __library.get(b"ReadGSensor\0").map(|sym| *sym);
        let CalibrateGSensor = __library.get(b"CalibrateGSensor\0").map(|sym| *sym);
        let SetGSensorEnabled = __library.get(b"SetGSensorEnabled\0").map(|sym| *sym);
        let IsGSensorEnabled = __library.get(b"IsGSensorEnabled\0").map(|sym| *sym);
        let GetGSensorOrientation = __library.get(b"GetGSensorOrientation\0").map(|sym| *sym);
        let SetActualGSensorOrientation = __library
            .get(b"SetActualGSensorOrientation\0")
            .map(|sym| *sym);
        let GetActualGSensorOrientation = __library
            .get(b"GetActualGSensorOrientation\0")
            .map(|sym| *sym);
        let SetDefaultOrientation = __library.get(b"SetDefaultOrientation\0").map(|sym| *sym);
        let GetDefaultOrientation = __library.get(b"GetDefaultOrientation\0").map(|sym| *sym);
        let CheckAndSetUpSideDownOrientation = __library
            .get(b"CheckAndSetUpSideDownOrientation\0")
            .map(|sym| *sym);
        let IsDeviceSupportUpSideDown = __library
            .get(b"IsDeviceSupportUpSideDown\0")
            .map(|sym| *sym);
        let ClearScreen = __library.get(b"ClearScreen\0").map(|sym| *sym);
        let SetClip = __library.get(b"SetClip\0").map(|sym| *sym);
        let SetClipRect = __library.get(b"SetClipRect\0").map(|sym| *sym);
        let GetClip = __library.get(b"GetClip\0").map(|sym| *sym);
        let GetClipRect = __library.get(b"GetClipRect\0").map(|sym| *sym);
        let MergeClipRect = __library.get(b"MergeClipRect\0").map(|sym| *sym);
        let DrawPixel = __library.get(b"DrawPixel\0").map(|sym| *sym);
        let DrawLine = __library.get(b"DrawLine\0").map(|sym| *sym);
        let DrawLineEx = __library.get(b"DrawLineEx\0").map(|sym| *sym);
        let DrawDashLine = __library.get(b"DrawDashLine\0").map(|sym| *sym);
        let DrawRect = __library.get(b"DrawRect\0").map(|sym| *sym);
        let DrawRectRound = __library.get(b"DrawRectRound\0").map(|sym| *sym);
        let TriangleExternalRect = __library.get(b"TriangleExternalRect\0").map(|sym| *sym);
        let FillTriangularArea = __library.get(b"FillTriangularArea\0").map(|sym| *sym);
        let FillArea = __library.get(b"FillArea\0").map(|sym| *sym);
        let FillAreaRect = __library.get(b"FillAreaRect\0").map(|sym| *sym);
        let InvertArea = __library.get(b"InvertArea\0").map(|sym| *sym);
        let InvertAreaBW = __library.get(b"InvertAreaBW\0").map(|sym| *sym);
        let ColorMapCreate = __library.get(b"ColorMapCreate\0").map(|sym| *sym);
        let ColorMapDestroy = __library.get(b"ColorMapDestroy\0").map(|sym| *sym);
        let InvertAreaMap = __library.get(b"InvertAreaMap\0").map(|sym| *sym);
        let DimArea = __library.get(b"DimArea\0").map(|sym| *sym);
        let DrawSelection = __library.get(b"DrawSelection\0").map(|sym| *sym);
        let DrawCircle = __library.get(b"DrawCircle\0").map(|sym| *sym);
        let DrawHorizontalSeparator = __library.get(b"DrawHorizontalSeparator\0").map(|sym| *sym);
        let DrawCircleQuarter = __library.get(b"DrawCircleQuarter\0").map(|sym| *sym);
        let GetDefaultFrameCertifiedThickness = __library
            .get(b"GetDefaultFrameCertifiedThickness\0")
            .map(|sym| *sym);
        let GetDefaultFrameCertifiedRadius = __library
            .get(b"GetDefaultFrameCertifiedRadius\0")
            .map(|sym| *sym);
        let DrawFrameCertified = __library.get(b"DrawFrameCertified\0").map(|sym| *sym);
        let DrawFrameRectCertified = __library.get(b"DrawFrameRectCertified\0").map(|sym| *sym);
        let DrawFrameCertifiedEx = __library.get(b"DrawFrameCertifiedEx\0").map(|sym| *sym);
        let DrawFrameRectCertifiedEx = __library.get(b"DrawFrameRectCertifiedEx\0").map(|sym| *sym);
        let processCircle = __library.get(b"processCircle\0").map(|sym| *sym);
        let invertCircle = __library.get(b"invertCircle\0").map(|sym| *sym);
        let DrawPickOut = __library.get(b"DrawPickOut\0").map(|sym| *sym);
        let DrawPickOutEx = __library.get(b"DrawPickOutEx\0").map(|sym| *sym);
        let DitherArea = __library.get(b"DitherArea\0").map(|sym| *sym);
        let DitherAreaQuick2Level = __library.get(b"DitherAreaQuick2Level\0").map(|sym| *sym);
        let DitherAreaPattern2Level = __library.get(b"DitherAreaPattern2Level\0").map(|sym| *sym);
        let MakeBW = __library.get(b"MakeBW\0").map(|sym| *sym);
        let QuickFloyd16Dither = __library.get(b"QuickFloyd16Dither\0").map(|sym| *sym);
        let Stretch = __library.get(b"Stretch\0").map(|sym| *sym);
        let StretchArea = __library.get(b"StretchArea\0").map(|sym| *sym);
        let StretchAreaBW = __library.get(b"StretchAreaBW\0").map(|sym| *sym);
        let SetCanvas = __library.get(b"SetCanvas\0").map(|sym| *sym);
        let GetCanvas = __library.get(b"GetCanvas\0").map(|sym| *sym);
        let Repaint = __library.get(b"Repaint\0").map(|sym| *sym);
        let DrawFrame = __library.get(b"DrawFrame\0").map(|sym| *sym);
        let DrawFrameDialog = __library.get(b"DrawFrameDialog\0").map(|sym| *sym);
        let CheckFramePointer = __library.get(b"CheckFramePointer\0").map(|sym| *sym);
        let DrawBorder = __library.get(b"DrawBorder\0").map(|sym| *sym);
        let DrawPager = __library.get(b"DrawPager\0").map(|sym| *sym);
        let GetPagerRect = __library.get(b"GetPagerRect\0").map(|sym| *sym);
        let GetPagerHeight = __library.get(b"GetPagerHeight\0").map(|sym| *sym);
        let IsPagerEvent = __library.get(b"IsPagerEvent\0").map(|sym| *sym);
        let PagerHandler = __library.get(b"PagerHandler\0").map(|sym| *sym);
        let DrawDiagonalHatch = __library.get(b"DrawDiagonalHatch\0").map(|sym| *sym);
        let DrawDiagonalHatchLimits = __library.get(b"DrawDiagonalHatchLimits\0").map(|sym| *sym);
        let Transparent = __library.get(b"Transparent\0").map(|sym| *sym);
        let TransparentRect = __library.get(b"TransparentRect\0").map(|sym| *sym);
        let TransparentGradientData = __library.get(b"TransparentGradientData\0").map(|sym| *sym);
        let TransparentGradient = __library.get(b"TransparentGradient\0").map(|sym| *sym);
        let TransparentGradientRect = __library.get(b"TransparentGradientRect\0").map(|sym| *sym);
        let LoadBitmap = __library.get(b"LoadBitmap\0").map(|sym| *sym);
        let zLoadBitmap = __library.get(b"zLoadBitmap\0").map(|sym| *sym);
        let SaveBitmap = __library.get(b"SaveBitmap\0").map(|sym| *sym);
        let BitmapFromCanvas = __library.get(b"BitmapFromCanvas\0").map(|sym| *sym);
        let BitmapFromScreen = __library.get(b"BitmapFromScreen\0").map(|sym| *sym);
        let BitmapFromScreenR = __library.get(b"BitmapFromScreenR\0").map(|sym| *sym);
        let NewBitmap = __library.get(b"NewBitmap\0").map(|sym| *sym);
        let SetLoadImageFlags = __library.get(b"SetLoadImageFlags\0").map(|sym| *sym);
        let LoadJPEG = __library.get(b"LoadJPEG\0").map(|sym| *sym);
        let LoadTIFF = __library.get(b"LoadTIFF\0").map(|sym| *sym);
        let SaveJPEG = __library.get(b"SaveJPEG\0").map(|sym| *sym);
        let LoadPNG = __library.get(b"LoadPNG\0").map(|sym| *sym);
        let LoadPNGStretch = __library.get(b"LoadPNGStretch\0").map(|sym| *sym);
        let GetImageType = __library.get(b"GetImageType\0").map(|sym| *sym);
        let LoadImageToFormat = __library.get(b"LoadImageToFormat\0").map(|sym| *sym);
        let LoadGIFToFormat = __library.get(b"LoadGIFToFormat\0").map(|sym| *sym);
        let LoadPNGToFormat = __library.get(b"LoadPNGToFormat\0").map(|sym| *sym);
        let LoadJPEGToFormat = __library.get(b"LoadJPEGToFormat\0").map(|sym| *sym);
        let LoadTiffToFormat = __library.get(b"LoadTiffToFormat\0").map(|sym| *sym);
        let NewBitmapWithFormat = __library.get(b"NewBitmapWithFormat\0").map(|sym| *sym);
        let LoadPNG8 = __library.get(b"LoadPNG8\0").map(|sym| *sym);
        let LoadJPEG8 = __library.get(b"LoadJPEG8\0").map(|sym| *sym);
        let NewBitmap8 = __library.get(b"NewBitmap8\0").map(|sym| *sym);
        let NewBitmap24 = __library.get(b"NewBitmap24\0").map(|sym| *sym);
        let SavePNG = __library.get(b"SavePNG\0").map(|sym| *sym);
        let SetTransparentColor = __library.get(b"SetTransparentColor\0").map(|sym| *sym);
        let CopyBitmapDepth4To8 = __library.get(b"CopyBitmapDepth4To8\0").map(|sym| *sym);
        let CopyBitmapDepth8To4 = __library.get(b"CopyBitmapDepth8To4\0").map(|sym| *sym);
        let CopyBitmapDepth24To8 = __library.get(b"CopyBitmapDepth24To8\0").map(|sym| *sym);
        let MoveBitmap = __library.get(b"MoveBitmap\0").map(|sym| *sym);
        let MoveBitmapRight = __library.get(b"MoveBitmapRight\0").map(|sym| *sym);
        let FindAverageBitmapColor = __library.get(b"FindAverageBitmapColor\0").map(|sym| *sym);
        let ApplyContrastToBitmap8 = __library.get(b"ApplyContrastToBitmap8\0").map(|sym| *sym);
        let BitmapStretchCopy = __library.get(b"BitmapStretchCopy\0").map(|sym| *sym);
        let BitmapStretchProportionally = __library
            .get(b"BitmapStretchProportionally\0")
            .map(|sym| *sym);
        let BitmapStretchFill = __library.get(b"BitmapStretchFill\0").map(|sym| *sym);
        let adjustBitmapDefault = __library.get(b"adjustBitmapDefault\0").map(|sym| *sym);
        let adjustBitmapWithSaturationBrightnessAndDithering = __library
            .get(b"adjustBitmapWithSaturationBrightnessAndDithering\0")
            .map(|sym| *sym);
        let adjustAreaWithSaturationBrightnessAndDithering = __library
            .get(b"adjustAreaWithSaturationBrightnessAndDithering\0")
            .map(|sym| *sym);
        let adjustAreaWithLabColorsSaturation = __library
            .get(b"adjustAreaWithLabColorsSaturation\0")
            .map(|sym| *sym);
        let adjustAreaWithVibrance = __library.get(b"adjustAreaWithVibrance\0").map(|sym| *sym);
        let adjustAreaDefault = __library.get(b"adjustAreaDefault\0").map(|sym| *sym);
        let ditherAndAdjustArea = __library.get(b"ditherAndAdjustArea\0").map(|sym| *sym);
        let adjustAreaWithBrightnessContrastGamma = __library
            .get(b"adjustAreaWithBrightnessContrastGamma\0")
            .map(|sym| *sym);
        let getBrightnessContrastGammaAdjustParams = __library
            .get(b"getBrightnessContrastGammaAdjustParams\0")
            .map(|sym| *sym);
        let bm_stretch8 = __library.get(b"bm_stretch8\0").map(|sym| *sym);
        let DrawBitmap = __library.get(b"DrawBitmap\0").map(|sym| *sym);
        let DrawBitmapArea = __library.get(b"DrawBitmapArea\0").map(|sym| *sym);
        let DrawBitmapRect = __library.get(b"DrawBitmapRect\0").map(|sym| *sym);
        let DrawBitmapRect2 = __library.get(b"DrawBitmapRect2\0").map(|sym| *sym);
        let StretchBitmap = __library.get(b"StretchBitmap\0").map(|sym| *sym);
        let TileBitmap = __library.get(b"TileBitmap\0").map(|sym| *sym);
        let CopyBitmap = __library.get(b"CopyBitmap\0").map(|sym| *sym);
        let MirrorBitmap = __library.get(b"MirrorBitmap\0").map(|sym| *sym);
        let iv_inv_bitmap = __library.get(b"iv_inv_bitmap\0").map(|sym| *sym);
        let iv_copy_inv_bitmap = __library.get(b"iv_copy_inv_bitmap\0").map(|sym| *sym);
        let EnumFonts = __library.get(b"EnumFonts\0").map(|sym| *sym);
        let EnumFontsFromDirectory = __library.get(b"EnumFontsFromDirectory\0").map(|sym| *sym);
        let EnumFontsEx = __library.get(b"EnumFontsEx\0").map(|sym| *sym);
        let EnumFontsFromDirectoryEx = __library.get(b"EnumFontsFromDirectoryEx\0").map(|sym| *sym);
        let FreeFontsForSort = __library.get(b"FreeFontsForSort\0").map(|sym| *sym);
        let OpenFont = __library.get(b"OpenFont\0").map(|sym| *sym);
        let OpenFontEx = __library.get(b"OpenFontEx\0").map(|sym| *sym);
        let CloseFont = __library.get(b"CloseFont\0").map(|sym| *sym);
        let SetFont = __library.get(b"SetFont\0").map(|sym| *sym);
        let GetFont = __library.get(b"GetFont\0").map(|sym| *sym);
        let DrawString = __library.get(b"DrawString\0").map(|sym| *sym);
        let DrawStringR = __library.get(b"DrawStringR\0").map(|sym| *sym);
        let TextRectHeight = __library.get(b"TextRectHeight\0").map(|sym| *sym);
        let TextRectHeightEx = __library.get(b"TextRectHeightEx\0").map(|sym| *sym);
        let MinimalTextRectWidth = __library.get(b"MinimalTextRectWidth\0").map(|sym| *sym);
        let DrawTextRect = __library.get(b"DrawTextRect\0").map(|sym| *sym);
        let DrawTextRect2 = __library.get(b"DrawTextRect2\0").map(|sym| *sym);
        let DrawTextRect3 = __library.get(b"DrawTextRect3\0").map(|sym| *sym);
        let CharWidth = __library.get(b"CharWidth\0").map(|sym| *sym);
        let StringWidthExt = __library.get(b"StringWidthExt\0").map(|sym| *sym);
        let StringWidth = __library.get(b"StringWidth\0").map(|sym| *sym);
        let GetMultilineStringWidth = __library.get(b"GetMultilineStringWidth\0").map(|sym| *sym);
        let DrawSymbol = __library.get(b"DrawSymbol\0").map(|sym| *sym);
        let RegisterFontList = __library.get(b"RegisterFontList\0").map(|sym| *sym);
        let SetTextStrength = __library.get(b"SetTextStrength\0").map(|sym| *sym);
        let FullUpdate = __library.get(b"FullUpdate\0").map(|sym| *sym);
        let FullUpdateHQ = __library.get(b"FullUpdateHQ\0").map(|sym| *sym);
        let SoftUpdate = __library.get(b"SoftUpdate\0").map(|sym| *sym);
        let SoftUpdateHQ = __library.get(b"SoftUpdateHQ\0").map(|sym| *sym);
        let PartialUpdate = __library.get(b"PartialUpdate\0").map(|sym| *sym);
        let PartialUpdateBlack = __library.get(b"PartialUpdateBlack\0").map(|sym| *sym);
        let PartialUpdateBW = __library.get(b"PartialUpdateBW\0").map(|sym| *sym);
        let PartialUpdateHQ = __library.get(b"PartialUpdateHQ\0").map(|sym| *sym);
        let PartialUpdateDU4 = __library.get(b"PartialUpdateDU4\0").map(|sym| *sym);
        let DynamicUpdate = __library.get(b"DynamicUpdate\0").map(|sym| *sym);
        let DynamicUpdateWithoutImprovingLinesColor = __library
            .get(b"DynamicUpdateWithoutImprovingLinesColor\0")
            .map(|sym| *sym);
        let DynamicUpdateBW = __library.get(b"DynamicUpdateBW\0").map(|sym| *sym);
        let iv_empty_update_area = __library.get(b"iv_empty_update_area\0").map(|sym| *sym);
        let iv_new_update_area = __library.get(b"iv_new_update_area\0").map(|sym| *sym);
        let iv_new_ptr_update_area = __library.get(b"iv_new_ptr_update_area\0").map(|sym| *sym);
        let iv_update_screen = __library.get(b"iv_update_screen\0").map(|sym| *sym);
        let iv_update_many = __library.get(b"iv_update_many\0").map(|sym| *sym);
        let DynamicUpdateA2 = __library.get(b"DynamicUpdateA2\0").map(|sym| *sym);
        let ExitUpdateA2 = __library.get(b"ExitUpdateA2\0").map(|sym| *sym);
        let IsInA2Update = __library.get(b"IsInA2Update\0").map(|sym| *sym);
        let FineUpdate = __library.get(b"FineUpdate\0").map(|sym| *sym);
        let FineUpdateSupported = __library.get(b"FineUpdateSupported\0").map(|sym| *sym);
        let HQUpdateSupported = __library.get(b"HQUpdateSupported\0").map(|sym| *sym);
        let ScheduleUpdate = __library.get(b"ScheduleUpdate\0").map(|sym| *sym);
        let WaitForUpdateComplete = __library.get(b"WaitForUpdateComplete\0").map(|sym| *sym);
        let GetWaveformTimes = __library.get(b"GetWaveformTimes\0").map(|sym| *sym);
        let SetEventHandler = __library.get(b"SetEventHandler\0").map(|sym| *sym);
        let SetEventHandlerEx = __library.get(b"SetEventHandlerEx\0").map(|sym| *sym);
        let GetEventHandler = __library.get(b"GetEventHandler\0").map(|sym| *sym);
        let SendEvent = __library.get(b"SendEvent\0").map(|sym| *sym);
        let SendEventEx = __library.get(b"SendEventEx\0").map(|sym| *sym);
        let GetCurrentEventExData = __library.get(b"GetCurrentEventExData\0").map(|sym| *sym);
        let ProcessEventLoop = __library.get(b"ProcessEventLoop\0").map(|sym| *sym);
        let ProcessEventLoopQuick = __library.get(b"ProcessEventLoopQuick\0").map(|sym| *sym);
        let FlushEvents = __library.get(b"FlushEvents\0").map(|sym| *sym);
        let iv_evttype = __library.get(b"iv_evttype\0").map(|sym| *sym);
        let IsAnyEvents = __library.get(b"IsAnyEvents\0").map(|sym| *sym);
        let PrepareForLoop = __library.get(b"PrepareForLoop\0").map(|sym| *sym);
        let PrepareForLoopEx = __library.get(b"PrepareForLoopEx\0").map(|sym| *sym);
        let IsEventLoopBlocked = __library.get(b"IsEventLoopBlocked\0").map(|sym| *sym);
        let GetEventLoopBlockIntervalMicroseconds = __library
            .get(b"GetEventLoopBlockIntervalMicroseconds\0")
            .map(|sym| *sym);
        let SetEventsNotifier = __library.get(b"SetEventsNotifier\0").map(|sym| *sym);
        let ClearOnExit = __library.get(b"ClearOnExit\0").map(|sym| *sym);
        let SetHardTimer = __library.get(b"SetHardTimer\0").map(|sym| *sym);
        let SetHardTimerEx = __library.get(b"SetHardTimerEx\0").map(|sym| *sym);
        let SetWeakTimer = __library.get(b"SetWeakTimer\0").map(|sym| *sym);
        let SetWeakTimerEx = __library.get(b"SetWeakTimerEx\0").map(|sym| *sym);
        let QueryTimer = __library.get(b"QueryTimer\0").map(|sym| *sym);
        let QueryTimerEx = __library.get(b"QueryTimerEx\0").map(|sym| *sym);
        let ClearTimer = __library.get(b"ClearTimer\0").map(|sym| *sym);
        let ClearTimerEx = __library.get(b"ClearTimerEx\0").map(|sym| *sym);
        let ClearTimerByName = __library.get(b"ClearTimerByName\0").map(|sym| *sym);
        let OpenMenu = __library.get(b"OpenMenu\0").map(|sym| *sym);
        let OpenMenuEx = __library.get(b"OpenMenuEx\0").map(|sym| *sym);
        let UpdateMenuEx = __library.get(b"UpdateMenuEx\0").map(|sym| *sym);
        let OpenContextMenu = __library.get(b"OpenContextMenu\0").map(|sym| *sym);
        let SetContextMenu = __library.get(b"SetContextMenu\0").map(|sym| *sym);
        let CreateContextMenu = __library.get(b"CreateContextMenu\0").map(|sym| *sym);
        let CloseContextMenu = __library.get(b"CloseContextMenu\0").map(|sym| *sym);
        let OpenMenu3x3 = __library.get(b"OpenMenu3x3\0").map(|sym| *sym);
        let GetMenuRect = __library.get(b"GetMenuRect\0").map(|sym| *sym);
        let GetMenuRectEx = __library.get(b"GetMenuRectEx\0").map(|sym| *sym);
        let OpenList = __library.get(b"OpenList\0").map(|sym| *sym);
        let SetListHeaderLevel = __library.get(b"SetListHeaderLevel\0").map(|sym| *sym);
        let GetListHeaderLevel = __library.get(b"GetListHeaderLevel\0").map(|sym| *sym);
        let OpenDummyList = __library.get(b"OpenDummyList\0").map(|sym| *sym);
        let EnumKeyboards = __library.get(b"EnumKeyboards\0").map(|sym| *sym);
        let LoadKeyboard = __library.get(b"LoadKeyboard\0").map(|sym| *sym);
        let GetKeyboardFlags = __library.get(b"GetKeyboardFlags\0").map(|sym| *sym);
        let OpenKeyboard = __library.get(b"OpenKeyboard\0").map(|sym| *sym);
        let OpenKeyboardEx = __library.get(b"OpenKeyboardEx\0").map(|sym| *sym);
        let returnFocusToKeyboard = __library.get(b"returnFocusToKeyboard\0").map(|sym| *sym);
        let KeyboardProcessTextChanges = __library
            .get(b"KeyboardProcessTextChanges\0")
            .map(|sym| *sym);
        let KeyboardNotifyTextChanges = __library
            .get(b"KeyboardNotifyTextChanges\0")
            .map(|sym| *sym);
        let setKeyboardTextChangeCallback = __library
            .get(b"setKeyboardTextChangeCallback\0")
            .map(|sym| *sym);
        let DrawKeyboard = __library.get(b"DrawKeyboard\0").map(|sym| *sym);
        let OpenCustomKeyboard = __library.get(b"OpenCustomKeyboard\0").map(|sym| *sym);
        let CloseKeyboard = __library.get(b"CloseKeyboard\0").map(|sym| *sym);
        let GetKeyboardRect = __library.get(b"GetKeyboardRect\0").map(|sym| *sym);
        let GetKeyboardRectWithParams = __library
            .get(b"GetKeyboardRectWithParams\0")
            .map(|sym| *sym);
        let IsKeyboardOpened = __library.get(b"IsKeyboardOpened\0").map(|sym| *sym);
        let setDrawTopLine = __library.get(b"setDrawTopLine\0").map(|sym| *sym);
        let OpenPageSelector = __library.get(b"OpenPageSelector\0").map(|sym| *sym);
        let OpenTimeEdit = __library.get(b"OpenTimeEdit\0").map(|sym| *sym);
        let OpenFontSelector = __library.get(b"OpenFontSelector\0").map(|sym| *sym);
        let OpenFontSelectorEx = __library.get(b"OpenFontSelectorEx\0").map(|sym| *sym);
        let GetFontMenuStruct = __library.get(b"GetFontMenuStruct\0").map(|sym| *sym);
        let ClearFontMenuStruct = __library.get(b"ClearFontMenuStruct\0").map(|sym| *sym);
        let ClearFontListStruct = __library.get(b"ClearFontListStruct\0").map(|sym| *sym);
        let SetFontMenuStruct = __library.get(b"SetFontMenuStruct\0").map(|sym| *sym);
        let OpenBookmarks = __library.get(b"OpenBookmarks\0").map(|sym| *sym);
        let SwitchBookmark = __library.get(b"SwitchBookmark\0").map(|sym| *sym);
        let OpenRotateBox = __library.get(b"OpenRotateBox\0").map(|sym| *sym);
        let Message = __library.get(b"Message\0").map(|sym| *sym);
        let Dialog = __library.get(b"Dialog\0").map(|sym| *sym);
        let Dialog3 = __library.get(b"Dialog3\0").map(|sym| *sym);
        let DialogSynchro = __library.get(b"DialogSynchro\0").map(|sym| *sym);
        let CloseDialog = __library.get(b"CloseDialog\0").map(|sym| *sym);
        let OpenProgressbar = __library.get(b"OpenProgressbar\0").map(|sym| *sym);
        let UpdateProgressbar = __library.get(b"UpdateProgressbar\0").map(|sym| *sym);
        let CloseProgressbar = __library.get(b"CloseProgressbar\0").map(|sym| *sym);
        let ShowHourglassForce = __library.get(b"ShowHourglassForce\0").map(|sym| *sym);
        let ShowHourglass = __library.get(b"ShowHourglass\0").map(|sym| *sym);
        let ShowHourglassAt = __library.get(b"ShowHourglassAt\0").map(|sym| *sym);
        let ShowHourglassForceAt = __library.get(b"ShowHourglassForceAt\0").map(|sym| *sym);
        let ShowPureHourglass = __library.get(b"ShowPureHourglass\0").map(|sym| *sym);
        let ShowPureHourglassForce = __library.get(b"ShowPureHourglassForce\0").map(|sym| *sym);
        let HideHourglass = __library.get(b"HideHourglass\0").map(|sym| *sym);
        let DisableExitHourglass = __library.get(b"DisableExitHourglass\0").map(|sym| *sym);
        let LockDevice = __library.get(b"LockDevice\0").map(|sym| *sym);
        let SetManualPanelUpdates = __library.get(b"SetManualPanelUpdates\0").map(|sym| *sym);
        let SetReadingMode = __library.get(b"SetReadingMode\0").map(|sym| *sym);
        let SetPanelType = __library.get(b"SetPanelType\0").map(|sym| *sym);
        let GetPanelType = __library.get(b"GetPanelType\0").map(|sym| *sym);
        let IvAddPanelTypeChangeHandler = __library
            .get(b"IvAddPanelTypeChangeHandler\0")
            .map(|sym| *sym);
        let IvRemovePanelTypeChangeHandler = __library
            .get(b"IvRemovePanelTypeChangeHandler\0")
            .map(|sym| *sym);
        let SetFocusOnPanel = __library.get(b"SetFocusOnPanel\0").map(|sym| *sym);
        let IsPanelFocused = __library.get(b"IsPanelFocused\0").map(|sym| *sym);
        let SetShowPanelReader = __library.get(b"SetShowPanelReader\0").map(|sym| *sym);
        let IsShowPanelReader = __library.get(b"IsShowPanelReader\0").map(|sym| *sym);
        let SetPanelSeparatorEnabled = __library.get(b"SetPanelSeparatorEnabled\0").map(|sym| *sym);
        let IsPanelSeparatorEnabled = __library.get(b"IsPanelSeparatorEnabled\0").map(|sym| *sym);
        let InitPanel = __library.get(b"InitPanel\0").map(|sym| *sym);
        let SetPanelKeyForFullScreenEnabled = __library
            .get(b"SetPanelKeyForFullScreenEnabled\0")
            .map(|sym| *sym);
        let SetPanelTransparent = __library.get(b"SetPanelTransparent\0").map(|sym| *sym);
        let SetShowPanelCenterIcon = __library.get(b"SetShowPanelCenterIcon\0").map(|sym| *sym);
        let StartPanelProgress = __library.get(b"StartPanelProgress\0").map(|sym| *sym);
        let StopPanelProgress = __library.get(b"StopPanelProgress\0").map(|sym| *sym);
        let ShowPanelPackageProgress = __library.get(b"ShowPanelPackageProgress\0").map(|sym| *sym);
        let DrawPanel = __library.get(b"DrawPanel\0").map(|sym| *sym);
        let DrawPanel2 = __library.get(b"DrawPanel2\0").map(|sym| *sym);
        let DrawPanel3 = __library.get(b"DrawPanel3\0").map(|sym| *sym);
        let DrawPanel4 = __library.get(b"DrawPanel4\0").map(|sym| *sym);
        let DrawPanel5 = __library.get(b"DrawPanel5\0").map(|sym| *sym);
        let OpenControlPanel = __library.get(b"OpenControlPanel\0").map(|sym| *sym);
        let PanelHeight = __library.get(b"PanelHeight\0").map(|sym| *sym);
        let PanelHeightFBOffset = __library.get(b"PanelHeightFBOffset\0").map(|sym| *sym);
        let SetKeyboardRate = __library.get(b"SetKeyboardRate\0").map(|sym| *sym);
        let QuickNavigatorSupported = __library.get(b"QuickNavigatorSupported\0").map(|sym| *sym);
        let QuickNavigator = __library.get(b"QuickNavigator\0").map(|sym| *sym);
        let SetQuickNavigatorXY = __library.get(b"SetQuickNavigatorXY\0").map(|sym| *sym);
        let DrawApplicationCaption = __library.get(b"DrawApplicationCaption\0").map(|sym| *sym);
        let GetCaptionHeight = __library.get(b"GetCaptionHeight\0").map(|sym| *sym);
        let SetApplicationCaptionHeight = __library
            .get(b"SetApplicationCaptionHeight\0")
            .map(|sym| *sym);
        let LoadApplicationCaptionProperties = __library
            .get(b"LoadApplicationCaptionProperties\0")
            .map(|sym| *sym);
        let LoadTaskManagerProperties = __library
            .get(b"LoadTaskManagerProperties\0")
            .map(|sym| *sym);
        let LoadPagerProperties = __library.get(b"LoadPagerProperties\0").map(|sym| *sym);
        let LoadSelectionProperties = __library.get(b"LoadSelectionProperties\0").map(|sym| *sym);
        let LoadContextMenuProperties = __library
            .get(b"LoadContextMenuProperties\0")
            .map(|sym| *sym);
        let GetAppGlobalStyle = __library.get(b"GetAppGlobalStyle\0").map(|sym| *sym);
        let GetAppStyle = __library.get(b"GetAppStyle\0").map(|sym| *sym);
        let GetAppStyleEx = __library.get(b"GetAppStyleEx\0").map(|sym| *sym);
        let GetFontSelectorProperties = __library
            .get(b"GetFontSelectorProperties\0")
            .map(|sym| *sym);
        let GetCustomFontString = __library.get(b"GetCustomFontString\0").map(|sym| *sym);
        let GetGlobalConfig = __library.get(b"GetGlobalConfig\0").map(|sym| *sym);
        let OpenConfig = __library.get(b"OpenConfig\0").map(|sym| *sym);
        let RefreshConfig = __library.get(b"RefreshConfig\0").map(|sym| *sym);
        let SaveConfig = __library.get(b"SaveConfig\0").map(|sym| *sym);
        let CloseConfig = __library.get(b"CloseConfig\0").map(|sym| *sym);
        let CloseConfigNoSave = __library.get(b"CloseConfigNoSave\0").map(|sym| *sym);
        let ReadInt = __library.get(b"ReadInt\0").map(|sym| *sym);
        let ReadLongLong = __library.get(b"ReadLongLong\0").map(|sym| *sym);
        let ReadString = __library.get(b"ReadString\0").map(|sym| *sym);
        let ReadSecret = __library.get(b"ReadSecret\0").map(|sym| *sym);
        let WriteInt = __library.get(b"WriteInt\0").map(|sym| *sym);
        let WriteLongLong = __library.get(b"WriteLongLong\0").map(|sym| *sym);
        let WriteString = __library.get(b"WriteString\0").map(|sym| *sym);
        let WriteSecret = __library.get(b"WriteSecret\0").map(|sym| *sym);
        let WriteIntVolatile = __library.get(b"WriteIntVolatile\0").map(|sym| *sym);
        let WriteStringVolatile = __library.get(b"WriteStringVolatile\0").map(|sym| *sym);
        let DeleteInt = __library.get(b"DeleteInt\0").map(|sym| *sym);
        let DeleteString = __library.get(b"DeleteString\0").map(|sym| *sym);
        let SetConfigEditorBackground = __library
            .get(b"SetConfigEditorBackground\0")
            .map(|sym| *sym);
        let OpenConfigEditor = __library.get(b"OpenConfigEditor\0").map(|sym| *sym);
        let OpenConfigSubmenuExt = __library.get(b"OpenConfigSubmenuExt\0").map(|sym| *sym);
        let OpenConfigSubmenu = __library.get(b"OpenConfigSubmenu\0").map(|sym| *sym);
        let UpdateCurrentConfigPage = __library.get(b"UpdateCurrentConfigPage\0").map(|sym| *sym);
        let UpdateConfigPage = __library.get(b"UpdateConfigPage\0").map(|sym| *sym);
        let CloseConfigLevel = __library.get(b"CloseConfigLevel\0").map(|sym| *sym);
        let NotifyConfigChanged = __library.get(b"NotifyConfigChanged\0").map(|sym| *sym);
        let ClearConfig = __library.get(b"ClearConfig\0").map(|sym| *sym);
        let EnumerateConfig = __library.get(b"EnumerateConfig\0").map(|sym| *sym);
        let GetKeyMapping = __library.get(b"GetKeyMapping\0").map(|sym| *sym);
        let GetKeyMappingEx = __library.get(b"GetKeyMappingEx\0").map(|sym| *sym);
        let GetKeyMappingExtended = __library.get(b"GetKeyMappingExtended\0").map(|sym| *sym);
        let AdjustDirectionKeys = __library.get(b"AdjustDirectionKeys\0").map(|sym| *sym);
        let QueryDeviceButtons = __library.get(b"QueryDeviceButtons\0").map(|sym| *sym);
        let IsJoystickButtonsPresent = __library.get(b"IsJoystickButtonsPresent\0").map(|sym| *sym);
        let MultitaskingSupported = __library.get(b"MultitaskingSupported\0").map(|sym| *sym);
        let NewTask = __library.get(b"NewTask\0").map(|sym| *sym);
        let NewTaskEx = __library.get(b"NewTaskEx\0").map(|sym| *sym);
        let OpenTask = __library.get(b"OpenTask\0").map(|sym| *sym);
        let NewSubtask = __library.get(b"NewSubtask\0").map(|sym| *sym);
        let SwitchSubtask = __library.get(b"SwitchSubtask\0").map(|sym| *sym);
        let SubtaskFinished = __library.get(b"SubtaskFinished\0").map(|sym| *sym);
        let GetCurrentTask = __library.get(b"GetCurrentTask\0").map(|sym| *sym);
        let GetActiveTask = __library.get(b"GetActiveTask\0").map(|sym| *sym);
        let IsTaskActive = __library.get(b"IsTaskActive\0").map(|sym| *sym);
        let GetPreviousTask = __library.get(b"GetPreviousTask\0").map(|sym| *sym);
        let GetPreviousTaskInStack = __library.get(b"GetPreviousTaskInStack\0").map(|sym| *sym);
        let GetTaskList = __library.get(b"GetTaskList\0").map(|sym| *sym);
        let GetTaskInfo = __library.get(b"GetTaskInfo\0").map(|sym| *sym);
        let FindTaskByBook = __library.get(b"FindTaskByBook\0").map(|sym| *sym);
        let FindTaskByAppName = __library.get(b"FindTaskByAppName\0").map(|sym| *sym);
        let SetTaskParameters = __library.get(b"SetTaskParameters\0").map(|sym| *sym);
        let SetSubtaskInfo = __library.get(b"SetSubtaskInfo\0").map(|sym| *sym);
        let SetActiveTask = __library.get(b"SetActiveTask\0").map(|sym| *sym);
        let GoToBackground = __library.get(b"GoToBackground\0").map(|sym| *sym);
        let CloseTask = __library.get(b"CloseTask\0").map(|sym| *sym);
        let SendEventTo = __library.get(b"SendEventTo\0").map(|sym| *sym);
        let SendEventSyncTo = __library.get(b"SendEventSyncTo\0").map(|sym| *sym);
        let SendMessageTo = __library.get(b"SendMessageTo\0").map(|sym| *sym);
        let SetRequestListener = __library.get(b"SetRequestListener\0").map(|sym| *sym);
        let SetRequestListenerEx = __library.get(b"SetRequestListenerEx\0").map(|sym| *sym);
        let SendRequest = __library.get(b"SendRequest\0").map(|sym| *sym);
        let SendRequestNoWait = __library.get(b"SendRequestNoWait\0").map(|sym| *sym);
        let SendRequestTo = __library.get(b"SendRequestTo\0").map(|sym| *sym);
        let SendRequestToNoWait = __library.get(b"SendRequestToNoWait\0").map(|sym| *sym);
        let SendGlobalRequest = __library.get(b"SendGlobalRequest\0").map(|sym| *sym);
        let SetMessageHandler = __library.get(b"SetMessageHandler\0").map(|sym| *sym);
        let OpenTaskList = __library.get(b"OpenTaskList\0").map(|sym| *sym);
        let GetTaskFramebuffer = __library.get(b"GetTaskFramebuffer\0").map(|sym| *sym);
        let GetTaskFramebufferInfo = __library.get(b"GetTaskFramebufferInfo\0").map(|sym| *sym);
        let ReleaseTaskFramebuffer = __library.get(b"ReleaseTaskFramebuffer\0").map(|sym| *sym);
        let iv_wait_task_activation = __library.get(b"iv_wait_task_activation\0").map(|sym| *sym);
        let CopyActiveFb = __library.get(b"CopyActiveFb\0").map(|sym| *sym);
        let CopyTaskFb = __library.get(b"CopyTaskFb\0").map(|sym| *sym);
        let GetFrontlightVersion = __library.get(b"GetFrontlightVersion\0").map(|sym| *sym);
        let GetFrontlightState = __library.get(b"GetFrontlightState\0").map(|sym| *sym);
        let SetFrontlightState = __library.get(b"SetFrontlightState\0").map(|sym| *sym);
        let GetFrontlightEnabled = __library.get(b"GetFrontlightEnabled\0").map(|sym| *sym);
        let SetFrontlightEnabled = __library.get(b"SetFrontlightEnabled\0").map(|sym| *sym);
        let SetFrontlightStateEx = __library.get(b"SetFrontlightStateEx\0").map(|sym| *sym);
        let OpenFrontLightConfig = __library.get(b"OpenFrontLightConfig\0").map(|sym| *sym);
        let SwitchFrontlightState = __library.get(b"SwitchFrontlightState\0").map(|sym| *sym);
        let GetFrontlightColor = __library.get(b"GetFrontlightColor\0").map(|sym| *sym);
        let SetFrontlightColor = __library.get(b"SetFrontlightColor\0").map(|sym| *sym);
        let hash_new = __library.get(b"hash_new\0").map(|sym| *sym);
        let hash_add = __library.get(b"hash_add\0").map(|sym| *sym);
        let hash_delete = __library.get(b"hash_delete\0").map(|sym| *sym);
        let hash_find = __library.get(b"hash_find\0").map(|sym| *sym);
        let vhash_new = __library.get(b"vhash_new\0").map(|sym| *sym);
        let vhash_add = __library.get(b"vhash_add\0").map(|sym| *sym);
        let vhash_delete = __library.get(b"vhash_delete\0").map(|sym| *sym);
        let vhash_find = __library.get(b"vhash_find\0").map(|sym| *sym);
        let hash_clear = __library.get(b"hash_clear\0").map(|sym| *sym);
        let hash_destroy = __library.get(b"hash_destroy\0").map(|sym| *sym);
        let hash_count = __library.get(b"hash_count\0").map(|sym| *sym);
        let hash_enumerate = __library.get(b"hash_enumerate\0").map(|sym| *sym);
        let hash_merge = __library.get(b"hash_merge\0").map(|sym| *sym);
        let hash_merge_to = __library.get(b"hash_merge_to\0").map(|sym| *sym);
        let hash_copy = __library.get(b"hash_copy\0").map(|sym| *sym);
        let hash_copy_to = __library.get(b"hash_copy_to\0").map(|sym| *sym);
        let iv_stat = __library.get(b"iv_stat\0").map(|sym| *sym);
        let iv_access = __library.get(b"iv_access\0").map(|sym| *sym);
        let iv_fopen = __library.get(b"iv_fopen\0").map(|sym| *sym);
        let iv_fread = __library.get(b"iv_fread\0").map(|sym| *sym);
        let iv_fwrite = __library.get(b"iv_fwrite\0").map(|sym| *sym);
        let iv_fseek = __library.get(b"iv_fseek\0").map(|sym| *sym);
        let iv_ftell = __library.get(b"iv_ftell\0").map(|sym| *sym);
        let iv_fclose = __library.get(b"iv_fclose\0").map(|sym| *sym);
        let iv_fclose_no_sync = __library.get(b"iv_fclose_no_sync\0").map(|sym| *sym);
        let iv_fgetc = __library.get(b"iv_fgetc\0").map(|sym| *sym);
        let iv_fgets = __library.get(b"iv_fgets\0").map(|sym| *sym);
        let iv_mkdir = __library.get(b"iv_mkdir\0").map(|sym| *sym);
        let iv_buildpath = __library.get(b"iv_buildpath\0").map(|sym| *sym);
        let iv_opendir = __library.get(b"iv_opendir\0").map(|sym| *sym);
        let iv_readdir = __library.get(b"iv_readdir\0").map(|sym| *sym);
        let iv_closedir = __library.get(b"iv_closedir\0").map(|sym| *sym);
        let iv_unlink = __library.get(b"iv_unlink\0").map(|sym| *sym);
        let iv_rmdir = __library.get(b"iv_rmdir\0").map(|sym| *sym);
        let iv_truncate = __library.get(b"iv_truncate\0").map(|sym| *sym);
        let iv_rename = __library.get(b"iv_rename\0").map(|sym| *sym);
        let iv_preload = __library.get(b"iv_preload\0").map(|sym| *sym);
        let iv_sync = __library.get(b"iv_sync\0").map(|sym| *sym);
        let iv_validate_name = __library.get(b"iv_validate_name\0").map(|sym| *sym);
        let iv_setbgresponse = __library.get(b"iv_setbgresponse\0").map(|sym| *sym);
        let Path2String = __library.get(b"Path2String\0").map(|sym| *sym);
        let iv_ipc_request = __library.get(b"iv_ipc_request\0").map(|sym| *sym);
        let iv_ipc_request_secure = __library.get(b"iv_ipc_request_secure\0").map(|sym| *sym);
        let iv_ipc_cmd = __library.get(b"iv_ipc_cmd\0").map(|sym| *sym);
        let iv_ipc_request_with_timeout = __library
            .get(b"iv_ipc_request_with_timeout\0")
            .map(|sym| *sym);
        let currentLang = __library.get(b"currentLang\0").map(|sym| *sym);
        let EnumLanguages = __library.get(b"EnumLanguages\0").map(|sym| *sym);
        let DumpLanguage = __library.get(b"DumpLanguage\0").map(|sym| *sym);
        let LoadLanguageFromStream = __library.get(b"LoadLanguageFromStream\0").map(|sym| *sym);
        let LoadLanguage = __library.get(b"LoadLanguage\0").map(|sym| *sym);
        let AddTranslation = __library.get(b"AddTranslation\0").map(|sym| *sym);
        let GetCurrentLangText = __library.get(b"GetCurrentLangText\0").map(|sym| *sym);
        let GetLangText = __library.get(b"GetLangText\0").map(|sym| *sym);
        let FormattedDate = __library.get(b"FormattedDate\0").map(|sym| *sym);
        let GetLangTextF = __library.get(b"GetLangTextF\0").map(|sym| *sym);
        let GetLangTextPlural = __library.get(b"GetLangTextPlural\0").map(|sym| *sym);
        let iv_lang_format = __library.get(b"iv_lang_format\0").map(|sym| *sym);
        let GetLangTime = __library.get(b"GetLangTime\0").map(|sym| *sym);
        let SetRTLBook = __library.get(b"SetRTLBook\0").map(|sym| *sym);
        let IsRTL = __library.get(b"IsRTL\0").map(|sym| *sym);
        let IsBookRTL = __library.get(b"IsBookRTL\0").map(|sym| *sym);
        let EnumProfiles = __library.get(b"EnumProfiles\0").map(|sym| *sym);
        let GetProfileType = __library.get(b"GetProfileType\0").map(|sym| *sym);
        let EnumProfileAvatars = __library.get(b"EnumProfileAvatars\0").map(|sym| *sym);
        let GetProfileAvatar = __library.get(b"GetProfileAvatar\0").map(|sym| *sym);
        let SetProfileAvatar = __library.get(b"SetProfileAvatar\0").map(|sym| *sym);
        let RenameProfile = __library.get(b"RenameProfile\0").map(|sym| *sym);
        let DeleteProfile = __library.get(b"DeleteProfile\0").map(|sym| *sym);
        let GetCurrentProfile = __library.get(b"GetCurrentProfile\0").map(|sym| *sym);
        let SetCurrentProfile = __library.get(b"SetCurrentProfile\0").map(|sym| *sym);
        let GetProfilesCountAfterEnum = __library
            .get(b"GetProfilesCountAfterEnum\0")
            .map(|sym| *sym);
        let OpenProfileSelector = __library.get(b"OpenProfileSelector\0").map(|sym| *sym);
        let ScanProfiles = __library.get(b"ScanProfiles\0").map(|sym| *sym);
        let GetLocalProfilesLimit = __library.get(b"GetLocalProfilesLimit\0").map(|sym| *sym);
        let GetSDProfilesLimit = __library.get(b"GetSDProfilesLimit\0").map(|sym| *sym);
        let GetProfilesLimit = __library.get(b"GetProfilesLimit\0").map(|sym| *sym);
        let CreateProfileStruct = __library.get(b"CreateProfileStruct\0").map(|sym| *sym);
        let CreateProfilesStruct = __library.get(b"CreateProfilesStruct\0").map(|sym| *sym);
        let ClearProfilesStruct = __library.get(b"ClearProfilesStruct\0").map(|sym| *sym);
        let ClearProfileStruct = __library.get(b"ClearProfileStruct\0").map(|sym| *sym);
        let GetProfilesList = __library.get(b"GetProfilesList\0").map(|sym| *sym);
        let CreateProfile = __library.get(b"CreateProfile\0").map(|sym| *sym);
        let DeleteProfileEx = __library.get(b"DeleteProfileEx\0").map(|sym| *sym);
        let RenameProfileEx = __library.get(b"RenameProfileEx\0").map(|sym| *sym);
        let GetCurrentProfileEx = __library.get(b"GetCurrentProfileEx\0").map(|sym| *sym);
        let SetCurrentProfileEx = __library.get(b"SetCurrentProfileEx\0").map(|sym| *sym);
        let GetProfilesCount = __library.get(b"GetProfilesCount\0").map(|sym| *sym);
        let EnumThemes = __library.get(b"EnumThemes\0").map(|sym| *sym);
        let OpenTheme = __library.get(b"OpenTheme\0").map(|sym| *sym);
        let GetResource = __library.get(b"GetResource\0").map(|sym| *sym);
        let GetThemeInt = __library.get(b"GetThemeInt\0").map(|sym| *sym);
        let GetThemeString = __library.get(b"GetThemeString\0").map(|sym| *sym);
        let GetLayoutFromTheme = __library.get(b"GetLayoutFromTheme\0").map(|sym| *sym);
        let GetThemeFont = __library.get(b"GetThemeFont\0").map(|sym| *sym);
        let GetThemeRect = __library.get(b"GetThemeRect\0").map(|sym| *sym);
        let GetKeyResource = __library.get(b"GetKeyResource\0").map(|sym| *sym);
        let IsResourcePresent = __library.get(b"IsResourcePresent\0").map(|sym| *sym);
        let GetSupportedFileTypes = __library.get(b"GetSupportedFileTypes\0").map(|sym| *sym);
        let GetSupportedFileTypesLength = __library
            .get(b"GetSupportedFileTypesLength\0")
            .map(|sym| *sym);
        let GetBookInfo = __library.get(b"GetBookInfo\0").map(|sym| *sym);
        let GetBookInfoExt = __library.get(b"GetBookInfoExt\0").map(|sym| *sym);
        let GetBookISBN = __library.get(b"GetBookISBN\0").map(|sym| *sym);
        let GetBookCover = __library.get(b"GetBookCover\0").map(|sym| *sym);
        let GetBookCoverEx = __library.get(b"GetBookCoverEx\0").map(|sym| *sym);
        let GetBookSyncStatus = __library.get(b"GetBookSyncStatus\0").map(|sym| *sym);
        let GetAssociatedFile = __library.get(b"GetAssociatedFile\0").map(|sym| *sym);
        let CheckAssociatedFile = __library.get(b"CheckAssociatedFile\0").map(|sym| *sym);
        let FileType = __library.get(b"FileType\0").map(|sym| *sym);
        let FileTypeExt = __library.get(b"FileTypeExt\0").map(|sym| *sym);
        let SetFileHandler = __library.get(b"SetFileHandler\0").map(|sym| *sym);
        let GetFileHandler = __library.get(b"GetFileHandler\0").map(|sym| *sym);
        let PackParameters = __library.get(b"PackParameters\0").map(|sym| *sym);
        let UnpackParameters = __library.get(b"UnpackParameters\0").map(|sym| *sym);
        let OpenBook = __library.get(b"OpenBook\0").map(|sym| *sym);
        let OpenBook2 = __library.get(b"OpenBook2\0").map(|sym| *sym);
        let BookPreparing = __library.get(b"BookPreparing\0").map(|sym| *sym);
        let BookReady = __library.get(b"BookReady\0").map(|sym| *sym);
        let GetLastOpen = __library.get(b"GetLastOpen\0").map(|sym| *sym);
        let AddLastOpen = __library.get(b"AddLastOpen\0").map(|sym| *sym);
        let OpenLastBooks = __library.get(b"OpenLastBooks\0").map(|sym| *sym);
        let FlushLastOpen = __library.get(b"FlushLastOpen\0").map(|sym| *sym);
        let FindIsbnInText = __library.get(b"FindIsbnInText\0").map(|sym| *sym);
        let IvTTSSupported = __library.get(b"IvTTSSupported\0").map(|sym| *sym);
        let OpenPlayer = __library.get(b"OpenPlayer\0").map(|sym| *sym);
        let ClosePlayer = __library.get(b"ClosePlayer\0").map(|sym| *sym);
        let PlayFile = __library.get(b"PlayFile\0").map(|sym| *sym);
        let LoadPlaylist = __library.get(b"LoadPlaylist\0").map(|sym| *sym);
        let GetPlaylist = __library.get(b"GetPlaylist\0").map(|sym| *sym);
        let PlayTrack = __library.get(b"PlayTrack\0").map(|sym| *sym);
        let PreviousTrack = __library.get(b"PreviousTrack\0").map(|sym| *sym);
        let NextTrack = __library.get(b"NextTrack\0").map(|sym| *sym);
        let GetCurrentTrack = __library.get(b"GetCurrentTrack\0").map(|sym| *sym);
        let GetTrackSize = __library.get(b"GetTrackSize\0").map(|sym| *sym);
        let SetTrackPosition = __library.get(b"SetTrackPosition\0").map(|sym| *sym);
        let GetTrackPosition = __library.get(b"GetTrackPosition\0").map(|sym| *sym);
        let SetPlayerState = __library.get(b"SetPlayerState\0").map(|sym| *sym);
        let GetPlayerState = __library.get(b"GetPlayerState\0").map(|sym| *sym);
        let SetPlayerMode = __library.get(b"SetPlayerMode\0").map(|sym| *sym);
        let GetPlayerMode = __library.get(b"GetPlayerMode\0").map(|sym| *sym);
        let TogglePlaying = __library.get(b"TogglePlaying\0").map(|sym| *sym);
        let SetVolume = __library.get(b"SetVolume\0").map(|sym| *sym);
        let GetVolume = __library.get(b"GetVolume\0").map(|sym| *sym);
        let SetEqualizer = __library.get(b"SetEqualizer\0").map(|sym| *sym);
        let GetEqualizer = __library.get(b"GetEqualizer\0").map(|sym| *sym);
        let SetAudioPlayingInfo = __library.get(b"SetAudioPlayingInfo\0").map(|sym| *sym);
        let GetAudioPlayingInfo = __library.get(b"GetAudioPlayingInfo\0").map(|sym| *sym);
        let GetHighVolumeTimeout = __library.get(b"GetHighVolumeTimeout\0").map(|sym| *sym);
        let ResetHighVolumeTimeout = __library.get(b"ResetHighVolumeTimeout\0").map(|sym| *sym);
        let IncreaseHighVolumeInterval = __library
            .get(b"IncreaseHighVolumeInterval\0")
            .map(|sym| *sym);
        let LoadHighVolumeTimeout = __library.get(b"LoadHighVolumeTimeout\0").map(|sym| *sym);
        let SaveHighVolumeTimeout = __library.get(b"SaveHighVolumeTimeout\0").map(|sym| *sym);
        let GetSafeVolumeLimit = __library.get(b"GetSafeVolumeLimit\0").map(|sym| *sym);
        let GetHighVolumeMaxInterval = __library.get(b"GetHighVolumeMaxInterval\0").map(|sym| *sym);
        let EnumDictionaries = __library.get(b"EnumDictionaries\0").map(|sym| *sym);
        let EnumDictionariesFiles = __library.get(b"EnumDictionariesFiles\0").map(|sym| *sym);
        let EnumDictionariesFilesCallAfterEnumDictionaries = __library
            .get(b"EnumDictionariesFilesCallAfterEnumDictionaries\0")
            .map(|sym| *sym);
        let GetKeyboardLayoutForOpenedDictionary = __library
            .get(b"GetKeyboardLayoutForOpenedDictionary\0")
            .map(|sym| *sym);
        let haveDictionaryKeyboard = __library.get(b"haveDictionaryKeyboard\0").map(|sym| *sym);
        let OpenDictionary = __library.get(b"OpenDictionary\0").map(|sym| *sym);
        let CloseDictionary = __library.get(b"CloseDictionary\0").map(|sym| *sym);
        let DictionaryOpened = __library.get(b"DictionaryOpened\0").map(|sym| *sym);
        let LookupWord = __library.get(b"LookupWord\0").map(|sym| *sym);
        let LookupWordExact = __library.get(b"LookupWordExact\0").map(|sym| *sym);
        let LookupPrevious = __library.get(b"LookupPrevious\0").map(|sym| *sym);
        let LookupNext = __library.get(b"LookupNext\0").map(|sym| *sym);
        let GetWordListWithPrefix = __library.get(b"GetWordListWithPrefix\0").map(|sym| *sym);
        let iv_reflow_start = __library.get(b"iv_reflow_start\0").map(|sym| *sym);
        let iv_reflow_bt = __library.get(b"iv_reflow_bt\0").map(|sym| *sym);
        let iv_reflow_et = __library.get(b"iv_reflow_et\0").map(|sym| *sym);
        let iv_reflow_div = __library.get(b"iv_reflow_div\0").map(|sym| *sym);
        let iv_reflow_addchar = __library.get(b"iv_reflow_addchar\0").map(|sym| *sym);
        let iv_reflow_addimage = __library.get(b"iv_reflow_addimage\0").map(|sym| *sym);
        let iv_reflow_subpages = __library.get(b"iv_reflow_subpages\0").map(|sym| *sym);
        let iv_reflow_render = __library.get(b"iv_reflow_render\0").map(|sym| *sym);
        let iv_reflow_getchar = __library.get(b"iv_reflow_getchar\0").map(|sym| *sym);
        let iv_reflow_getimage = __library.get(b"iv_reflow_getimage\0").map(|sym| *sym);
        let iv_reflow_words = __library.get(b"iv_reflow_words\0").map(|sym| *sym);
        let iv_reflow_getword = __library.get(b"iv_reflow_getword\0").map(|sym| *sym);
        let iv_reflow_clear = __library.get(b"iv_reflow_clear\0").map(|sym| *sym);
        let AddScrolledArea = __library.get(b"AddScrolledArea\0").map(|sym| *sym);
        let RemoveScrolledArea = __library.get(b"RemoveScrolledArea\0").map(|sym| *sym);
        let ClearAllScrolledAreas = __library.get(b"ClearAllScrolledAreas\0").map(|sym| *sym);
        let SetMinimalXScrollIndent = __library.get(b"SetMinimalXScrollIndent\0").map(|sym| *sym);
        let SetMinimalYScrollIndent = __library.get(b"SetMinimalYScrollIndent\0").map(|sym| *sym);
        let IsAnyScrolledArea = __library.get(b"IsAnyScrolledArea\0").map(|sym| *sym);
        let SetCurrentApplicationAttribute = __library
            .get(b"SetCurrentApplicationAttribute\0")
            .map(|sym| *sym);
        let TestCurrentApplicationAttribute = __library
            .get(b"TestCurrentApplicationAttribute\0")
            .map(|sym| *sym);
        let iv_fullscreen = __library.get(b"iv_fullscreen\0").map(|sym| *sym);
        let iv_nofullscreen = __library.get(b"iv_nofullscreen\0").map(|sym| *sym);
        let iv_sleepmode = __library.get(b"iv_sleepmode\0").map(|sym| *sym);
        let GetSleepmode = __library.get(b"GetSleepmode\0").map(|sym| *sym);
        let GetBatteryPower = __library.get(b"GetBatteryPower\0").map(|sym| *sym);
        let GetTemperature = __library.get(b"GetTemperature\0").map(|sym| *sym);
        let IsCharging = __library.get(b"IsCharging\0").map(|sym| *sym);
        let IsUSBconnected = __library.get(b"IsUSBconnected\0").map(|sym| *sym);
        let IsSDinserted = __library.get(b"IsSDinserted\0").map(|sym| *sym);
        let IsPlayingMP3 = __library.get(b"IsPlayingMP3\0").map(|sym| *sym);
        let IsKeyPressed = __library.get(b"IsKeyPressed\0").map(|sym| *sym);
        let GetDeviceModel = __library.get(b"GetDeviceModel\0").map(|sym| *sym);
        let GetHardwareType = __library.get(b"GetHardwareType\0").map(|sym| *sym);
        let GetSoftwareVersion = __library.get(b"GetSoftwareVersion\0").map(|sym| *sym);
        let IvReadVersionFromFirmwareFile = __library
            .get(b"IvReadVersionFromFirmwareFile\0")
            .map(|sym| *sym);
        let isUsbStorAttached = __library.get(b"isUsbStorAttached\0").map(|sym| *sym);
        let isUsbStorMounted = __library.get(b"isUsbStorMounted\0").map(|sym| *sym);
        let usbStorEject = __library.get(b"usbStorEject\0").map(|sym| *sym);
        let usbStorSerialNumber = __library.get(b"usbStorSerialNumber\0").map(|sym| *sym);
        let GetSerialSoftwareInfo = __library.get(b"GetSerialSoftwareInfo\0").map(|sym| *sym);
        let GetSerialNumber = __library.get(b"GetSerialNumber\0").map(|sym| *sym);
        let GetExternalCardSerialNumber = __library
            .get(b"GetExternalCardSerialNumber\0")
            .map(|sym| *sym);
        let GetWaveformFilename = __library.get(b"GetWaveformFilename\0").map(|sym| *sym);
        let GetDeviceKey = __library.get(b"GetDeviceKey\0").map(|sym| *sym);
        let GetDeviceFingerprint = __library.get(b"GetDeviceFingerprint\0").map(|sym| *sym);
        let CurrentDateStr = __library.get(b"CurrentDateStr\0").map(|sym| *sym);
        let DateStr = __library.get(b"DateStr\0").map(|sym| *sym);
        let GoSleep = __library.get(b"GoSleep\0").map(|sym| *sym);
        let BanSleep = __library.get(b"BanSleep\0").map(|sym| *sym);
        let SetAutoPowerOff = __library.get(b"SetAutoPowerOff\0").map(|sym| *sym);
        let SetAutoKeylock = __library.get(b"SetAutoKeylock\0").map(|sym| *sym);
        let PowerOff = __library.get(b"PowerOff\0").map(|sym| *sym);
        let SafeMode = __library.get(b"SafeMode\0").map(|sym| *sym);
        let OpenMainMenu = __library.get(b"OpenMainMenu\0").map(|sym| *sym);
        let CloseAllTasks = __library.get(b"CloseAllTasks\0").map(|sym| *sym);
        let WriteStartupLogo = __library.get(b"WriteStartupLogo\0").map(|sym| *sym);
        let WritePartnerPowerOffLogo = __library.get(b"WritePartnerPowerOffLogo\0").map(|sym| *sym);
        let WriteLowPoweRLogo = __library.get(b"WriteLowPoweRLogo\0").map(|sym| *sym);
        let PageSnapshot = __library.get(b"PageSnapshot\0").map(|sym| *sym);
        let RestoreStartupLogo = __library.get(b"RestoreStartupLogo\0").map(|sym| *sym);
        let QueryTouchpanel = __library.get(b"QueryTouchpanel\0").map(|sym| *sym);
        let CalibrateTouchpanel = __library.get(b"CalibrateTouchpanel\0").map(|sym| *sym);
        let CalibrateTouchDevice = __library.get(b"CalibrateTouchDevice\0").map(|sym| *sym);
        let TouchScreenEnable = __library.get(b"TouchScreenEnable\0").map(|sym| *sym);
        let IsTouchScreenEnabled = __library.get(b"IsTouchScreenEnabled\0").map(|sym| *sym);
        let OpenCalendar = __library.get(b"OpenCalendar\0").map(|sym| *sym);
        let StartSoftwareUpdate = __library.get(b"StartSoftwareUpdate\0").map(|sym| *sym);
        let IvStartSoftwareUpdateEx = __library.get(b"IvStartSoftwareUpdateEx\0").map(|sym| *sym);
        let HavePowerForSoftwareUpdate = __library
            .get(b"HavePowerForSoftwareUpdate\0")
            .map(|sym| *sym);
        let ForcingSleep = __library.get(b"ForcingSleep\0").map(|sym| *sym);
        let WiFiPower = __library.get(b"WiFiPower\0").map(|sym| *sym);
        let GetWiFiScanResults = __library.get(b"GetWiFiScanResults\0").map(|sym| *sym);
        let WiFiScanProcessStart = __library.get(b"WiFiScanProcessStart\0").map(|sym| *sym);
        let WiFiScanProcessSetSelectiveList = __library
            .get(b"WiFiScanProcessSetSelectiveList\0")
            .map(|sym| *sym);
        let WiFiScanProcessGetResults = __library
            .get(b"WiFiScanProcessGetResults\0")
            .map(|sym| *sym);
        let WiFiScanProcessStop = __library.get(b"WiFiScanProcessStop\0").map(|sym| *sym);
        let QueryNetwork = __library.get(b"QueryNetwork\0").map(|sym| *sym);
        let GetHwAddress = __library.get(b"GetHwAddress\0").map(|sym| *sym);
        let GetHwBTAddress = __library.get(b"GetHwBTAddress\0").map(|sym| *sym);
        let GetHw3GIMEI = __library.get(b"GetHw3GIMEI\0").map(|sym| *sym);
        let GetBluetoothMode = __library.get(b"GetBluetoothMode\0").map(|sym| *sym);
        let SetBluetoothMode = __library.get(b"SetBluetoothMode\0").map(|sym| *sym);
        let GetBluetoothStatus = __library.get(b"GetBluetoothStatus\0").map(|sym| *sym);
        let SetBluetoothOn = __library.get(b"SetBluetoothOn\0").map(|sym| *sym);
        let SetBluetoothOff = __library.get(b"SetBluetoothOff\0").map(|sym| *sym);
        let IsBluetoothEnabled = __library.get(b"IsBluetoothEnabled\0").map(|sym| *sym);
        let IsBluetoothAwake = __library.get(b"IsBluetoothAwake\0").map(|sym| *sym);
        let BluetoothWakeUp = __library.get(b"BluetoothWakeUp\0").map(|sym| *sym);
        let BluetoothSuspend = __library.get(b"BluetoothSuspend\0").map(|sym| *sym);
        let EnumBTdevices = __library.get(b"EnumBTdevices\0").map(|sym| *sym);
        let OpenBTdevicesMenu = __library.get(b"OpenBTdevicesMenu\0").map(|sym| *sym);
        let BtSendFiles = __library.get(b"BtSendFiles\0").map(|sym| *sym);
        let SetFlightMode = __library.get(b"SetFlightMode\0").map(|sym| *sym);
        let IsFlightModeEnabled = __library.get(b"IsFlightModeEnabled\0").map(|sym| *sym);
        let EnumWirelessNetworks = __library.get(b"EnumWirelessNetworks\0").map(|sym| *sym);
        let EnumConnections = __library.get(b"EnumConnections\0").map(|sym| *sym);
        let GetBTservice = __library.get(b"GetBTservice\0").map(|sym| *sym);
        let NetConnect = __library.get(b"NetConnect\0").map(|sym| *sym);
        let NetConnect2 = __library.get(b"NetConnect2\0").map(|sym| *sym);
        let NetConnectSilent = __library.get(b"NetConnectSilent\0").map(|sym| *sym);
        let NetConnectAsync = __library.get(b"NetConnectAsync\0").map(|sym| *sym);
        let NetDisconnect = __library.get(b"NetDisconnect\0").map(|sym| *sym);
        let NetDisconnectAsync = __library.get(b"NetDisconnectAsync\0").map(|sym| *sym);
        let NetConnect3 = __library.get(b"NetConnect3\0").map(|sym| *sym);
        let NetInfo = __library.get(b"NetInfo\0").map(|sym| *sym);
        let OpenNetworkInfo = __library.get(b"OpenNetworkInfo\0").map(|sym| *sym);
        let GetUserAgent = __library.get(b"GetUserAgent\0").map(|sym| *sym);
        let GetDefaultUserAgent = __library.get(b"GetDefaultUserAgent\0").map(|sym| *sym);
        let GetProxyUrl = __library.get(b"GetProxyUrl\0").map(|sym| *sym);
        let QuickDownloadExt3 = __library.get(b"QuickDownloadExt3\0").map(|sym| *sym);
        let QuickDownloadExt2 = __library.get(b"QuickDownloadExt2\0").map(|sym| *sym);
        let QuickDownloadExt = __library.get(b"QuickDownloadExt\0").map(|sym| *sym);
        let QuickDownload = __library.get(b"QuickDownload\0").map(|sym| *sym);
        let NewSession = __library.get(b"NewSession\0").map(|sym| *sym);
        let CloseSession = __library.get(b"CloseSession\0").map(|sym| *sym);
        let SetUserAgent = __library.get(b"SetUserAgent\0").map(|sym| *sym);
        let SetProxy = __library.get(b"SetProxy\0").map(|sym| *sym);
        let Download = __library.get(b"Download\0").map(|sym| *sym);
        let DownloadTo = __library.get(b"DownloadTo\0").map(|sym| *sym);
        let DownloadTo_Crutch = __library.get(b"DownloadTo_Crutch\0").map(|sym| *sym);
        let SetSessionFlag = __library.get(b"SetSessionFlag\0").map(|sym| *sym);
        let GetSessionStatus = __library.get(b"GetSessionStatus\0").map(|sym| *sym);
        let GetHeader = __library.get(b"GetHeader\0").map(|sym| *sym);
        let GetSessionInfo = __library.get(b"GetSessionInfo\0").map(|sym| *sym);
        let PauseTransfer = __library.get(b"PauseTransfer\0").map(|sym| *sym);
        let ResumeTransfer = __library.get(b"ResumeTransfer\0").map(|sym| *sym);
        let AbortTransfer = __library.get(b"AbortTransfer\0").map(|sym| *sym);
        let NetError = __library.get(b"NetError\0").map(|sym| *sym);
        let NetErrorMessage = __library.get(b"NetErrorMessage\0").map(|sym| *sym);
        let GetA2dpStatus = __library.get(b"GetA2dpStatus\0").map(|sym| *sym);
        let SetPort = __library.get(b"SetPort\0").map(|sym| *sym);
        let GetTouchInfoI = __library.get(b"GetTouchInfoI\0").map(|sym| *sym);
        let GetTouchContainerLength = __library.get(b"GetTouchContainerLength\0").map(|sym| *sym);
        let GetTouchSection = __library.get(b"GetTouchSection\0").map(|sym| *sym);
        let GetLastTouchSection = __library.get(b"GetLastTouchSection\0").map(|sym| *sym);
        let PopTouchSection = __library.get(b"PopTouchSection\0").map(|sym| *sym);
        let QueryHeadphone = __library.get(b"QueryHeadphone\0").map(|sym| *sym);
        let wpa_passphrase = __library.get(b"wpa_passphrase\0").map(|sym| *sym);
        let iv_strcmp = __library.get(b"iv_strcmp\0").map(|sym| *sym);
        let iv_strncmp = __library.get(b"iv_strncmp\0").map(|sym| *sym);
        let iv_strcasecmp = __library.get(b"iv_strcasecmp\0").map(|sym| *sym);
        let iv_strncasecmp = __library.get(b"iv_strncasecmp\0").map(|sym| *sym);
        let escape = __library.get(b"escape\0").map(|sym| *sym);
        let unescape = __library.get(b"unescape\0").map(|sym| *sym);
        let url_decode = __library.get(b"url_decode\0").map(|sym| *sym);
        let trim_right = __library.get(b"trim_right\0").map(|sym| *sym);
        let get_encoding_table = __library.get(b"get_encoding_table\0").map(|sym| *sym);
        let convert_to_utf = __library.get(b"convert_to_utf\0").map(|sym| *sym);
        let utf2ucs = __library.get(b"utf2ucs\0").map(|sym| *sym);
        let utf2ucsEx = __library.get(b"utf2ucsEx\0").map(|sym| *sym);
        let utf2ucs4 = __library.get(b"utf2ucs4\0").map(|sym| *sym);
        let ucs2utf = __library.get(b"ucs2utf\0").map(|sym| *sym);
        let utf_toupper_ext = __library.get(b"utf_toupper_ext\0").map(|sym| *sym);
        let utf_tolower_ext = __library.get(b"utf_tolower_ext\0").map(|sym| *sym);
        let md5sum = __library.get(b"md5sum\0").map(|sym| *sym);
        let base64_encode = __library.get(b"base64_encode\0").map(|sym| *sym);
        let base64_decode = __library.get(b"base64_decode\0").map(|sym| *sym);
        let copy_file = __library.get(b"copy_file\0").map(|sym| *sym);
        let move_file = __library.get(b"move_file\0").map(|sym| *sym);
        let copy_file_with_af = __library.get(b"copy_file_with_af\0").map(|sym| *sym);
        let move_file_with_af = __library.get(b"move_file_with_af\0").map(|sym| *sym);
        let unlink_file_with_af = __library.get(b"unlink_file_with_af\0").map(|sym| *sym);
        let recurse_action = __library.get(b"recurse_action\0").map(|sym| *sym);
        let LeaveInkViewMain = __library.get(b"LeaveInkViewMain\0").map(|sym| *sym);
        let IsInRect = __library.get(b"IsInRect\0").map(|sym| *sym);
        let MD5PartFile = __library.get(b"MD5PartFile\0").map(|sym| *sym);
        let crc32hash = __library.get(b"crc32hash\0").map(|sym| *sym);
        let FastBookHash = __library.get(b"FastBookHash\0").map(|sym| *sym);
        let GetDialogShow = __library.get(b"GetDialogShow\0").map(|sym| *sym);
        let SetMenuFont = __library.get(b"SetMenuFont\0").map(|sym| *sym);
        let iv_get_obreey_status = __library.get(b"iv_get_obreey_status\0").map(|sym| *sym);
        let CustomDialogCreate = __library.get(b"CustomDialogCreate\0").map(|sym| *sym);
        let CustomDialogRender = __library.get(b"CustomDialogRender\0").map(|sym| *sym);
        let CustomDialogShow = __library.get(b"CustomDialogShow\0").map(|sym| *sym);
        let CustomDialogDestroy = __library.get(b"CustomDialogDestroy\0").map(|sym| *sym);
        let create_proxy_object = __library.get(b"create_proxy_object\0").map(|sym| *sym);
        let copy_proxy_object = __library.get(b"copy_proxy_object\0").map(|sym| *sym);
        let clean_proxy_object = __library.get(b"clean_proxy_object\0").map(|sym| *sym);
        let delete_proxy = __library.get(b"delete_proxy\0").map(|sym| *sym);
        let set_proxy = __library.get(b"set_proxy\0").map(|sym| *sym);
        let get_proxy = __library.get(b"get_proxy\0").map(|sym| *sym);
        let GetNetInfo = __library.get(b"GetNetInfo\0").map(|sym| *sym);
        let GetNetGateway = __library.get(b"GetNetGateway\0").map(|sym| *sym);
        let GetNetDNS = __library.get(b"GetNetDNS\0").map(|sym| *sym);
        let GetNetSignalQuality = __library.get(b"GetNetSignalQuality\0").map(|sym| *sym);
        let GetNetState = __library.get(b"GetNetState\0").map(|sym| *sym);
        let GetLastNetConnectionError = __library
            .get(b"GetLastNetConnectionError\0")
            .map(|sym| *sym);
        let NetMgr = __library.get(b"NetMgr\0").map(|sym| *sym);
        let NetMgrStatus = __library.get(b"NetMgrStatus\0").map(|sym| *sym);
        let NetMgrPing = __library.get(b"NetMgrPing\0").map(|sym| *sym);
        let GetNetList = __library.get(b"GetNetList\0").map(|sym| *sym);
        let NetAdd = __library.get(b"NetAdd\0").map(|sym| *sym);
        let NetDelete = __library.get(b"NetDelete\0").map(|sym| *sym);
        let NetDelete_by_ssid = __library.get(b"NetDelete_by_ssid\0").map(|sym| *sym);
        let NetSelect = __library.get(b"NetSelect\0").map(|sym| *sym);
        let NetSelect_by_ssid = __library.get(b"NetSelect_by_ssid\0").map(|sym| *sym);
        let CoverCachePut = __library.get(b"CoverCachePut\0").map(|sym| *sym);
        let CoverCacheGet = __library.get(b"CoverCacheGet\0").map(|sym| *sym);
        let PostponeTimedPoweroff = __library.get(b"PostponeTimedPoweroff\0").map(|sym| *sym);
        let arc_filename = __library.get(b"arc_filename\0").map(|sym| *sym);
        let get_partner_id = __library.get(b"get_partner_id\0").map(|sym| *sym);
        let get_keylock = __library.get(b"get_keylock\0").map(|sym| *sym);
        let is_enough_free_space = __library.get(b"is_enough_free_space\0").map(|sym| *sym);
        let get_file_extension = __library.get(b"get_file_extension\0").map(|sym| *sym);
        let get_screen_dpi = __library.get(b"get_screen_dpi\0").map(|sym| *sym);
        let get_screen_scale_factor = __library.get(b"get_screen_scale_factor\0").map(|sym| *sym);
        let DebugResourceBitmaps_trackBitmapCreation = __library
            .get(b"DebugResourceBitmaps_trackBitmapCreation\0")
            .map(|sym| *sym);
        let DebugResourceBitmaps_trackBitmapDrawing = __library
            .get(b"DebugResourceBitmaps_trackBitmapDrawing\0")
            .map(|sym| *sym);
        let DebugResourceBitmaps_generateReport = __library
            .get(b"DebugResourceBitmaps_generateReport\0")
            .map(|sym| *sym);
        let DebugResourceBitmaps_trackBitmapCopy = __library
            .get(b"DebugResourceBitmaps_trackBitmapCopy\0")
            .map(|sym| *sym);
        let CopyBitmapNoTrack = __library.get(b"CopyBitmapNoTrack\0").map(|sym| *sym);
        let DebugResourceBitmaps_isEnabled = __library
            .get(b"DebugResourceBitmaps_isEnabled\0")
            .map(|sym| *sym);
        let isHighPriorityJobRunning = __library.get(b"isHighPriorityJobRunning\0").map(|sym| *sym);
        let startHighPriorityJob = __library.get(b"startHighPriorityJob\0").map(|sym| *sym);
        let finishHighPriorityJob = __library.get(b"finishHighPriorityJob\0").map(|sym| *sym);
        let iv_usleep = __library.get(b"iv_usleep\0").map(|sym| *sym);
        let set_usleep_func = __library.get(b"set_usleep_func\0").map(|sym| *sym);
        let IsUpdateInProcess = __library.get(b"IsUpdateInProcess\0").map(|sym| *sym);
        let PendingHwEventsCount = __library.get(b"PendingHwEventsCount\0").map(|sym| *sym);
        let configureAudioOutput = __library.get(b"configureAudioOutput\0").map(|sym| *sym);
        let setAvrcpMetadata = __library.get(b"setAvrcpMetadata\0").map(|sym| *sym);
        let get_audio_status = __library.get(b"get_audio_status\0").map(|sym| *sym);
        let setNeedAvrcpFocus = __library.get(b"setNeedAvrcpFocus\0").map(|sym| *sym);
        let haveAvrcpFocus = __library.get(b"haveAvrcpFocus\0").map(|sym| *sym);
        let getAvrcpFocusPid = __library.get(b"getAvrcpFocusPid\0").map(|sym| *sym);
        let setTaskOomPriority = __library.get(b"setTaskOomPriority\0").map(|sym| *sym);
        let getDDRMemoryInfo = __library.get(b"getDDRMemoryInfo\0").map(|sym| *sym);
        let needCanvasLock = __library.get(b"needCanvasLock\0").map(|sym| *sym);
        let lockCanvasDrawing = __library.get(b"lockCanvasDrawing\0").map(|sym| *sym);
        let unlockCanvasDrawing = __library.get(b"unlockCanvasDrawing\0").map(|sym| *sym);
        let StartCustomGattService = __library.get(b"StartCustomGattService\0").map(|sym| *sym);
        let StopCustomGattService = __library.get(b"StopCustomGattService\0").map(|sym| *sym);
        let GetCustomGattSessionStatus = __library
            .get(b"GetCustomGattSessionStatus\0")
            .map(|sym| *sym);
        let Connect2CustomGattService = __library
            .get(b"Connect2CustomGattService\0")
            .map(|sym| *sym);
        let CloseCustomGattConnection = __library
            .get(b"CloseCustomGattConnection\0")
            .map(|sym| *sym);
        let ReadCustomGattService = __library.get(b"ReadCustomGattService\0").map(|sym| *sym);
        let WriteCustomGattService = __library.get(b"WriteCustomGattService\0").map(|sym| *sym);
        let StartScanBTLE = __library.get(b"StartScanBTLE\0").map(|sym| *sym);
        let StopScanBTLE = __library.get(b"StopScanBTLE\0").map(|sym| *sym);
        let ReadConfigStorage = __library.get(b"ReadConfigStorage\0").map(|sym| *sym);
        let WriteConfigStorage = __library.get(b"WriteConfigStorage\0").map(|sym| *sym);
        let design_to_pixel = __library.get(b"design_to_pixel\0").map(|sym| *sym);
        let GetSoftwareLocalizationType = __library
            .get(b"GetSoftwareLocalizationType\0")
            .map(|sym| *sym);
        let LocalizationTypeToStr = __library.get(b"LocalizationTypeToStr\0").map(|sym| *sym);
        let iv_debug_mode = __library.get(b"iv_debug_mode\0").map(|sym| *sym);
        let iv_exit_on_error = __library.get(b"iv_exit_on_error\0").map(|sym| *sym);
        let IvGetTimeDiffInDays = __library.get(b"IvGetTimeDiffInDays\0").map(|sym| *sym);
        let IvTimeToRelativeHumanDate = __library
            .get(b"IvTimeToRelativeHumanDate\0")
            .map(|sym| *sym);
        let IvReleaseTime = __library.get(b"IvReleaseTime\0").map(|sym| *sym);
        let iv_sleep_preventor_start = __library.get(b"iv_sleep_preventor_start\0").map(|sym| *sym);
        let iv_sleep_preventor_stop = __library.get(b"iv_sleep_preventor_stop\0").map(|sym| *sym);
        let iv_math_minf = __library.get(b"iv_math_minf\0").map(|sym| *sym);
        let iv_math_maxf = __library.get(b"iv_math_maxf\0").map(|sym| *sym);
        let iv_math_mind = __library.get(b"iv_math_mind\0").map(|sym| *sym);
        let iv_math_maxd = __library.get(b"iv_math_maxd\0").map(|sym| *sym);
        let iv_math_mini = __library.get(b"iv_math_mini\0").map(|sym| *sym);
        let iv_math_maxi = __library.get(b"iv_math_maxi\0").map(|sym| *sym);
        let iv_math_mapf = __library.get(b"iv_math_mapf\0").map(|sym| *sym);
        let iv_math_mapd = __library.get(b"iv_math_mapd\0").map(|sym| *sym);
        let iv_math_mapi = __library.get(b"iv_math_mapi\0").map(|sym| *sym);
        let iv_math_maps = __library.get(b"iv_math_maps\0").map(|sym| *sym);
        let iv_math_mapu = __library.get(b"iv_math_mapu\0").map(|sym| *sym);
        let iv_math_cross_product2d = __library.get(b"iv_math_cross_product2d\0").map(|sym| *sym);
        let iv_math_cross_product2f = __library.get(b"iv_math_cross_product2f\0").map(|sym| *sym);
        let iv_math_cross_product2i = __library.get(b"iv_math_cross_product2i\0").map(|sym| *sym);
        let iv_add2i = __library.get(b"iv_add2i\0").map(|sym| *sym);
        let iv_add2f = __library.get(b"iv_add2f\0").map(|sym| *sym);
        let iv_add2d = __library.get(b"iv_add2d\0").map(|sym| *sym);
        let iv_sub2i = __library.get(b"iv_sub2i\0").map(|sym| *sym);
        let iv_sub2f = __library.get(b"iv_sub2f\0").map(|sym| *sym);
        let iv_sub2d = __library.get(b"iv_sub2d\0").map(|sym| *sym);
        let iv_mul2i = __library.get(b"iv_mul2i\0").map(|sym| *sym);
        let iv_mul2f = __library.get(b"iv_mul2f\0").map(|sym| *sym);
        let iv_mul2d = __library.get(b"iv_mul2d\0").map(|sym| *sym);
        let iv_div2i = __library.get(b"iv_div2i\0").map(|sym| *sym);
        let iv_div2f = __library.get(b"iv_div2f\0").map(|sym| *sym);
        let iv_div2d = __library.get(b"iv_div2d\0").map(|sym| *sym);
        let iv_matvec_mul2i = __library.get(b"iv_matvec_mul2i\0").map(|sym| *sym);
        let iv_matvec_mul2f = __library.get(b"iv_matvec_mul2f\0").map(|sym| *sym);
        let iv_matvec_mul2d = __library.get(b"iv_matvec_mul2d\0").map(|sym| *sym);
        let iv_rotvec_mul2i = __library.get(b"iv_rotvec_mul2i\0").map(|sym| *sym);
        let iv_matrix_mul2i = __library.get(b"iv_matrix_mul2i\0").map(|sym| *sym);
        let iv_matrix_mul2f = __library.get(b"iv_matrix_mul2f\0").map(|sym| *sym);
        let iv_matrix_mul2d = __library.get(b"iv_matrix_mul2d\0").map(|sym| *sym);
        let iv_matrix_from_angle2f = __library.get(b"iv_matrix_from_angle2f\0").map(|sym| *sym);
        let iv_matrix_from_angle2d = __library.get(b"iv_matrix_from_angle2d\0").map(|sym| *sym);
        let iv_abs_vector2i = __library.get(b"iv_abs_vector2i\0").map(|sym| *sym);
        let iv_abs_vector2f = __library.get(b"iv_abs_vector2f\0").map(|sym| *sym);
        let iv_abs_vector2d = __library.get(b"iv_abs_vector2d\0").map(|sym| *sym);
        let iv_avr_vector2i = __library.get(b"iv_avr_vector2i\0").map(|sym| *sym);
        let iv_avr_vector2f = __library.get(b"iv_avr_vector2f\0").map(|sym| *sym);
        let iv_avr_vector2d = __library.get(b"iv_avr_vector2d\0").map(|sym| *sym);
        let iv_eq_matrix2i = __library.get(b"iv_eq_matrix2i\0").map(|sym| *sym);
        let iv_eq_matrix2f = __library.get(b"iv_eq_matrix2f\0").map(|sym| *sym);
        let iv_eq_matrix2d = __library.get(b"iv_eq_matrix2d\0").map(|sym| *sym);
        let iv_to_radiansf = __library.get(b"iv_to_radiansf\0").map(|sym| *sym);
        let iv_to_radiansd = __library.get(b"iv_to_radiansd\0").map(|sym| *sym);
        let iv_to_degreesf = __library.get(b"iv_to_degreesf\0").map(|sym| *sym);
        let iv_to_degreesd = __library.get(b"iv_to_degreesd\0").map(|sym| *sym);
        let iv_complex_add2d = __library.get(b"iv_complex_add2d\0").map(|sym| *sym);
        let iv_complex_sub2d = __library.get(b"iv_complex_sub2d\0").map(|sym| *sym);
        let iv_complex_mul2f = __library.get(b"iv_complex_mul2f\0").map(|sym| *sym);
        let iv_complex_mul2d = __library.get(b"iv_complex_mul2d\0").map(|sym| *sym);
        let iv_complex_from_angle2d = __library.get(b"iv_complex_from_angle2d\0").map(|sym| *sym);
        let iv_complex_from_draw_flags = __library
            .get(b"iv_complex_from_draw_flags\0")
            .map(|sym| *sym);
        let iv_complex_rotvec_mul2i = __library.get(b"iv_complex_rotvec_mul2i\0").map(|sym| *sym);
        let iv_complex_rotvec_mul2f = __library.get(b"iv_complex_rotvec_mul2f\0").map(|sym| *sym);
        let iv_complex_rotvec_mul2d = __library.get(b"iv_complex_rotvec_mul2d\0").map(|sym| *sym);
        let iv_eq_complex2f = __library.get(b"iv_eq_complex2f\0").map(|sym| *sym);
        let iv_eq_complex2d = __library.get(b"iv_eq_complex2d\0").map(|sym| *sym);
        let iv_eq_vector2i = __library.get(b"iv_eq_vector2i\0").map(|sym| *sym);
        let iv_eq_vector2f = __library.get(b"iv_eq_vector2f\0").map(|sym| *sym);
        let iv_eq_vector2d = __library.get(b"iv_eq_vector2d\0").map(|sym| *sym);
        let iv_eq_f = __library.get(b"iv_eq_f\0").map(|sym| *sym);
        let iv_eq_d = __library.get(b"iv_eq_d\0").map(|sym| *sym);
        let iv_from_design1i = __library.get(b"iv_from_design1i\0").map(|sym| *sym);
        let iv_from_design1f = __library.get(b"iv_from_design1f\0").map(|sym| *sym);
        let iv_from_design1d = __library.get(b"iv_from_design1d\0").map(|sym| *sym);
        let iv_from_design2i = __library.get(b"iv_from_design2i\0").map(|sym| *sym);
        let iv_from_design2f = __library.get(b"iv_from_design2f\0").map(|sym| *sym);
        let iv_from_design2d = __library.get(b"iv_from_design2d\0").map(|sym| *sym);
        let iv_random_d = __library.get(b"iv_random_d\0").map(|sym| *sym);
        let iv_sign2i = __library.get(b"iv_sign2i\0").map(|sym| *sym);
        let iv_sign2f = __library.get(b"iv_sign2f\0").map(|sym| *sym);
        let iv_sign2d = __library.get(b"iv_sign2d\0").map(|sym| *sym);
        let IvGetScreenModeInversion = __library.get(b"IvGetScreenModeInversion\0").map(|sym| *sym);
        let IvSetScreenModeInversion = __library.get(b"IvSetScreenModeInversion\0").map(|sym| *sym);
        let IvSetAppCapability = __library.get(b"IvSetAppCapability\0").map(|sym| *sym);
        let IvGetAppCapability = __library.get(b"IvGetAppCapability\0").map(|sym| *sym);
        let ltrim_non_alphanum = __library.get(b"ltrim_non_alphanum\0").map(|sym| *sym);
        Ok(inkview {
            __library,
            __underflow,
            __uflow,
            __overflow,
            _IO_getc,
            _IO_putc,
            _IO_feof,
            _IO_ferror,
            _IO_peekc_locked,
            _IO_flockfile,
            _IO_funlockfile,
            _IO_ftrylockfile,
            _IO_vfscanf,
            _IO_vfprintf,
            _IO_padn,
            _IO_sgetn,
            _IO_seekoff,
            _IO_seekpos,
            _IO_free_backup_area,
            remove,
            rename,
            renameat,
            tmpfile,
            tmpnam,
            tmpnam_r,
            tempnam,
            fclose,
            fflush,
            fflush_unlocked,
            fopen,
            freopen,
            fdopen,
            fmemopen,
            open_memstream,
            setbuf,
            setvbuf,
            setbuffer,
            setlinebuf,
            fprintf,
            printf,
            sprintf,
            vfprintf,
            vprintf,
            vsprintf,
            snprintf,
            vsnprintf,
            vdprintf,
            dprintf,
            fscanf,
            scanf,
            sscanf,
            fscanf1,
            scanf1,
            sscanf1,
            vfscanf,
            vscanf,
            vsscanf,
            vfscanf1,
            vscanf1,
            vsscanf1,
            fgetc,
            getc,
            getchar,
            getc_unlocked,
            getchar_unlocked,
            fgetc_unlocked,
            fputc,
            putc,
            putchar,
            fputc_unlocked,
            putc_unlocked,
            putchar_unlocked,
            getw,
            putw,
            fgets,
            __getdelim,
            getdelim,
            getline,
            fputs,
            puts,
            ungetc,
            fread,
            fwrite,
            fread_unlocked,
            fwrite_unlocked,
            fseek,
            ftell,
            rewind,
            fseeko,
            ftello,
            fgetpos,
            fsetpos,
            clearerr,
            feof,
            ferror,
            clearerr_unlocked,
            feof_unlocked,
            ferror_unlocked,
            perror,
            fileno,
            fileno_unlocked,
            popen,
            pclose,
            ctermid,
            flockfile,
            ftrylockfile,
            funlockfile,
            __ctype_get_mb_cur_max,
            atof,
            atoi,
            atol,
            atoll,
            strtod,
            strtof,
            strtold,
            strtol,
            strtoul,
            strtoq,
            strtouq,
            strtoll,
            strtoull,
            l64a,
            a64l,
            select,
            pselect,
            gnu_dev_major,
            gnu_dev_minor,
            gnu_dev_makedev,
            random,
            srandom,
            initstate,
            setstate,
            random_r,
            srandom_r,
            initstate_r,
            setstate_r,
            rand,
            srand,
            rand_r,
            drand48,
            erand48,
            lrand48,
            nrand48,
            mrand48,
            jrand48,
            srand48,
            seed48,
            lcong48,
            drand48_r,
            erand48_r,
            lrand48_r,
            nrand48_r,
            mrand48_r,
            jrand48_r,
            srand48_r,
            seed48_r,
            lcong48_r,
            malloc,
            calloc,
            realloc,
            free,
            cfree,
            alloca,
            valloc,
            posix_memalign,
            aligned_alloc,
            abort,
            atexit,
            at_quick_exit,
            on_exit,
            exit,
            quick_exit,
            _Exit,
            getenv,
            putenv,
            setenv,
            unsetenv,
            clearenv,
            mktemp,
            mkstemp,
            mkstemps,
            mkdtemp,
            system,
            realpath,
            bsearch,
            qsort,
            abs,
            labs,
            llabs,
            div,
            ldiv,
            lldiv,
            ecvt,
            fcvt,
            gcvt,
            qecvt,
            qfcvt,
            qgcvt,
            ecvt_r,
            fcvt_r,
            qecvt_r,
            qfcvt_r,
            mblen,
            mbtowc,
            wctomb,
            mbstowcs,
            wcstombs,
            rpmatch,
            getsubopt,
            getloadavg,
            memcpy,
            memmove,
            memccpy,
            memset,
            memcmp,
            memchr,
            strcpy,
            strncpy,
            strcat,
            strncat,
            strcmp,
            strncmp,
            strcoll,
            strxfrm,
            strcoll_l,
            strxfrm_l,
            strdup,
            strndup,
            strchr,
            strrchr,
            strcspn,
            strspn,
            strpbrk,
            strstr,
            strtok,
            __strtok_r,
            strtok_r,
            strlen,
            strnlen,
            strerror,
            strerror_r,
            strerror_l,
            __bzero,
            bcopy,
            bzero,
            bcmp,
            index,
            rindex,
            ffs,
            strcasecmp,
            strncasecmp,
            strsep,
            strsignal,
            __stpcpy,
            stpcpy,
            __stpncpy,
            stpncpy,
            __ctype_b_loc,
            __ctype_tolower_loc,
            __ctype_toupper_loc,
            isalnum,
            isalpha,
            iscntrl,
            isdigit,
            islower,
            isgraph,
            isprint,
            ispunct,
            isspace,
            isupper,
            isxdigit,
            tolower,
            toupper,
            isblank,
            isascii,
            toascii,
            _toupper,
            _tolower,
            isalnum_l,
            isalpha_l,
            iscntrl_l,
            isdigit_l,
            islower_l,
            isgraph_l,
            isprint_l,
            ispunct_l,
            isspace_l,
            isupper_l,
            isxdigit_l,
            isblank_l,
            __tolower_l,
            tolower_l,
            __toupper_l,
            toupper_l,
            access,
            faccessat,
            lseek,
            close,
            read,
            write,
            pread,
            pwrite,
            pipe,
            alarm,
            sleep,
            ualarm,
            usleep,
            pause,
            chown,
            fchown,
            lchown,
            fchownat,
            chdir,
            fchdir,
            getcwd,
            getwd,
            dup,
            dup2,
            execve,
            fexecve,
            execv,
            execle,
            execl,
            execvp,
            execlp,
            nice,
            _exit,
            pathconf,
            fpathconf,
            sysconf,
            confstr,
            getpid,
            getppid,
            getpgrp,
            __getpgid,
            getpgid,
            setpgid,
            setpgrp,
            setsid,
            getsid,
            getuid,
            geteuid,
            getgid,
            getegid,
            getgroups,
            setuid,
            setreuid,
            seteuid,
            setgid,
            setregid,
            setegid,
            fork,
            vfork,
            ttyname,
            ttyname_r,
            isatty,
            ttyslot,
            link,
            linkat,
            symlink,
            readlink,
            symlinkat,
            readlinkat,
            unlink,
            unlinkat,
            rmdir,
            tcgetpgrp,
            tcsetpgrp,
            getlogin,
            getlogin_r,
            setlogin,
            getopt,
            gethostname,
            sethostname,
            sethostid,
            getdomainname,
            setdomainname,
            vhangup,
            revoke,
            profil,
            acct,
            getusershell,
            endusershell,
            setusershell,
            daemon,
            chroot,
            getpass,
            fsync,
            gethostid,
            sync,
            getpagesize,
            getdtablesize,
            truncate,
            ftruncate,
            brk,
            sbrk,
            syscall,
            lockf,
            fdatasync,
            clock,
            time,
            difftime,
            mktime,
            strftime,
            strftime_l,
            gmtime,
            localtime,
            gmtime_r,
            localtime_r,
            asctime,
            ctime,
            asctime_r,
            ctime_r,
            tzset,
            stime,
            timegm,
            timelocal,
            dysize,
            nanosleep,
            clock_getres,
            clock_gettime,
            clock_settime,
            clock_nanosleep,
            clock_getcpuclockid,
            timer_create,
            timer_delete,
            timer_settime,
            timer_gettime,
            timer_getoverrun,
            timespec_get,
            gettimeofday,
            settimeofday,
            adjtime,
            getitimer,
            setitimer,
            utimes,
            lutimes,
            futimes,
            stat,
            fstat,
            fstatat,
            lstat,
            chmod,
            lchmod,
            fchmod,
            fchmodat,
            umask,
            mkdir,
            mkdirat,
            mknod,
            mknodat,
            mkfifo,
            mkfifoat,
            utimensat,
            futimens,
            __fxstat,
            __xstat,
            __lxstat,
            __fxstatat,
            __xmknod,
            __xmknodat,
            __sigismember,
            __sigaddset,
            __sigdelset,
            __sysv_signal,
            signal,
            kill,
            killpg,
            raise,
            ssignal,
            gsignal,
            psignal,
            psiginfo,
            sigblock,
            sigsetmask,
            siggetmask,
            sigemptyset,
            sigfillset,
            sigaddset,
            sigdelset,
            sigismember,
            sigprocmask,
            sigsuspend,
            sigaction,
            sigpending,
            sigwait,
            sigwaitinfo,
            sigtimedwait,
            sigqueue,
            sigreturn,
            siginterrupt,
            sigstack,
            sigaltstack,
            pthread_sigmask,
            pthread_kill,
            __libc_current_sigrtmin,
            __libc_current_sigrtmax,
            wait,
            waitpid,
            waitid,
            wait3,
            wait4,
            opendir,
            fdopendir,
            closedir,
            readdir,
            readdir_r,
            rewinddir,
            seekdir,
            telldir,
            dirfd,
            scandir,
            alphasort,
            getdirentries,
            fcntl,
            open,
            openat,
            creat,
            posix_fadvise,
            posix_fallocate,
            setgrent,
            endgrent,
            getgrent,
            fgetgrent,
            getgrgid,
            getgrnam,
            getgrgid_r,
            getgrnam_r,
            fgetgrent_r,
            setgroups,
            getgrouplist,
            initgroups,
            ftok,
            __getpagesize,
            shmctl,
            shmget,
            shmat,
            shmdt,
            msgctl,
            msgget,
            msgrcv,
            msgsnd,
            sysinfo,
            get_nprocs_conf,
            get_nprocs,
            get_phys_pages,
            get_avphys_pages,
            __errno_location,
            zlibVersion,
            deflate,
            deflateEnd,
            inflate,
            inflateEnd,
            deflateSetDictionary,
            deflateGetDictionary,
            deflateCopy,
            deflateReset,
            deflateParams,
            deflateTune,
            deflateBound,
            deflatePending,
            deflatePrime,
            deflateSetHeader,
            inflateSetDictionary,
            inflateGetDictionary,
            inflateSync,
            inflateCopy,
            inflateReset,
            inflateReset2,
            inflatePrime,
            inflateMark,
            inflateGetHeader,
            inflateBack,
            inflateBackEnd,
            zlibCompileFlags,
            compress,
            compress2,
            compressBound,
            uncompress,
            uncompress2,
            gzdopen,
            gzbuffer,
            gzsetparams,
            gzread,
            gzfread,
            gzwrite,
            gzfwrite,
            gzprintf,
            gzputs,
            gzgets,
            gzputc,
            gzgetc,
            gzungetc,
            gzflush,
            gzrewind,
            gzeof,
            gzdirect,
            gzclose,
            gzclose_r,
            gzclose_w,
            gzerror,
            gzclearerr,
            adler32,
            adler32_z,
            crc32,
            crc32_z,
            deflateInit_,
            inflateInit_,
            deflateInit2_,
            inflateInit2_,
            inflateBackInit_,
            gzgetc_,
            gzopen,
            gzseek,
            gztell,
            gzoffset,
            adler32_combine,
            crc32_combine,
            zError,
            inflateSyncPoint,
            get_crc_table,
            inflateUndermine,
            inflateValidate,
            inflateCodesUsed,
            inflateResetKeep,
            deflateResetKeep,
            gzvprintf,
            __sched_cpucount,
            __sched_cpualloc,
            __sched_cpufree,
            sched_setparam,
            sched_getparam,
            sched_setscheduler,
            sched_getscheduler,
            sched_yield,
            sched_get_priority_max,
            sched_get_priority_min,
            sched_rr_get_interval,
            pthread_create,
            pthread_exit,
            pthread_join,
            pthread_detach,
            pthread_self,
            pthread_equal,
            pthread_attr_init,
            pthread_attr_destroy,
            pthread_attr_getdetachstate,
            pthread_attr_setdetachstate,
            pthread_attr_getguardsize,
            pthread_attr_setguardsize,
            pthread_attr_getschedparam,
            pthread_attr_setschedparam,
            pthread_attr_getschedpolicy,
            pthread_attr_setschedpolicy,
            pthread_attr_getinheritsched,
            pthread_attr_setinheritsched,
            pthread_attr_getscope,
            pthread_attr_setscope,
            pthread_attr_getstackaddr,
            pthread_attr_setstackaddr,
            pthread_attr_getstacksize,
            pthread_attr_setstacksize,
            pthread_attr_getstack,
            pthread_attr_setstack,
            pthread_setschedparam,
            pthread_getschedparam,
            pthread_setschedprio,
            pthread_once,
            pthread_setcancelstate,
            pthread_setcanceltype,
            pthread_cancel,
            pthread_testcancel,
            __pthread_register_cancel,
            __pthread_unregister_cancel,
            __pthread_unwind_next,
            __sigsetjmp,
            pthread_mutex_init,
            pthread_mutex_destroy,
            pthread_mutex_trylock,
            pthread_mutex_lock,
            pthread_mutex_timedlock,
            pthread_mutex_unlock,
            pthread_mutex_getprioceiling,
            pthread_mutex_setprioceiling,
            pthread_mutex_consistent,
            pthread_mutexattr_init,
            pthread_mutexattr_destroy,
            pthread_mutexattr_getpshared,
            pthread_mutexattr_setpshared,
            pthread_mutexattr_gettype,
            pthread_mutexattr_settype,
            pthread_mutexattr_getprotocol,
            pthread_mutexattr_setprotocol,
            pthread_mutexattr_getprioceiling,
            pthread_mutexattr_setprioceiling,
            pthread_mutexattr_getrobust,
            pthread_mutexattr_setrobust,
            pthread_rwlock_init,
            pthread_rwlock_destroy,
            pthread_rwlock_rdlock,
            pthread_rwlock_tryrdlock,
            pthread_rwlock_timedrdlock,
            pthread_rwlock_wrlock,
            pthread_rwlock_trywrlock,
            pthread_rwlock_timedwrlock,
            pthread_rwlock_unlock,
            pthread_rwlockattr_init,
            pthread_rwlockattr_destroy,
            pthread_rwlockattr_getpshared,
            pthread_rwlockattr_setpshared,
            pthread_rwlockattr_getkind_np,
            pthread_rwlockattr_setkind_np,
            pthread_cond_init,
            pthread_cond_destroy,
            pthread_cond_signal,
            pthread_cond_broadcast,
            pthread_cond_wait,
            pthread_cond_timedwait,
            pthread_condattr_init,
            pthread_condattr_destroy,
            pthread_condattr_getpshared,
            pthread_condattr_setpshared,
            pthread_condattr_getclock,
            pthread_condattr_setclock,
            pthread_spin_init,
            pthread_spin_destroy,
            pthread_spin_lock,
            pthread_spin_trylock,
            pthread_spin_unlock,
            pthread_barrier_init,
            pthread_barrier_destroy,
            pthread_barrier_wait,
            pthread_barrierattr_init,
            pthread_barrierattr_destroy,
            pthread_barrierattr_getpshared,
            pthread_barrierattr_setpshared,
            pthread_key_create,
            pthread_key_delete,
            pthread_getspecific,
            pthread_setspecific,
            pthread_getcpuclockid,
            pthread_atfork,
            ioctl,
            device_audio,
            device_has_audio,
            device_hp_detect_cfg,
            init_hwconfig,
            device_ID,
            device_platform,
            device_number,
            device_display,
            device_display_colormask,
            device_display_height,
            device_display_width,
            device_display_scanline,
            device_display_dpi,
            device_display_native_orientation,
            device_display_position,
            device_epdc,
            device_epdc_init,
            device_keyboard,
            device_touchpanel,
            device_has_touchpanel,
            device_input_init,
            device_input_read,
            device_keyboard_translate,
            device_keyboard_buttons,
            device_keyboard_state,
            device_touchpanel_getmatrix,
            add_input_device,
            remove_input_device,
            device_slider,
            device_has_slider,
            device_slider_cfg,
            device_gyroscope,
            device_gyroscope_placement,
            device_has_gyroscope,
            device_has_extcard,
            device_usb,
            device_has_usb,
            device_has_usbhost,
            device_frontlight,
            device_has_frontlight,
            device_model,
            device_serial_number,
            device_init_led,
            device_set_led,
            device_get_led,
            device_battery_percent,
            device_is_powered,
            device_set_bootcramfs_flag,
            device_reboot,
            device_poweroff,
            device_frontlight_init,
            device_lightsensor,
            device_has_lightsensor,
            device_bluetooth,
            device_has_bluetooth,
            device_wifi,
            device_has_wifi,
            device_gsm,
            device_has_gsm,
            device_suspend,
            device_set_wakealarm,
            device_write_file,
            device_write_file_int,
            device_read_bin_file,
            device_read_file,
            device_read_file_int,
            device_power_led_cfg,
            device_storage_cfg,
            iv_get_default_font,
            GetHardwareDepth,
            iv_sizei,
            iv_sizef,
            iv_sized,
            iv_half_sizei,
            iv_half_sizef,
            iv_half_sized,
            iv_bitmap_ref_from_canvas,
            stacktrace_dump,
            OpenScreen,
            IsScreenOpened,
            OpenScreenExt,
            InkViewMain,
            CloseApp,
            InitInkview,
            iv_new_vector2i,
            iv_new_vector2f,
            iv_new_vector2d,
            iv_vec2i_to2d,
            iv_new_matrix2i,
            iv_new_matrix2f,
            iv_new_matrix2d,
            iv_new_complex2f,
            iv_new_complex2d,
            iv_new_identity_matrix2i,
            iv_new_identity_matrix2f,
            iv_new_identity_matrix2d,
            iRect,
            iv_new_rect,
            iv_empty_rect,
            ScreenWidth,
            ScreenHeight,
            SetOrientation,
            GetOrientation,
            SetGlobalOrientation,
            GetGlobalOrientation,
            QueryGSensor,
            SetGSensor,
            ReadGSensor,
            CalibrateGSensor,
            SetGSensorEnabled,
            IsGSensorEnabled,
            GetGSensorOrientation,
            SetActualGSensorOrientation,
            GetActualGSensorOrientation,
            SetDefaultOrientation,
            GetDefaultOrientation,
            CheckAndSetUpSideDownOrientation,
            IsDeviceSupportUpSideDown,
            ClearScreen,
            SetClip,
            SetClipRect,
            GetClip,
            GetClipRect,
            MergeClipRect,
            DrawPixel,
            DrawLine,
            DrawLineEx,
            DrawDashLine,
            DrawRect,
            DrawRectRound,
            TriangleExternalRect,
            FillTriangularArea,
            FillArea,
            FillAreaRect,
            InvertArea,
            InvertAreaBW,
            ColorMapCreate,
            ColorMapDestroy,
            InvertAreaMap,
            DimArea,
            DrawSelection,
            DrawCircle,
            DrawHorizontalSeparator,
            DrawCircleQuarter,
            GetDefaultFrameCertifiedThickness,
            GetDefaultFrameCertifiedRadius,
            DrawFrameCertified,
            DrawFrameRectCertified,
            DrawFrameCertifiedEx,
            DrawFrameRectCertifiedEx,
            processCircle,
            invertCircle,
            DrawPickOut,
            DrawPickOutEx,
            DitherArea,
            DitherAreaQuick2Level,
            DitherAreaPattern2Level,
            MakeBW,
            QuickFloyd16Dither,
            Stretch,
            StretchArea,
            StretchAreaBW,
            SetCanvas,
            GetCanvas,
            Repaint,
            DrawFrame,
            DrawFrameDialog,
            CheckFramePointer,
            DrawBorder,
            DrawPager,
            GetPagerRect,
            GetPagerHeight,
            IsPagerEvent,
            PagerHandler,
            DrawDiagonalHatch,
            DrawDiagonalHatchLimits,
            Transparent,
            TransparentRect,
            TransparentGradientData,
            TransparentGradient,
            TransparentGradientRect,
            LoadBitmap,
            zLoadBitmap,
            SaveBitmap,
            BitmapFromCanvas,
            BitmapFromScreen,
            BitmapFromScreenR,
            NewBitmap,
            SetLoadImageFlags,
            LoadJPEG,
            LoadTIFF,
            SaveJPEG,
            LoadPNG,
            LoadPNGStretch,
            GetImageType,
            LoadImageToFormat,
            LoadGIFToFormat,
            LoadPNGToFormat,
            LoadJPEGToFormat,
            LoadTiffToFormat,
            NewBitmapWithFormat,
            LoadPNG8,
            LoadJPEG8,
            NewBitmap8,
            NewBitmap24,
            SavePNG,
            SetTransparentColor,
            CopyBitmapDepth4To8,
            CopyBitmapDepth8To4,
            CopyBitmapDepth24To8,
            MoveBitmap,
            MoveBitmapRight,
            FindAverageBitmapColor,
            ApplyContrastToBitmap8,
            BitmapStretchCopy,
            BitmapStretchProportionally,
            BitmapStretchFill,
            adjustBitmapDefault,
            adjustBitmapWithSaturationBrightnessAndDithering,
            adjustAreaWithSaturationBrightnessAndDithering,
            adjustAreaWithLabColorsSaturation,
            adjustAreaWithVibrance,
            adjustAreaDefault,
            ditherAndAdjustArea,
            adjustAreaWithBrightnessContrastGamma,
            getBrightnessContrastGammaAdjustParams,
            bm_stretch8,
            DrawBitmap,
            DrawBitmapArea,
            DrawBitmapRect,
            DrawBitmapRect2,
            StretchBitmap,
            TileBitmap,
            CopyBitmap,
            MirrorBitmap,
            iv_inv_bitmap,
            iv_copy_inv_bitmap,
            EnumFonts,
            EnumFontsFromDirectory,
            EnumFontsEx,
            EnumFontsFromDirectoryEx,
            FreeFontsForSort,
            OpenFont,
            OpenFontEx,
            CloseFont,
            SetFont,
            GetFont,
            DrawString,
            DrawStringR,
            TextRectHeight,
            TextRectHeightEx,
            MinimalTextRectWidth,
            DrawTextRect,
            DrawTextRect2,
            DrawTextRect3,
            CharWidth,
            StringWidthExt,
            StringWidth,
            GetMultilineStringWidth,
            DrawSymbol,
            RegisterFontList,
            SetTextStrength,
            FullUpdate,
            FullUpdateHQ,
            SoftUpdate,
            SoftUpdateHQ,
            PartialUpdate,
            PartialUpdateBlack,
            PartialUpdateBW,
            PartialUpdateHQ,
            PartialUpdateDU4,
            DynamicUpdate,
            DynamicUpdateWithoutImprovingLinesColor,
            DynamicUpdateBW,
            iv_empty_update_area,
            iv_new_update_area,
            iv_new_ptr_update_area,
            iv_update_screen,
            iv_update_many,
            DynamicUpdateA2,
            ExitUpdateA2,
            IsInA2Update,
            FineUpdate,
            FineUpdateSupported,
            HQUpdateSupported,
            ScheduleUpdate,
            WaitForUpdateComplete,
            GetWaveformTimes,
            SetEventHandler,
            SetEventHandlerEx,
            GetEventHandler,
            SendEvent,
            SendEventEx,
            GetCurrentEventExData,
            ProcessEventLoop,
            ProcessEventLoopQuick,
            FlushEvents,
            iv_evttype,
            IsAnyEvents,
            PrepareForLoop,
            PrepareForLoopEx,
            IsEventLoopBlocked,
            GetEventLoopBlockIntervalMicroseconds,
            SetEventsNotifier,
            ClearOnExit,
            SetHardTimer,
            SetHardTimerEx,
            SetWeakTimer,
            SetWeakTimerEx,
            QueryTimer,
            QueryTimerEx,
            ClearTimer,
            ClearTimerEx,
            ClearTimerByName,
            OpenMenu,
            OpenMenuEx,
            UpdateMenuEx,
            OpenContextMenu,
            SetContextMenu,
            CreateContextMenu,
            CloseContextMenu,
            OpenMenu3x3,
            GetMenuRect,
            GetMenuRectEx,
            OpenList,
            SetListHeaderLevel,
            GetListHeaderLevel,
            OpenDummyList,
            EnumKeyboards,
            LoadKeyboard,
            GetKeyboardFlags,
            OpenKeyboard,
            OpenKeyboardEx,
            returnFocusToKeyboard,
            KeyboardProcessTextChanges,
            KeyboardNotifyTextChanges,
            setKeyboardTextChangeCallback,
            DrawKeyboard,
            OpenCustomKeyboard,
            CloseKeyboard,
            GetKeyboardRect,
            GetKeyboardRectWithParams,
            IsKeyboardOpened,
            setDrawTopLine,
            OpenPageSelector,
            OpenTimeEdit,
            OpenFontSelector,
            OpenFontSelectorEx,
            GetFontMenuStruct,
            ClearFontMenuStruct,
            ClearFontListStruct,
            SetFontMenuStruct,
            OpenBookmarks,
            SwitchBookmark,
            OpenRotateBox,
            Message,
            Dialog,
            Dialog3,
            DialogSynchro,
            CloseDialog,
            OpenProgressbar,
            UpdateProgressbar,
            CloseProgressbar,
            ShowHourglassForce,
            ShowHourglass,
            ShowHourglassAt,
            ShowHourglassForceAt,
            ShowPureHourglass,
            ShowPureHourglassForce,
            HideHourglass,
            DisableExitHourglass,
            LockDevice,
            SetManualPanelUpdates,
            SetReadingMode,
            SetPanelType,
            GetPanelType,
            IvAddPanelTypeChangeHandler,
            IvRemovePanelTypeChangeHandler,
            SetFocusOnPanel,
            IsPanelFocused,
            SetShowPanelReader,
            IsShowPanelReader,
            SetPanelSeparatorEnabled,
            IsPanelSeparatorEnabled,
            InitPanel,
            SetPanelKeyForFullScreenEnabled,
            SetPanelTransparent,
            SetShowPanelCenterIcon,
            StartPanelProgress,
            StopPanelProgress,
            ShowPanelPackageProgress,
            DrawPanel,
            DrawPanel2,
            DrawPanel3,
            DrawPanel4,
            DrawPanel5,
            OpenControlPanel,
            PanelHeight,
            PanelHeightFBOffset,
            SetKeyboardRate,
            QuickNavigatorSupported,
            QuickNavigator,
            SetQuickNavigatorXY,
            DrawApplicationCaption,
            GetCaptionHeight,
            SetApplicationCaptionHeight,
            LoadApplicationCaptionProperties,
            LoadTaskManagerProperties,
            LoadPagerProperties,
            LoadSelectionProperties,
            LoadContextMenuProperties,
            GetAppGlobalStyle,
            GetAppStyle,
            GetAppStyleEx,
            GetFontSelectorProperties,
            GetCustomFontString,
            GetGlobalConfig,
            OpenConfig,
            RefreshConfig,
            SaveConfig,
            CloseConfig,
            CloseConfigNoSave,
            ReadInt,
            ReadLongLong,
            ReadString,
            ReadSecret,
            WriteInt,
            WriteLongLong,
            WriteString,
            WriteSecret,
            WriteIntVolatile,
            WriteStringVolatile,
            DeleteInt,
            DeleteString,
            SetConfigEditorBackground,
            OpenConfigEditor,
            OpenConfigSubmenuExt,
            OpenConfigSubmenu,
            UpdateCurrentConfigPage,
            UpdateConfigPage,
            CloseConfigLevel,
            NotifyConfigChanged,
            ClearConfig,
            EnumerateConfig,
            GetKeyMapping,
            GetKeyMappingEx,
            GetKeyMappingExtended,
            AdjustDirectionKeys,
            QueryDeviceButtons,
            IsJoystickButtonsPresent,
            MultitaskingSupported,
            NewTask,
            NewTaskEx,
            OpenTask,
            NewSubtask,
            SwitchSubtask,
            SubtaskFinished,
            GetCurrentTask,
            GetActiveTask,
            IsTaskActive,
            GetPreviousTask,
            GetPreviousTaskInStack,
            GetTaskList,
            GetTaskInfo,
            FindTaskByBook,
            FindTaskByAppName,
            SetTaskParameters,
            SetSubtaskInfo,
            SetActiveTask,
            GoToBackground,
            CloseTask,
            SendEventTo,
            SendEventSyncTo,
            SendMessageTo,
            SetRequestListener,
            SetRequestListenerEx,
            SendRequest,
            SendRequestNoWait,
            SendRequestTo,
            SendRequestToNoWait,
            SendGlobalRequest,
            SetMessageHandler,
            OpenTaskList,
            GetTaskFramebuffer,
            GetTaskFramebufferInfo,
            ReleaseTaskFramebuffer,
            iv_wait_task_activation,
            CopyActiveFb,
            CopyTaskFb,
            GetFrontlightVersion,
            GetFrontlightState,
            SetFrontlightState,
            GetFrontlightEnabled,
            SetFrontlightEnabled,
            SetFrontlightStateEx,
            OpenFrontLightConfig,
            SwitchFrontlightState,
            GetFrontlightColor,
            SetFrontlightColor,
            hash_new,
            hash_add,
            hash_delete,
            hash_find,
            vhash_new,
            vhash_add,
            vhash_delete,
            vhash_find,
            hash_clear,
            hash_destroy,
            hash_count,
            hash_enumerate,
            hash_merge,
            hash_merge_to,
            hash_copy,
            hash_copy_to,
            iv_stat,
            iv_access,
            iv_fopen,
            iv_fread,
            iv_fwrite,
            iv_fseek,
            iv_ftell,
            iv_fclose,
            iv_fclose_no_sync,
            iv_fgetc,
            iv_fgets,
            iv_mkdir,
            iv_buildpath,
            iv_opendir,
            iv_readdir,
            iv_closedir,
            iv_unlink,
            iv_rmdir,
            iv_truncate,
            iv_rename,
            iv_preload,
            iv_sync,
            iv_validate_name,
            iv_setbgresponse,
            Path2String,
            iv_ipc_request,
            iv_ipc_request_secure,
            iv_ipc_cmd,
            iv_ipc_request_with_timeout,
            currentLang,
            EnumLanguages,
            DumpLanguage,
            LoadLanguageFromStream,
            LoadLanguage,
            AddTranslation,
            GetCurrentLangText,
            GetLangText,
            FormattedDate,
            GetLangTextF,
            GetLangTextPlural,
            iv_lang_format,
            GetLangTime,
            SetRTLBook,
            IsRTL,
            IsBookRTL,
            EnumProfiles,
            GetProfileType,
            EnumProfileAvatars,
            GetProfileAvatar,
            SetProfileAvatar,
            RenameProfile,
            DeleteProfile,
            GetCurrentProfile,
            SetCurrentProfile,
            GetProfilesCountAfterEnum,
            OpenProfileSelector,
            ScanProfiles,
            GetLocalProfilesLimit,
            GetSDProfilesLimit,
            GetProfilesLimit,
            CreateProfileStruct,
            CreateProfilesStruct,
            ClearProfilesStruct,
            ClearProfileStruct,
            GetProfilesList,
            CreateProfile,
            DeleteProfileEx,
            RenameProfileEx,
            GetCurrentProfileEx,
            SetCurrentProfileEx,
            GetProfilesCount,
            EnumThemes,
            OpenTheme,
            GetResource,
            GetThemeInt,
            GetThemeString,
            GetLayoutFromTheme,
            GetThemeFont,
            GetThemeRect,
            GetKeyResource,
            IsResourcePresent,
            GetSupportedFileTypes,
            GetSupportedFileTypesLength,
            GetBookInfo,
            GetBookInfoExt,
            GetBookISBN,
            GetBookCover,
            GetBookCoverEx,
            GetBookSyncStatus,
            GetAssociatedFile,
            CheckAssociatedFile,
            FileType,
            FileTypeExt,
            SetFileHandler,
            GetFileHandler,
            PackParameters,
            UnpackParameters,
            OpenBook,
            OpenBook2,
            BookPreparing,
            BookReady,
            GetLastOpen,
            AddLastOpen,
            OpenLastBooks,
            FlushLastOpen,
            FindIsbnInText,
            IvTTSSupported,
            OpenPlayer,
            ClosePlayer,
            PlayFile,
            LoadPlaylist,
            GetPlaylist,
            PlayTrack,
            PreviousTrack,
            NextTrack,
            GetCurrentTrack,
            GetTrackSize,
            SetTrackPosition,
            GetTrackPosition,
            SetPlayerState,
            GetPlayerState,
            SetPlayerMode,
            GetPlayerMode,
            TogglePlaying,
            SetVolume,
            GetVolume,
            SetEqualizer,
            GetEqualizer,
            SetAudioPlayingInfo,
            GetAudioPlayingInfo,
            GetHighVolumeTimeout,
            ResetHighVolumeTimeout,
            IncreaseHighVolumeInterval,
            LoadHighVolumeTimeout,
            SaveHighVolumeTimeout,
            GetSafeVolumeLimit,
            GetHighVolumeMaxInterval,
            EnumDictionaries,
            EnumDictionariesFiles,
            EnumDictionariesFilesCallAfterEnumDictionaries,
            GetKeyboardLayoutForOpenedDictionary,
            haveDictionaryKeyboard,
            OpenDictionary,
            CloseDictionary,
            DictionaryOpened,
            LookupWord,
            LookupWordExact,
            LookupPrevious,
            LookupNext,
            GetWordListWithPrefix,
            iv_reflow_start,
            iv_reflow_bt,
            iv_reflow_et,
            iv_reflow_div,
            iv_reflow_addchar,
            iv_reflow_addimage,
            iv_reflow_subpages,
            iv_reflow_render,
            iv_reflow_getchar,
            iv_reflow_getimage,
            iv_reflow_words,
            iv_reflow_getword,
            iv_reflow_clear,
            AddScrolledArea,
            RemoveScrolledArea,
            ClearAllScrolledAreas,
            SetMinimalXScrollIndent,
            SetMinimalYScrollIndent,
            IsAnyScrolledArea,
            SetCurrentApplicationAttribute,
            TestCurrentApplicationAttribute,
            iv_fullscreen,
            iv_nofullscreen,
            iv_sleepmode,
            GetSleepmode,
            GetBatteryPower,
            GetTemperature,
            IsCharging,
            IsUSBconnected,
            IsSDinserted,
            IsPlayingMP3,
            IsKeyPressed,
            GetDeviceModel,
            GetHardwareType,
            GetSoftwareVersion,
            IvReadVersionFromFirmwareFile,
            isUsbStorAttached,
            isUsbStorMounted,
            usbStorEject,
            usbStorSerialNumber,
            GetSerialSoftwareInfo,
            GetSerialNumber,
            GetExternalCardSerialNumber,
            GetWaveformFilename,
            GetDeviceKey,
            GetDeviceFingerprint,
            CurrentDateStr,
            DateStr,
            GoSleep,
            BanSleep,
            SetAutoPowerOff,
            SetAutoKeylock,
            PowerOff,
            SafeMode,
            OpenMainMenu,
            CloseAllTasks,
            WriteStartupLogo,
            WritePartnerPowerOffLogo,
            WriteLowPoweRLogo,
            PageSnapshot,
            RestoreStartupLogo,
            QueryTouchpanel,
            CalibrateTouchpanel,
            CalibrateTouchDevice,
            TouchScreenEnable,
            IsTouchScreenEnabled,
            OpenCalendar,
            StartSoftwareUpdate,
            IvStartSoftwareUpdateEx,
            HavePowerForSoftwareUpdate,
            ForcingSleep,
            WiFiPower,
            GetWiFiScanResults,
            WiFiScanProcessStart,
            WiFiScanProcessSetSelectiveList,
            WiFiScanProcessGetResults,
            WiFiScanProcessStop,
            QueryNetwork,
            GetHwAddress,
            GetHwBTAddress,
            GetHw3GIMEI,
            GetBluetoothMode,
            SetBluetoothMode,
            GetBluetoothStatus,
            SetBluetoothOn,
            SetBluetoothOff,
            IsBluetoothEnabled,
            IsBluetoothAwake,
            BluetoothWakeUp,
            BluetoothSuspend,
            EnumBTdevices,
            OpenBTdevicesMenu,
            BtSendFiles,
            SetFlightMode,
            IsFlightModeEnabled,
            EnumWirelessNetworks,
            EnumConnections,
            GetBTservice,
            NetConnect,
            NetConnect2,
            NetConnectSilent,
            NetConnectAsync,
            NetDisconnect,
            NetDisconnectAsync,
            NetConnect3,
            NetInfo,
            OpenNetworkInfo,
            GetUserAgent,
            GetDefaultUserAgent,
            GetProxyUrl,
            QuickDownloadExt3,
            QuickDownloadExt2,
            QuickDownloadExt,
            QuickDownload,
            NewSession,
            CloseSession,
            SetUserAgent,
            SetProxy,
            Download,
            DownloadTo,
            DownloadTo_Crutch,
            SetSessionFlag,
            GetSessionStatus,
            GetHeader,
            GetSessionInfo,
            PauseTransfer,
            ResumeTransfer,
            AbortTransfer,
            NetError,
            NetErrorMessage,
            GetA2dpStatus,
            SetPort,
            GetTouchInfoI,
            GetTouchContainerLength,
            GetTouchSection,
            GetLastTouchSection,
            PopTouchSection,
            QueryHeadphone,
            wpa_passphrase,
            iv_strcmp,
            iv_strncmp,
            iv_strcasecmp,
            iv_strncasecmp,
            escape,
            unescape,
            url_decode,
            trim_right,
            get_encoding_table,
            convert_to_utf,
            utf2ucs,
            utf2ucsEx,
            utf2ucs4,
            ucs2utf,
            utf_toupper_ext,
            utf_tolower_ext,
            md5sum,
            base64_encode,
            base64_decode,
            copy_file,
            move_file,
            copy_file_with_af,
            move_file_with_af,
            unlink_file_with_af,
            recurse_action,
            LeaveInkViewMain,
            IsInRect,
            MD5PartFile,
            crc32hash,
            FastBookHash,
            GetDialogShow,
            SetMenuFont,
            iv_get_obreey_status,
            CustomDialogCreate,
            CustomDialogRender,
            CustomDialogShow,
            CustomDialogDestroy,
            create_proxy_object,
            copy_proxy_object,
            clean_proxy_object,
            delete_proxy,
            set_proxy,
            get_proxy,
            GetNetInfo,
            GetNetGateway,
            GetNetDNS,
            GetNetSignalQuality,
            GetNetState,
            GetLastNetConnectionError,
            NetMgr,
            NetMgrStatus,
            NetMgrPing,
            GetNetList,
            NetAdd,
            NetDelete,
            NetDelete_by_ssid,
            NetSelect,
            NetSelect_by_ssid,
            CoverCachePut,
            CoverCacheGet,
            PostponeTimedPoweroff,
            arc_filename,
            get_partner_id,
            get_keylock,
            is_enough_free_space,
            get_file_extension,
            get_screen_dpi,
            get_screen_scale_factor,
            DebugResourceBitmaps_trackBitmapCreation,
            DebugResourceBitmaps_trackBitmapDrawing,
            DebugResourceBitmaps_generateReport,
            DebugResourceBitmaps_trackBitmapCopy,
            CopyBitmapNoTrack,
            DebugResourceBitmaps_isEnabled,
            isHighPriorityJobRunning,
            startHighPriorityJob,
            finishHighPriorityJob,
            iv_usleep,
            set_usleep_func,
            IsUpdateInProcess,
            PendingHwEventsCount,
            configureAudioOutput,
            setAvrcpMetadata,
            get_audio_status,
            setNeedAvrcpFocus,
            haveAvrcpFocus,
            getAvrcpFocusPid,
            setTaskOomPriority,
            getDDRMemoryInfo,
            needCanvasLock,
            lockCanvasDrawing,
            unlockCanvasDrawing,
            StartCustomGattService,
            StopCustomGattService,
            GetCustomGattSessionStatus,
            Connect2CustomGattService,
            CloseCustomGattConnection,
            ReadCustomGattService,
            WriteCustomGattService,
            StartScanBTLE,
            StopScanBTLE,
            ReadConfigStorage,
            WriteConfigStorage,
            design_to_pixel,
            GetSoftwareLocalizationType,
            LocalizationTypeToStr,
            iv_debug_mode,
            iv_exit_on_error,
            IvGetTimeDiffInDays,
            IvTimeToRelativeHumanDate,
            IvReleaseTime,
            iv_sleep_preventor_start,
            iv_sleep_preventor_stop,
            iv_math_minf,
            iv_math_maxf,
            iv_math_mind,
            iv_math_maxd,
            iv_math_mini,
            iv_math_maxi,
            iv_math_mapf,
            iv_math_mapd,
            iv_math_mapi,
            iv_math_maps,
            iv_math_mapu,
            iv_math_cross_product2d,
            iv_math_cross_product2f,
            iv_math_cross_product2i,
            iv_add2i,
            iv_add2f,
            iv_add2d,
            iv_sub2i,
            iv_sub2f,
            iv_sub2d,
            iv_mul2i,
            iv_mul2f,
            iv_mul2d,
            iv_div2i,
            iv_div2f,
            iv_div2d,
            iv_matvec_mul2i,
            iv_matvec_mul2f,
            iv_matvec_mul2d,
            iv_rotvec_mul2i,
            iv_matrix_mul2i,
            iv_matrix_mul2f,
            iv_matrix_mul2d,
            iv_matrix_from_angle2f,
            iv_matrix_from_angle2d,
            iv_abs_vector2i,
            iv_abs_vector2f,
            iv_abs_vector2d,
            iv_avr_vector2i,
            iv_avr_vector2f,
            iv_avr_vector2d,
            iv_eq_matrix2i,
            iv_eq_matrix2f,
            iv_eq_matrix2d,
            iv_to_radiansf,
            iv_to_radiansd,
            iv_to_degreesf,
            iv_to_degreesd,
            iv_complex_add2d,
            iv_complex_sub2d,
            iv_complex_mul2f,
            iv_complex_mul2d,
            iv_complex_from_angle2d,
            iv_complex_from_draw_flags,
            iv_complex_rotvec_mul2i,
            iv_complex_rotvec_mul2f,
            iv_complex_rotvec_mul2d,
            iv_eq_complex2f,
            iv_eq_complex2d,
            iv_eq_vector2i,
            iv_eq_vector2f,
            iv_eq_vector2d,
            iv_eq_f,
            iv_eq_d,
            iv_from_design1i,
            iv_from_design1f,
            iv_from_design1d,
            iv_from_design2i,
            iv_from_design2f,
            iv_from_design2d,
            iv_random_d,
            iv_sign2i,
            iv_sign2f,
            iv_sign2d,
            IvGetScreenModeInversion,
            IvSetScreenModeInversion,
            IvSetAppCapability,
            IvGetAppCapability,
            ltrim_non_alphanum,
        })
    }
    pub unsafe fn __underflow(&self, arg1: *mut _IO_FILE) -> ::std::os::raw::c_int {
        (self
            .__underflow
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __uflow(&self, arg1: *mut _IO_FILE) -> ::std::os::raw::c_int {
        (self
            .__uflow
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn __overflow(
        &self,
        arg1: *mut _IO_FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .__overflow
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn _IO_getc(&self, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int {
        (self
            ._IO_getc
            .as_ref()
            .expect("Expected function, got error."))(__fp)
    }
    pub unsafe fn _IO_putc(
        &self,
        __c: ::std::os::raw::c_int,
        __fp: *mut _IO_FILE,
    ) -> ::std::os::raw::c_int {
        (self
            ._IO_putc
            .as_ref()
            .expect("Expected function, got error."))(__c, __fp)
    }
    pub unsafe fn _IO_feof(&self, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int {
        (self
            ._IO_feof
            .as_ref()
            .expect("Expected function, got error."))(__fp)
    }
    pub unsafe fn _IO_ferror(&self, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int {
        (self
            ._IO_ferror
            .as_ref()
            .expect("Expected function, got error."))(__fp)
    }
    pub unsafe fn _IO_peekc_locked(&self, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int {
        (self
            ._IO_peekc_locked
            .as_ref()
            .expect("Expected function, got error."))(__fp)
    }
    pub unsafe fn _IO_flockfile(&self, arg1: *mut _IO_FILE) {
        (self
            ._IO_flockfile
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _IO_funlockfile(&self, arg1: *mut _IO_FILE) {
        (self
            ._IO_funlockfile
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _IO_ftrylockfile(&self, arg1: *mut _IO_FILE) -> ::std::os::raw::c_int {
        (self
            ._IO_ftrylockfile
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _IO_vfscanf(
        &self,
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __gnuc_va_list,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            ._IO_vfscanf
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _IO_vfprintf(
        &self,
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __gnuc_va_list,
    ) -> ::std::os::raw::c_int {
        (self
            ._IO_vfprintf
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _IO_padn(
        &self,
        arg1: *mut _IO_FILE,
        arg2: ::std::os::raw::c_int,
        arg3: __ssize_t,
    ) -> __ssize_t {
        (self
            ._IO_padn
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _IO_sgetn(
        &self,
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> usize {
        (self
            ._IO_sgetn
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _IO_seekoff(
        &self,
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t {
        (self
            ._IO_seekoff
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4)
    }
    pub unsafe fn _IO_seekpos(
        &self,
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t {
        (self
            ._IO_seekpos
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn _IO_free_backup_area(&self, arg1: *mut _IO_FILE) {
        (self
            ._IO_free_backup_area
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn remove(
        &self,
        __filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.remove.as_ref().expect("Expected function, got error."))(__filename)
    }
    pub unsafe fn rename(
        &self,
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.rename.as_ref().expect("Expected function, got error."))(__old, __new)
    }
    pub unsafe fn renameat(
        &self,
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .renameat
            .as_ref()
            .expect("Expected function, got error."))(__oldfd, __old, __newfd, __new)
    }
    pub unsafe fn tmpfile(&self) -> *mut FILE {
        (self
            .tmpfile
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn tmpnam(&self, __s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.tmpnam.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn tmpnam_r(&self, __s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self
            .tmpnam_r
            .as_ref()
            .expect("Expected function, got error."))(__s)
    }
    pub unsafe fn tempnam(
        &self,
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .tempnam
            .as_ref()
            .expect("Expected function, got error."))(__dir, __pfx)
    }
    pub unsafe fn fclose(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fclose.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fflush(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fflush.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fflush_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fflush_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fopen(
        &self,
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.fopen.as_ref().expect("Expected function, got error."))(__filename, __modes)
    }
    pub unsafe fn freopen(
        &self,
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE {
        (self
            .freopen
            .as_ref()
            .expect("Expected function, got error."))(__filename, __modes, __stream)
    }
    pub unsafe fn fdopen(
        &self,
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.fdopen.as_ref().expect("Expected function, got error."))(__fd, __modes)
    }
    pub unsafe fn fmemopen(
        &self,
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self
            .fmemopen
            .as_ref()
            .expect("Expected function, got error."))(__s, __len, __modes)
    }
    pub unsafe fn open_memstream(
        &self,
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE {
        (self
            .open_memstream
            .as_ref()
            .expect("Expected function, got error."))(__bufloc, __sizeloc)
    }
    pub unsafe fn setbuf(&self, __stream: *mut FILE, __buf: *mut ::std::os::raw::c_char) {
        (self.setbuf.as_ref().expect("Expected function, got error."))(__stream, __buf)
    }
    pub unsafe fn setvbuf(
        &self,
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .setvbuf
            .as_ref()
            .expect("Expected function, got error."))(__stream, __buf, __modes, __n)
    }
    pub unsafe fn setbuffer(
        &self,
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    ) {
        (self
            .setbuffer
            .as_ref()
            .expect("Expected function, got error."))(__stream, __buf, __size)
    }
    pub unsafe fn setlinebuf(&self, __stream: *mut FILE) {
        (self
            .setlinebuf
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn vfprintf(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vfprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vprintf(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vprintf
            .as_ref()
            .expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsprintf(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vsprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vsnprintf(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_uint,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vsnprintf
            .as_ref()
            .expect("Expected function, got error."))(__s, __maxlen, __format, __arg)
    }
    pub unsafe fn vdprintf(
        &self,
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int {
        (self
            .vdprintf
            .as_ref()
            .expect("Expected function, got error."))(__fd, __fmt, __arg)
    }
    pub unsafe fn vfscanf(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vfscanf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vscanf(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self.vscanf.as_ref().expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsscanf(
        &self,
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vsscanf
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vfscanf1(
        &self,
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vfscanf1
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn vscanf1(
        &self,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vscanf1
            .as_ref()
            .expect("Expected function, got error."))(__format, __arg)
    }
    pub unsafe fn vsscanf1(
        &self,
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: u32,
    ) -> ::std::os::raw::c_int {
        (self
            .vsscanf1
            .as_ref()
            .expect("Expected function, got error."))(__s, __format, __arg)
    }
    pub unsafe fn fgetc(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fgetc.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getc(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.getc.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getchar(&self) -> ::std::os::raw::c_int {
        (self
            .getchar
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getc_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .getc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getchar_unlocked(&self) -> ::std::os::raw::c_int {
        (self
            .getchar_unlocked
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn fgetc_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fgetc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fputc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.fputc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.putc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putchar(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .putchar
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn fputc_unlocked(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .fputc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putc_unlocked(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .putc_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn putchar_unlocked(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .putchar_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn getw(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.getw.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn putw(
        &self,
        __w: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.putw.as_ref().expect("Expected function, got error."))(__w, __stream)
    }
    pub unsafe fn fgets(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char {
        (self.fgets.as_ref().expect("Expected function, got error."))(__s, __n, __stream)
    }
    pub unsafe fn __getdelim(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .__getdelim
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __delimiter, __stream)
    }
    pub unsafe fn getdelim(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .getdelim
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __delimiter, __stream)
    }
    pub unsafe fn getline(
        &self,
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t {
        (self
            .getline
            .as_ref()
            .expect("Expected function, got error."))(__lineptr, __n, __stream)
    }
    pub unsafe fn fputs(
        &self,
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.fputs.as_ref().expect("Expected function, got error."))(__s, __stream)
    }
    pub unsafe fn puts(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.puts.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn ungetc(
        &self,
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self.ungetc.as_ref().expect("Expected function, got error."))(__c, __stream)
    }
    pub unsafe fn fread(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_uint,
        __n: ::std::os::raw::c_uint,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_uint {
        (self.fread.as_ref().expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fwrite(
        &self,
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_uint,
        __n: ::std::os::raw::c_uint,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_uint {
        (self.fwrite.as_ref().expect("Expected function, got error."))(__ptr, __size, __n, __s)
    }
    pub unsafe fn fread_unlocked(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize {
        (self
            .fread_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fwrite_unlocked(
        &self,
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize {
        (self
            .fwrite_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size, __n, __stream)
    }
    pub unsafe fn fseek(
        &self,
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.fseek.as_ref().expect("Expected function, got error."))(__stream, __off, __whence)
    }
    pub unsafe fn ftell(&self, __stream: *mut FILE) -> ::std::os::raw::c_long {
        (self.ftell.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn rewind(&self, __stream: *mut FILE) {
        (self.rewind.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fseeko(
        &self,
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.fseeko.as_ref().expect("Expected function, got error."))(__stream, __off, __whence)
    }
    pub unsafe fn ftello(&self, __stream: *mut FILE) -> __off_t {
        (self.ftello.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fgetpos(&self, __stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int {
        (self
            .fgetpos
            .as_ref()
            .expect("Expected function, got error."))(__stream, __pos)
    }
    pub unsafe fn fsetpos(
        &self,
        __stream: *mut FILE,
        __pos: *const fpos_t,
    ) -> ::std::os::raw::c_int {
        (self
            .fsetpos
            .as_ref()
            .expect("Expected function, got error."))(__stream, __pos)
    }
    pub unsafe fn clearerr(&self, __stream: *mut FILE) {
        (self
            .clearerr
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn feof(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.feof.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ferror(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.ferror.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn clearerr_unlocked(&self, __stream: *mut FILE) {
        (self
            .clearerr_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn feof_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .feof_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ferror_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .ferror_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn perror(&self, __s: *const ::std::os::raw::c_char) {
        (self.perror.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn fileno(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.fileno.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn fileno_unlocked(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .fileno_unlocked
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn popen(
        &self,
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self.popen.as_ref().expect("Expected function, got error."))(__command, __modes)
    }
    pub unsafe fn pclose(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self.pclose.as_ref().expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ctermid(&self, __s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self
            .ctermid
            .as_ref()
            .expect("Expected function, got error."))(__s)
    }
    pub unsafe fn flockfile(&self, __stream: *mut FILE) {
        (self
            .flockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn ftrylockfile(&self, __stream: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .ftrylockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn funlockfile(&self, __stream: *mut FILE) {
        (self
            .funlockfile
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn __ctype_get_mb_cur_max(&self) -> usize {
        (self
            .__ctype_get_mb_cur_max
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn atof(&self, __nptr: *const ::std::os::raw::c_char) -> f64 {
        (self.atof.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atoi(&self, __nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.atoi.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atol(&self, __nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long {
        (self.atol.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn atoll(
        &self,
        __nptr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong {
        (self.atoll.as_ref().expect("Expected function, got error."))(__nptr)
    }
    pub unsafe fn strtod(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        (self.strtod.as_ref().expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtof(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32 {
        (self.strtof.as_ref().expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtold(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        (self
            .strtold
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr)
    }
    pub unsafe fn strtol(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self.strtol.as_ref().expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoul(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        (self
            .strtoul
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoq(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self.strtoq.as_ref().expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtouq(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strtouq
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoll(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        (self
            .strtoll
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn strtoull(
        &self,
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .strtoull
            .as_ref()
            .expect("Expected function, got error."))(__nptr, __endptr, __base)
    }
    pub unsafe fn l64a(&self, __n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char {
        (self.l64a.as_ref().expect("Expected function, got error."))(__n)
    }
    pub unsafe fn a64l(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long {
        (self.a64l.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn select(
        &self,
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int {
        (self.select.as_ref().expect("Expected function, got error."))(
            __nfds,
            __readfds,
            __writefds,
            __exceptfds,
            __timeout,
        )
    }
    pub unsafe fn pselect(
        &self,
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pselect
            .as_ref()
            .expect("Expected function, got error."))(
            __nfds,
            __readfds,
            __writefds,
            __exceptfds,
            __timeout,
            __sigmask,
        )
    }
    pub unsafe fn gnu_dev_major(
        &self,
        __dev: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uint {
        (self
            .gnu_dev_major
            .as_ref()
            .expect("Expected function, got error."))(__dev)
    }
    pub unsafe fn gnu_dev_minor(
        &self,
        __dev: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uint {
        (self
            .gnu_dev_minor
            .as_ref()
            .expect("Expected function, got error."))(__dev)
    }
    pub unsafe fn gnu_dev_makedev(
        &self,
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong {
        (self
            .gnu_dev_makedev
            .as_ref()
            .expect("Expected function, got error."))(__major, __minor)
    }
    pub unsafe fn random(&self) -> ::std::os::raw::c_long {
        (self.random.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn srandom(&self, __seed: ::std::os::raw::c_uint) {
        (self
            .srandom
            .as_ref()
            .expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn initstate(
        &self,
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .initstate
            .as_ref()
            .expect("Expected function, got error."))(__seed, __statebuf, __statelen)
    }
    pub unsafe fn setstate(
        &self,
        __statebuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .setstate
            .as_ref()
            .expect("Expected function, got error."))(__statebuf)
    }
    pub unsafe fn random_r(
        &self,
        __buf: *mut random_data,
        __result: *mut i32,
    ) -> ::std::os::raw::c_int {
        (self
            .random_r
            .as_ref()
            .expect("Expected function, got error."))(__buf, __result)
    }
    pub unsafe fn srandom_r(
        &self,
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .srandom_r
            .as_ref()
            .expect("Expected function, got error."))(__seed, __buf)
    }
    pub unsafe fn initstate_r(
        &self,
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .initstate_r
            .as_ref()
            .expect("Expected function, got error."))(__seed, __statebuf, __statelen, __buf)
    }
    pub unsafe fn setstate_r(
        &self,
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int {
        (self
            .setstate_r
            .as_ref()
            .expect("Expected function, got error."))(__statebuf, __buf)
    }
    pub unsafe fn rand(&self) -> ::std::os::raw::c_int {
        (self.rand.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn srand(&self, __seed: ::std::os::raw::c_uint) {
        (self.srand.as_ref().expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn rand_r(&self, __seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int {
        (self.rand_r.as_ref().expect("Expected function, got error."))(__seed)
    }
    pub unsafe fn drand48(&self) -> f64 {
        (self
            .drand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn erand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> f64 {
        (self
            .erand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn lrand48(&self) -> ::std::os::raw::c_long {
        (self
            .lrand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn nrand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long {
        (self
            .nrand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn mrand48(&self) -> ::std::os::raw::c_long {
        (self
            .mrand48
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn jrand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long {
        (self
            .jrand48
            .as_ref()
            .expect("Expected function, got error."))(__xsubi)
    }
    pub unsafe fn srand48(&self, __seedval: ::std::os::raw::c_long) {
        (self
            .srand48
            .as_ref()
            .expect("Expected function, got error."))(__seedval)
    }
    pub unsafe fn seed48(
        &self,
        __seed16v: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort {
        (self.seed48.as_ref().expect("Expected function, got error."))(__seed16v)
    }
    pub unsafe fn lcong48(&self, __param: *mut ::std::os::raw::c_ushort) {
        (self
            .lcong48
            .as_ref()
            .expect("Expected function, got error."))(__param)
    }
    pub unsafe fn drand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int {
        (self
            .drand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn erand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int {
        (self
            .erand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn lrand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .lrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn nrand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .nrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn mrand48_r(
        &self,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .mrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__buffer, __result)
    }
    pub unsafe fn jrand48_r(
        &self,
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int {
        (self
            .jrand48_r
            .as_ref()
            .expect("Expected function, got error."))(__xsubi, __buffer, __result)
    }
    pub unsafe fn srand48_r(
        &self,
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .srand48_r
            .as_ref()
            .expect("Expected function, got error."))(__seedval, __buffer)
    }
    pub unsafe fn seed48_r(
        &self,
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .seed48_r
            .as_ref()
            .expect("Expected function, got error."))(__seed16v, __buffer)
    }
    pub unsafe fn lcong48_r(
        &self,
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int {
        (self
            .lcong48_r
            .as_ref()
            .expect("Expected function, got error."))(__param, __buffer)
    }
    pub unsafe fn malloc(&self, __size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void {
        (self.malloc.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn calloc(
        &self,
        __nmemb: ::std::os::raw::c_uint,
        __size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void {
        (self.calloc.as_ref().expect("Expected function, got error."))(__nmemb, __size)
    }
    pub unsafe fn realloc(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .realloc
            .as_ref()
            .expect("Expected function, got error."))(__ptr, __size)
    }
    pub unsafe fn free(&self, __ptr: *mut ::std::os::raw::c_void) {
        (self.free.as_ref().expect("Expected function, got error."))(__ptr)
    }
    pub unsafe fn cfree(&self, __ptr: *mut ::std::os::raw::c_void) {
        (self.cfree.as_ref().expect("Expected function, got error."))(__ptr)
    }
    pub unsafe fn alloca(&self, __size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void {
        (self.alloca.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn valloc(&self, __size: usize) -> *mut ::std::os::raw::c_void {
        (self.valloc.as_ref().expect("Expected function, got error."))(__size)
    }
    pub unsafe fn posix_memalign(
        &self,
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_memalign
            .as_ref()
            .expect("Expected function, got error."))(__memptr, __alignment, __size)
    }
    pub unsafe fn aligned_alloc(
        &self,
        __alignment: ::std::os::raw::c_uint,
        __size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .aligned_alloc
            .as_ref()
            .expect("Expected function, got error."))(__alignment, __size)
    }
    pub unsafe fn abort(&self) -> ! {
        (self.abort.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn atexit(
        &self,
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self.atexit.as_ref().expect("Expected function, got error."))(__func)
    }
    pub unsafe fn at_quick_exit(
        &self,
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self
            .at_quick_exit
            .as_ref()
            .expect("Expected function, got error."))(__func)
    }
    pub unsafe fn on_exit(
        &self,
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .on_exit
            .as_ref()
            .expect("Expected function, got error."))(__func, __arg)
    }
    pub unsafe fn exit(&self, __status: ::std::os::raw::c_int) -> ! {
        (self.exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn quick_exit(&self, __status: ::std::os::raw::c_int) -> ! {
        (self
            .quick_exit
            .as_ref()
            .expect("Expected function, got error."))(__status)
    }
    pub unsafe fn _Exit(&self, __status: ::std::os::raw::c_int) -> ! {
        (self._Exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn getenv(
        &self,
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.getenv.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn putenv(&self, __string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.putenv.as_ref().expect("Expected function, got error."))(__string)
    }
    pub unsafe fn setenv(
        &self,
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.setenv.as_ref().expect("Expected function, got error."))(__name, __value, __replace)
    }
    pub unsafe fn unsetenv(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .unsetenv
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn clearenv(&self) -> ::std::os::raw::c_int {
        (self
            .clearenv
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn mktemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.mktemp.as_ref().expect("Expected function, got error."))(__template)
    }
    pub unsafe fn mkstemp(&self, __template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .mkstemp
            .as_ref()
            .expect("Expected function, got error."))(__template)
    }
    pub unsafe fn mkstemps(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .mkstemps
            .as_ref()
            .expect("Expected function, got error."))(__template, __suffixlen)
    }
    pub unsafe fn mkdtemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .mkdtemp
            .as_ref()
            .expect("Expected function, got error."))(__template)
    }
    pub unsafe fn system(&self, __command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.system.as_ref().expect("Expected function, got error."))(__command)
    }
    pub unsafe fn realpath(
        &self,
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .realpath
            .as_ref()
            .expect("Expected function, got error."))(__name, __resolved)
    }
    pub unsafe fn bsearch(
        &self,
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .bsearch
            .as_ref()
            .expect("Expected function, got error."))(
            __key, __base, __nmemb, __size, __compar
        )
    }
    pub unsafe fn qsort(
        &self,
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) {
        (self.qsort.as_ref().expect("Expected function, got error."))(
            __base, __nmemb, __size, __compar,
        )
    }
    pub unsafe fn abs(&self, __x: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.abs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn labs(&self, __x: ::std::os::raw::c_long) -> ::std::os::raw::c_long {
        (self.labs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn llabs(&self, __x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong {
        (self.llabs.as_ref().expect("Expected function, got error."))(__x)
    }
    pub unsafe fn div(
        &self,
        __numer: ::std::os::raw::c_int,
        __denom: ::std::os::raw::c_int,
    ) -> div_t {
        (self.div.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn ldiv(
        &self,
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> ldiv_t {
        (self.ldiv.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn lldiv(
        &self,
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t {
        (self.lldiv.as_ref().expect("Expected function, got error."))(__numer, __denom)
    }
    pub unsafe fn ecvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.ecvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn fcvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.fcvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn gcvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.gcvt.as_ref().expect("Expected function, got error."))(__value, __ndigit, __buf)
    }
    pub unsafe fn qecvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.qecvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn qfcvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.qfcvt.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign,
        )
    }
    pub unsafe fn qgcvt(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.qgcvt.as_ref().expect("Expected function, got error."))(__value, __ndigit, __buf)
    }
    pub unsafe fn ecvt_r(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self.ecvt_r.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn fcvt_r(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self.fcvt_r.as_ref().expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn qecvt_r(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .qecvt_r
            .as_ref()
            .expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn qfcvt_r(
        &self,
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .qfcvt_r
            .as_ref()
            .expect("Expected function, got error."))(
            __value, __ndigit, __decpt, __sign, __buf, __len,
        )
    }
    pub unsafe fn mblen(
        &self,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int {
        (self.mblen.as_ref().expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn mbtowc(
        &self,
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int {
        (self.mbtowc.as_ref().expect("Expected function, got error."))(__pwc, __s, __n)
    }
    pub unsafe fn wctomb(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __wchar: wchar_t,
    ) -> ::std::os::raw::c_int {
        (self.wctomb.as_ref().expect("Expected function, got error."))(__s, __wchar)
    }
    pub unsafe fn mbstowcs(
        &self,
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize {
        (self
            .mbstowcs
            .as_ref()
            .expect("Expected function, got error."))(__pwcs, __s, __n)
    }
    pub unsafe fn wcstombs(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: usize,
    ) -> usize {
        (self
            .wcstombs
            .as_ref()
            .expect("Expected function, got error."))(__s, __pwcs, __n)
    }
    pub unsafe fn rpmatch(
        &self,
        __response: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .rpmatch
            .as_ref()
            .expect("Expected function, got error."))(__response)
    }
    pub unsafe fn getsubopt(
        &self,
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .getsubopt
            .as_ref()
            .expect("Expected function, got error."))(__optionp, __tokens, __valuep)
    }
    pub unsafe fn getloadavg(
        &self,
        __loadavg: *mut f64,
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getloadavg
            .as_ref()
            .expect("Expected function, got error."))(__loadavg, __nelem)
    }
    pub unsafe fn memcpy(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void {
        (self.memcpy.as_ref().expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn memmove(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .memmove
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn memccpy(
        &self,
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .memccpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __c, __n)
    }
    pub unsafe fn memset(
        &self,
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void {
        (self.memset.as_ref().expect("Expected function, got error."))(__s, __c, __n)
    }
    pub unsafe fn memcmp(
        &self,
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self.memcmp.as_ref().expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn memchr(
        &self,
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void {
        (self.memchr.as_ref().expect("Expected function, got error."))(__s, __c, __n)
    }
    pub unsafe fn strcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strcpy.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn strncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcat(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strcat.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn strncat(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strncat
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.strcmp.as_ref().expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strncmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .strncmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn strcoll(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .strcoll
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strxfrm(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .strxfrm
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn strcoll_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .strcoll_l
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __l)
    }
    pub unsafe fn strxfrm_l(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: __locale_t,
    ) -> usize {
        (self
            .strxfrm_l
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n, __l)
    }
    pub unsafe fn strdup(&self, __s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.strdup.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn strndup(
        &self,
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strndup
            .as_ref()
            .expect("Expected function, got error."))(__string, __n)
    }
    pub unsafe fn strchr(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.strchr.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn strrchr(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strrchr
            .as_ref()
            .expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn strcspn(
        &self,
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint {
        (self
            .strcspn
            .as_ref()
            .expect("Expected function, got error."))(__s, __reject)
    }
    pub unsafe fn strspn(
        &self,
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint {
        (self.strspn.as_ref().expect("Expected function, got error."))(__s, __accept)
    }
    pub unsafe fn strpbrk(
        &self,
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strpbrk
            .as_ref()
            .expect("Expected function, got error."))(__s, __accept)
    }
    pub unsafe fn strstr(
        &self,
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strstr.as_ref().expect("Expected function, got error."))(__haystack, __needle)
    }
    pub unsafe fn strtok(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strtok.as_ref().expect("Expected function, got error."))(__s, __delim)
    }
    pub unsafe fn __strtok_r(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__strtok_r
            .as_ref()
            .expect("Expected function, got error."))(__s, __delim, __save_ptr)
    }
    pub unsafe fn strtok_r(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strtok_r
            .as_ref()
            .expect("Expected function, got error."))(__s, __delim, __save_ptr)
    }
    pub unsafe fn strlen(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint {
        (self.strlen.as_ref().expect("Expected function, got error."))(__s)
    }
    pub unsafe fn strnlen(
        &self,
        __string: *const ::std::os::raw::c_char,
        __maxlen: usize,
    ) -> usize {
        (self
            .strnlen
            .as_ref()
            .expect("Expected function, got error."))(__string, __maxlen)
    }
    pub unsafe fn strerror(&self, __errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .strerror
            .as_ref()
            .expect("Expected function, got error."))(__errnum)
    }
    pub unsafe fn strerror_r(
        &self,
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .strerror_r
            .as_ref()
            .expect("Expected function, got error."))(__errnum, __buf, __buflen)
    }
    pub unsafe fn strerror_l(
        &self,
        __errnum: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .strerror_l
            .as_ref()
            .expect("Expected function, got error."))(__errnum, __l)
    }
    pub unsafe fn __bzero(&self, __s: *mut ::std::os::raw::c_void, __n: usize) {
        (self
            .__bzero
            .as_ref()
            .expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn bcopy(
        &self,
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_uint,
    ) {
        (self.bcopy.as_ref().expect("Expected function, got error."))(__src, __dest, __n)
    }
    pub unsafe fn bzero(&self, __s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_uint) {
        (self.bzero.as_ref().expect("Expected function, got error."))(__s, __n)
    }
    pub unsafe fn bcmp(
        &self,
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self.bcmp.as_ref().expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn index(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.index.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn rindex(
        &self,
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.rindex.as_ref().expect("Expected function, got error."))(__s, __c)
    }
    pub unsafe fn ffs(&self, __i: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.ffs.as_ref().expect("Expected function, got error."))(__i)
    }
    pub unsafe fn strcasecmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .strcasecmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2)
    }
    pub unsafe fn strncasecmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .strncasecmp
            .as_ref()
            .expect("Expected function, got error."))(__s1, __s2, __n)
    }
    pub unsafe fn strsep(
        &self,
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.strsep.as_ref().expect("Expected function, got error."))(__stringp, __delim)
    }
    pub unsafe fn strsignal(&self, __sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .strsignal
            .as_ref()
            .expect("Expected function, got error."))(__sig)
    }
    pub unsafe fn __stpcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__stpcpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn stpcpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self.stpcpy.as_ref().expect("Expected function, got error."))(__dest, __src)
    }
    pub unsafe fn __stpncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .__stpncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn stpncpy(
        &self,
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .stpncpy
            .as_ref()
            .expect("Expected function, got error."))(__dest, __src, __n)
    }
    pub unsafe fn __ctype_b_loc(&self) -> *mut *const ::std::os::raw::c_ushort {
        (self
            .__ctype_b_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __ctype_tolower_loc(&self) -> *mut *const __int32_t {
        (self
            .__ctype_tolower_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __ctype_toupper_loc(&self) -> *mut *const __int32_t {
        (self
            .__ctype_toupper_loc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn isalnum(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isalnum
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isalpha(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isalpha
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn iscntrl(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .iscntrl
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isdigit(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isdigit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn islower(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .islower
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isgraph(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isgraph
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isprint(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isprint
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ispunct(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .ispunct
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isspace(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isspace
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isupper(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isupper
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isxdigit(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isxdigit
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn tolower(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .tolower
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn toupper(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .toupper
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn isblank(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isblank
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isascii(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .isascii
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn toascii(&self, __c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .toascii
            .as_ref()
            .expect("Expected function, got error."))(__c)
    }
    pub unsafe fn _toupper(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._toupper
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn _tolower(&self, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            ._tolower
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn isalnum_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isalnum_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isalpha_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isalpha_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn iscntrl_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .iscntrl_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isdigit_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isdigit_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn islower_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .islower_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isgraph_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isgraph_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isprint_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isprint_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn ispunct_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .ispunct_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isspace_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isspace_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isupper_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isupper_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isxdigit_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isxdigit_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn isblank_l(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .isblank_l
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __tolower_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__tolower_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn tolower_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .tolower_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn __toupper_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__toupper_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn toupper_l(
        &self,
        __c: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int {
        (self
            .toupper_l
            .as_ref()
            .expect("Expected function, got error."))(__c, __l)
    }
    pub unsafe fn access(
        &self,
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.access.as_ref().expect("Expected function, got error."))(__name, __type)
    }
    pub unsafe fn faccessat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .faccessat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __type, __flag)
    }
    pub unsafe fn lseek(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t {
        (self.lseek.as_ref().expect("Expected function, got error."))(__fd, __offset, __whence)
    }
    pub unsafe fn close(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.close.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn read(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize {
        (self.read.as_ref().expect("Expected function, got error."))(__fd, __buf, __nbytes)
    }
    pub unsafe fn write(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize {
        (self.write.as_ref().expect("Expected function, got error."))(__fd, __buf, __n)
    }
    pub unsafe fn pread(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize {
        (self.pread.as_ref().expect("Expected function, got error."))(
            __fd, __buf, __nbytes, __offset,
        )
    }
    pub unsafe fn pwrite(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize {
        (self.pwrite.as_ref().expect("Expected function, got error."))(__fd, __buf, __n, __offset)
    }
    pub unsafe fn pipe(&self, __pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.pipe.as_ref().expect("Expected function, got error."))(__pipedes)
    }
    pub unsafe fn alarm(&self, __seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint {
        (self.alarm.as_ref().expect("Expected function, got error."))(__seconds)
    }
    pub unsafe fn sleep(&self, __seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint {
        (self.sleep.as_ref().expect("Expected function, got error."))(__seconds)
    }
    pub unsafe fn ualarm(&self, __value: __useconds_t, __interval: __useconds_t) -> __useconds_t {
        (self.ualarm.as_ref().expect("Expected function, got error."))(__value, __interval)
    }
    pub unsafe fn usleep(&self, __useconds: __useconds_t) -> ::std::os::raw::c_int {
        (self.usleep.as_ref().expect("Expected function, got error."))(__useconds)
    }
    pub unsafe fn pause(&self) -> ::std::os::raw::c_int {
        (self.pause.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn chown(
        &self,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.chown.as_ref().expect("Expected function, got error."))(__file, __owner, __group)
    }
    pub unsafe fn fchown(
        &self,
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.fchown.as_ref().expect("Expected function, got error."))(__fd, __owner, __group)
    }
    pub unsafe fn lchown(
        &self,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self.lchown.as_ref().expect("Expected function, got error."))(__file, __owner, __group)
    }
    pub unsafe fn fchownat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .fchownat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __owner, __group, __flag)
    }
    pub unsafe fn chdir(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.chdir.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn fchdir(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.fchdir.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn getcwd(
        &self,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    ) -> *mut ::std::os::raw::c_char {
        (self.getcwd.as_ref().expect("Expected function, got error."))(__buf, __size)
    }
    pub unsafe fn getwd(&self, __buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        (self.getwd.as_ref().expect("Expected function, got error."))(__buf)
    }
    pub unsafe fn dup(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.dup.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn dup2(
        &self,
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.dup2.as_ref().expect("Expected function, got error."))(__fd, __fd2)
    }
    pub unsafe fn execve(
        &self,
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execve.as_ref().expect("Expected function, got error."))(__path, __argv, __envp)
    }
    pub unsafe fn fexecve(
        &self,
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .fexecve
            .as_ref()
            .expect("Expected function, got error."))(__fd, __argv, __envp)
    }
    pub unsafe fn execv(
        &self,
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execv.as_ref().expect("Expected function, got error."))(__path, __argv)
    }
    pub unsafe fn execvp(
        &self,
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.execvp.as_ref().expect("Expected function, got error."))(__file, __argv)
    }
    pub unsafe fn nice(&self, __inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.nice.as_ref().expect("Expected function, got error."))(__inc)
    }
    pub unsafe fn _exit(&self, __status: ::std::os::raw::c_int) -> ! {
        (self._exit.as_ref().expect("Expected function, got error."))(__status)
    }
    pub unsafe fn pathconf(
        &self,
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .pathconf
            .as_ref()
            .expect("Expected function, got error."))(__path, __name)
    }
    pub unsafe fn fpathconf(
        &self,
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .fpathconf
            .as_ref()
            .expect("Expected function, got error."))(__fd, __name)
    }
    pub unsafe fn sysconf(&self, __name: ::std::os::raw::c_int) -> ::std::os::raw::c_long {
        (self
            .sysconf
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn confstr(
        &self,
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize {
        (self
            .confstr
            .as_ref()
            .expect("Expected function, got error."))(__name, __buf, __len)
    }
    pub unsafe fn getpid(&self) -> __pid_t {
        (self.getpid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getppid(&self) -> __pid_t {
        (self
            .getppid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getpgrp(&self) -> __pid_t {
        (self
            .getpgrp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __getpgid(&self, __pid: __pid_t) -> __pid_t {
        (self
            .__getpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn getpgid(&self, __pid: __pid_t) -> __pid_t {
        (self
            .getpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn setpgid(&self, __pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int {
        (self
            .setpgid
            .as_ref()
            .expect("Expected function, got error."))(__pid, __pgid)
    }
    pub unsafe fn setpgrp(&self) -> ::std::os::raw::c_int {
        (self
            .setpgrp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn setsid(&self) -> __pid_t {
        (self.setsid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getsid(&self, __pid: __pid_t) -> __pid_t {
        (self.getsid.as_ref().expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn getuid(&self) -> __uid_t {
        (self.getuid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn geteuid(&self) -> __uid_t {
        (self
            .geteuid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getgid(&self) -> __gid_t {
        (self.getgid.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getegid(&self) -> __gid_t {
        (self
            .getegid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getgroups(
        &self,
        __size: ::std::os::raw::c_int,
        __list: *mut __gid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .getgroups
            .as_ref()
            .expect("Expected function, got error."))(__size, __list)
    }
    pub unsafe fn setuid(&self, __uid: __uid_t) -> ::std::os::raw::c_int {
        (self.setuid.as_ref().expect("Expected function, got error."))(__uid)
    }
    pub unsafe fn setreuid(&self, __ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int {
        (self
            .setreuid
            .as_ref()
            .expect("Expected function, got error."))(__ruid, __euid)
    }
    pub unsafe fn seteuid(&self, __uid: __uid_t) -> ::std::os::raw::c_int {
        (self
            .seteuid
            .as_ref()
            .expect("Expected function, got error."))(__uid)
    }
    pub unsafe fn setgid(&self, __gid: __gid_t) -> ::std::os::raw::c_int {
        (self.setgid.as_ref().expect("Expected function, got error."))(__gid)
    }
    pub unsafe fn setregid(&self, __rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int {
        (self
            .setregid
            .as_ref()
            .expect("Expected function, got error."))(__rgid, __egid)
    }
    pub unsafe fn setegid(&self, __gid: __gid_t) -> ::std::os::raw::c_int {
        (self
            .setegid
            .as_ref()
            .expect("Expected function, got error."))(__gid)
    }
    pub unsafe fn fork(&self) -> __pid_t {
        (self.fork.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn vfork(&self) -> ::std::os::raw::c_int {
        (self.vfork.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn ttyname(&self, __fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .ttyname
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn ttyname_r(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .ttyname_r
            .as_ref()
            .expect("Expected function, got error."))(__fd, __buf, __buflen)
    }
    pub unsafe fn isatty(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.isatty.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn ttyslot(&self) -> ::std::os::raw::c_int {
        (self
            .ttyslot
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn link(
        &self,
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.link.as_ref().expect("Expected function, got error."))(__from, __to)
    }
    pub unsafe fn linkat(
        &self,
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.linkat.as_ref().expect("Expected function, got error."))(
            __fromfd, __from, __tofd, __to, __flags,
        )
    }
    pub unsafe fn symlink(
        &self,
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .symlink
            .as_ref()
            .expect("Expected function, got error."))(__from, __to)
    }
    pub unsafe fn readlink(
        &self,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize {
        (self
            .readlink
            .as_ref()
            .expect("Expected function, got error."))(__path, __buf, __len)
    }
    pub unsafe fn symlinkat(
        &self,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .symlinkat
            .as_ref()
            .expect("Expected function, got error."))(__from, __tofd, __to)
    }
    pub unsafe fn readlinkat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize {
        (self
            .readlinkat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __buf, __len)
    }
    pub unsafe fn unlink(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.unlink.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn unlinkat(
        &self,
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .unlinkat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __name, __flag)
    }
    pub unsafe fn rmdir(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.rmdir.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn tcgetpgrp(&self, __fd: ::std::os::raw::c_int) -> __pid_t {
        (self
            .tcgetpgrp
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn tcsetpgrp(
        &self,
        __fd: ::std::os::raw::c_int,
        __pgrp_id: __pid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .tcsetpgrp
            .as_ref()
            .expect("Expected function, got error."))(__fd, __pgrp_id)
    }
    pub unsafe fn getlogin(&self) -> *mut ::std::os::raw::c_char {
        (self
            .getlogin
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getlogin_r(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .getlogin_r
            .as_ref()
            .expect("Expected function, got error."))(__name, __name_len)
    }
    pub unsafe fn setlogin(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .setlogin
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getopt(
        &self,
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.getopt.as_ref().expect("Expected function, got error."))(
            ___argc,
            ___argv,
            __shortopts,
        )
    }
    pub unsafe fn gethostname(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .gethostname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn sethostname(
        &self,
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .sethostname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn sethostid(&self, __id: ::std::os::raw::c_long) -> ::std::os::raw::c_int {
        (self
            .sethostid
            .as_ref()
            .expect("Expected function, got error."))(__id)
    }
    pub unsafe fn getdomainname(
        &self,
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .getdomainname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn setdomainname(
        &self,
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .setdomainname
            .as_ref()
            .expect("Expected function, got error."))(__name, __len)
    }
    pub unsafe fn vhangup(&self) -> ::std::os::raw::c_int {
        (self
            .vhangup
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn revoke(&self, __file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.revoke.as_ref().expect("Expected function, got error."))(__file)
    }
    pub unsafe fn profil(
        &self,
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self.profil.as_ref().expect("Expected function, got error."))(
            __sample_buffer,
            __size,
            __offset,
            __scale,
        )
    }
    pub unsafe fn acct(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.acct.as_ref().expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getusershell(&self) -> *mut ::std::os::raw::c_char {
        (self
            .getusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn endusershell(&self) {
        (self
            .endusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn setusershell(&self) {
        (self
            .setusershell
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn daemon(
        &self,
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.daemon.as_ref().expect("Expected function, got error."))(__nochdir, __noclose)
    }
    pub unsafe fn chroot(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.chroot.as_ref().expect("Expected function, got error."))(__path)
    }
    pub unsafe fn getpass(
        &self,
        __prompt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .getpass
            .as_ref()
            .expect("Expected function, got error."))(__prompt)
    }
    pub unsafe fn fsync(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.fsync.as_ref().expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn gethostid(&self) -> ::std::os::raw::c_long {
        (self
            .gethostid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn sync(&self) {
        (self.sync.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn getpagesize(&self) -> ::std::os::raw::c_int {
        (self
            .getpagesize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getdtablesize(&self) -> ::std::os::raw::c_int {
        (self
            .getdtablesize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn truncate(
        &self,
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .truncate
            .as_ref()
            .expect("Expected function, got error."))(__file, __length)
    }
    pub unsafe fn ftruncate(
        &self,
        __fd: ::std::os::raw::c_int,
        __length: __off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .ftruncate
            .as_ref()
            .expect("Expected function, got error."))(__fd, __length)
    }
    pub unsafe fn brk(&self, __addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int {
        (self.brk.as_ref().expect("Expected function, got error."))(__addr)
    }
    pub unsafe fn sbrk(&self, __delta: isize) -> *mut ::std::os::raw::c_void {
        (self.sbrk.as_ref().expect("Expected function, got error."))(__delta)
    }
    pub unsafe fn lockf(
        &self,
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int {
        (self.lockf.as_ref().expect("Expected function, got error."))(__fd, __cmd, __len)
    }
    pub unsafe fn fdatasync(&self, __fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .fdatasync
            .as_ref()
            .expect("Expected function, got error."))(__fildes)
    }
    pub unsafe fn clock(&self) -> clock_t {
        (self.clock.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn time(&self, __timer: *mut time_t) -> time_t {
        (self.time.as_ref().expect("Expected function, got error."))(__timer)
    }
    pub unsafe fn difftime(&self, __time1: time_t, __time0: time_t) -> f64 {
        (self
            .difftime
            .as_ref()
            .expect("Expected function, got error."))(__time1, __time0)
    }
    pub unsafe fn mktime(&self, __tp: *mut tm) -> time_t {
        (self.mktime.as_ref().expect("Expected function, got error."))(__tp)
    }
    pub unsafe fn strftime(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize {
        (self
            .strftime
            .as_ref()
            .expect("Expected function, got error."))(__s, __maxsize, __format, __tp)
    }
    pub unsafe fn strftime_l(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: __locale_t,
    ) -> usize {
        (self
            .strftime_l
            .as_ref()
            .expect("Expected function, got error."))(__s, __maxsize, __format, __tp, __loc)
    }
    pub unsafe fn gmtime(&self, __timer: *const time_t) -> *mut tm {
        (self.gmtime.as_ref().expect("Expected function, got error."))(__timer)
    }
    pub unsafe fn localtime(&self, __timer: *const time_t) -> *mut tm {
        (self
            .localtime
            .as_ref()
            .expect("Expected function, got error."))(__timer)
    }
    pub unsafe fn gmtime_r(&self, __timer: *const time_t, __tp: *mut tm) -> *mut tm {
        (self
            .gmtime_r
            .as_ref()
            .expect("Expected function, got error."))(__timer, __tp)
    }
    pub unsafe fn localtime_r(&self, __timer: *const time_t, __tp: *mut tm) -> *mut tm {
        (self
            .localtime_r
            .as_ref()
            .expect("Expected function, got error."))(__timer, __tp)
    }
    pub unsafe fn asctime(&self, __tp: *const tm) -> *mut ::std::os::raw::c_char {
        (self
            .asctime
            .as_ref()
            .expect("Expected function, got error."))(__tp)
    }
    pub unsafe fn ctime(&self, __timer: *const time_t) -> *mut ::std::os::raw::c_char {
        (self.ctime.as_ref().expect("Expected function, got error."))(__timer)
    }
    pub unsafe fn asctime_r(
        &self,
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .asctime_r
            .as_ref()
            .expect("Expected function, got error."))(__tp, __buf)
    }
    pub unsafe fn ctime_r(
        &self,
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .ctime_r
            .as_ref()
            .expect("Expected function, got error."))(__timer, __buf)
    }
    pub unsafe fn tzset(&self) {
        (self.tzset.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn stime(&self, __when: *const time_t) -> ::std::os::raw::c_int {
        (self.stime.as_ref().expect("Expected function, got error."))(__when)
    }
    pub unsafe fn timegm(&self, __tp: *mut tm) -> time_t {
        (self.timegm.as_ref().expect("Expected function, got error."))(__tp)
    }
    pub unsafe fn timelocal(&self, __tp: *mut tm) -> time_t {
        (self
            .timelocal
            .as_ref()
            .expect("Expected function, got error."))(__tp)
    }
    pub unsafe fn dysize(&self, __year: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.dysize.as_ref().expect("Expected function, got error."))(__year)
    }
    pub unsafe fn nanosleep(
        &self,
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .nanosleep
            .as_ref()
            .expect("Expected function, got error."))(__requested_time, __remaining)
    }
    pub unsafe fn clock_getres(
        &self,
        __clock_id: clockid_t,
        __res: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_getres
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __res)
    }
    pub unsafe fn clock_gettime(
        &self,
        __clock_id: clockid_t,
        __tp: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_gettime
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __tp)
    }
    pub unsafe fn clock_settime(
        &self,
        __clock_id: clockid_t,
        __tp: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_settime
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __tp)
    }
    pub unsafe fn clock_nanosleep(
        &self,
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_nanosleep
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __flags, __req, __rem)
    }
    pub unsafe fn clock_getcpuclockid(
        &self,
        __pid: pid_t,
        __clock_id: *mut clockid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .clock_getcpuclockid
            .as_ref()
            .expect("Expected function, got error."))(__pid, __clock_id)
    }
    pub unsafe fn timer_create(
        &self,
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int {
        (self
            .timer_create
            .as_ref()
            .expect("Expected function, got error."))(__clock_id, __evp, __timerid)
    }
    pub unsafe fn timer_delete(&self, __timerid: timer_t) -> ::std::os::raw::c_int {
        (self
            .timer_delete
            .as_ref()
            .expect("Expected function, got error."))(__timerid)
    }
    pub unsafe fn timer_settime(
        &self,
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int {
        (self
            .timer_settime
            .as_ref()
            .expect("Expected function, got error."))(__timerid, __flags, __value, __ovalue)
    }
    pub unsafe fn timer_gettime(
        &self,
        __timerid: timer_t,
        __value: *mut itimerspec,
    ) -> ::std::os::raw::c_int {
        (self
            .timer_gettime
            .as_ref()
            .expect("Expected function, got error."))(__timerid, __value)
    }
    pub unsafe fn timer_getoverrun(&self, __timerid: timer_t) -> ::std::os::raw::c_int {
        (self
            .timer_getoverrun
            .as_ref()
            .expect("Expected function, got error."))(__timerid)
    }
    pub unsafe fn timespec_get(
        &self,
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .timespec_get
            .as_ref()
            .expect("Expected function, got error."))(__ts, __base)
    }
    pub unsafe fn gettimeofday(
        &self,
        __tv: *mut timeval,
        __tz: __timezone_ptr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .gettimeofday
            .as_ref()
            .expect("Expected function, got error."))(__tv, __tz)
    }
    pub unsafe fn settimeofday(
        &self,
        __tv: *const timeval,
        __tz: *const timezone,
    ) -> ::std::os::raw::c_int {
        (self
            .settimeofday
            .as_ref()
            .expect("Expected function, got error."))(__tv, __tz)
    }
    pub unsafe fn adjtime(
        &self,
        __delta: *const timeval,
        __olddelta: *mut timeval,
    ) -> ::std::os::raw::c_int {
        (self
            .adjtime
            .as_ref()
            .expect("Expected function, got error."))(__delta, __olddelta)
    }
    pub unsafe fn getitimer(
        &self,
        __which: __itimer_which_t,
        __value: *mut itimerval,
    ) -> ::std::os::raw::c_int {
        (self
            .getitimer
            .as_ref()
            .expect("Expected function, got error."))(__which, __value)
    }
    pub unsafe fn setitimer(
        &self,
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int {
        (self
            .setitimer
            .as_ref()
            .expect("Expected function, got error."))(__which, __new, __old)
    }
    pub unsafe fn utimes(
        &self,
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int {
        (self.utimes.as_ref().expect("Expected function, got error."))(__file, __tvp)
    }
    pub unsafe fn lutimes(
        &self,
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int {
        (self
            .lutimes
            .as_ref()
            .expect("Expected function, got error."))(__file, __tvp)
    }
    pub unsafe fn futimes(
        &self,
        __fd: ::std::os::raw::c_int,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int {
        (self
            .futimes
            .as_ref()
            .expect("Expected function, got error."))(__fd, __tvp)
    }
    pub unsafe fn stat(
        &self,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self.stat.as_ref().expect("Expected function, got error."))(__file, __buf)
    }
    pub unsafe fn fstat(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self.fstat.as_ref().expect("Expected function, got error."))(__fd, __buf)
    }
    pub unsafe fn fstatat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .fstatat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __buf, __flag)
    }
    pub unsafe fn lstat(
        &self,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self.lstat.as_ref().expect("Expected function, got error."))(__file, __buf)
    }
    pub unsafe fn chmod(
        &self,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.chmod.as_ref().expect("Expected function, got error."))(__file, __mode)
    }
    pub unsafe fn lchmod(
        &self,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.lchmod.as_ref().expect("Expected function, got error."))(__file, __mode)
    }
    pub unsafe fn fchmod(
        &self,
        __fd: ::std::os::raw::c_int,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.fchmod.as_ref().expect("Expected function, got error."))(__fd, __mode)
    }
    pub unsafe fn fchmodat(
        &self,
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .fchmodat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __file, __mode, __flag)
    }
    pub unsafe fn umask(&self, __mask: __mode_t) -> __mode_t {
        (self.umask.as_ref().expect("Expected function, got error."))(__mask)
    }
    pub unsafe fn mkdir(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.mkdir.as_ref().expect("Expected function, got error."))(__path, __mode)
    }
    pub unsafe fn mkdirat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self
            .mkdirat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __mode)
    }
    pub unsafe fn mknod(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int {
        (self.mknod.as_ref().expect("Expected function, got error."))(__path, __mode, __dev)
    }
    pub unsafe fn mknodat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int {
        (self
            .mknodat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __mode, __dev)
    }
    pub unsafe fn mkfifo(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self.mkfifo.as_ref().expect("Expected function, got error."))(__path, __mode)
    }
    pub unsafe fn mkfifoat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int {
        (self
            .mkfifoat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __mode)
    }
    pub unsafe fn utimensat(
        &self,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .utimensat
            .as_ref()
            .expect("Expected function, got error."))(__fd, __path, __times, __flags)
    }
    pub unsafe fn futimens(
        &self,
        __fd: ::std::os::raw::c_int,
        __times: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .futimens
            .as_ref()
            .expect("Expected function, got error."))(__fd, __times)
    }
    pub unsafe fn __fxstat(
        &self,
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self
            .__fxstat
            .as_ref()
            .expect("Expected function, got error."))(__ver, __fildes, __stat_buf)
    }
    pub unsafe fn __xstat(
        &self,
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self
            .__xstat
            .as_ref()
            .expect("Expected function, got error."))(__ver, __filename, __stat_buf)
    }
    pub unsafe fn __lxstat(
        &self,
        __ver: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self
            .__lxstat
            .as_ref()
            .expect("Expected function, got error."))(__ver, __filename, __stat_buf)
    }
    pub unsafe fn __fxstatat(
        &self,
        __ver: ::std::os::raw::c_int,
        __fildes: ::std::os::raw::c_int,
        __filename: *const ::std::os::raw::c_char,
        __stat_buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .__fxstatat
            .as_ref()
            .expect("Expected function, got error."))(
            __ver, __fildes, __filename, __stat_buf, __flag,
        )
    }
    pub unsafe fn __xmknod(
        &self,
        __ver: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__xmknod
            .as_ref()
            .expect("Expected function, got error."))(__ver, __path, __mode, __dev)
    }
    pub unsafe fn __xmknodat(
        &self,
        __ver: ::std::os::raw::c_int,
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__xmknodat
            .as_ref()
            .expect("Expected function, got error."))(__ver, __fd, __path, __mode, __dev)
    }
    pub unsafe fn __sigismember(
        &self,
        arg1: *const __sigset_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .__sigismember
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __sigaddset(
        &self,
        arg1: *mut __sigset_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .__sigaddset
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __sigdelset(
        &self,
        arg1: *mut __sigset_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .__sigdelset
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn __sysv_signal(
        &self,
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t {
        (self
            .__sysv_signal
            .as_ref()
            .expect("Expected function, got error."))(__sig, __handler)
    }
    pub unsafe fn signal(
        &self,
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t {
        (self.signal.as_ref().expect("Expected function, got error."))(__sig, __handler)
    }
    pub unsafe fn kill(
        &self,
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.kill.as_ref().expect("Expected function, got error."))(__pid, __sig)
    }
    pub unsafe fn killpg(
        &self,
        __pgrp: __pid_t,
        __sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.killpg.as_ref().expect("Expected function, got error."))(__pgrp, __sig)
    }
    pub unsafe fn raise(&self, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.raise.as_ref().expect("Expected function, got error."))(__sig)
    }
    pub unsafe fn ssignal(
        &self,
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t {
        (self
            .ssignal
            .as_ref()
            .expect("Expected function, got error."))(__sig, __handler)
    }
    pub unsafe fn gsignal(&self, __sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .gsignal
            .as_ref()
            .expect("Expected function, got error."))(__sig)
    }
    pub unsafe fn psignal(&self, __sig: ::std::os::raw::c_int, __s: *const ::std::os::raw::c_char) {
        (self
            .psignal
            .as_ref()
            .expect("Expected function, got error."))(__sig, __s)
    }
    pub unsafe fn psiginfo(&self, __pinfo: *const siginfo_t, __s: *const ::std::os::raw::c_char) {
        (self
            .psiginfo
            .as_ref()
            .expect("Expected function, got error."))(__pinfo, __s)
    }
    pub unsafe fn sigblock(&self, __mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .sigblock
            .as_ref()
            .expect("Expected function, got error."))(__mask)
    }
    pub unsafe fn sigsetmask(&self, __mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .sigsetmask
            .as_ref()
            .expect("Expected function, got error."))(__mask)
    }
    pub unsafe fn siggetmask(&self) -> ::std::os::raw::c_int {
        (self
            .siggetmask
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn sigemptyset(&self, __set: *mut sigset_t) -> ::std::os::raw::c_int {
        (self
            .sigemptyset
            .as_ref()
            .expect("Expected function, got error."))(__set)
    }
    pub unsafe fn sigfillset(&self, __set: *mut sigset_t) -> ::std::os::raw::c_int {
        (self
            .sigfillset
            .as_ref()
            .expect("Expected function, got error."))(__set)
    }
    pub unsafe fn sigaddset(
        &self,
        __set: *mut sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .sigaddset
            .as_ref()
            .expect("Expected function, got error."))(__set, __signo)
    }
    pub unsafe fn sigdelset(
        &self,
        __set: *mut sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .sigdelset
            .as_ref()
            .expect("Expected function, got error."))(__set, __signo)
    }
    pub unsafe fn sigismember(
        &self,
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .sigismember
            .as_ref()
            .expect("Expected function, got error."))(__set, __signo)
    }
    pub unsafe fn sigprocmask(
        &self,
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int {
        (self
            .sigprocmask
            .as_ref()
            .expect("Expected function, got error."))(__how, __set, __oset)
    }
    pub unsafe fn sigsuspend(&self, __set: *const sigset_t) -> ::std::os::raw::c_int {
        (self
            .sigsuspend
            .as_ref()
            .expect("Expected function, got error."))(__set)
    }
    pub unsafe fn sigaction(
        &self,
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int {
        (self
            .sigaction
            .as_ref()
            .expect("Expected function, got error."))(__sig, __act, __oact)
    }
    pub unsafe fn sigpending(&self, __set: *mut sigset_t) -> ::std::os::raw::c_int {
        (self
            .sigpending
            .as_ref()
            .expect("Expected function, got error."))(__set)
    }
    pub unsafe fn sigwait(
        &self,
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .sigwait
            .as_ref()
            .expect("Expected function, got error."))(__set, __sig)
    }
    pub unsafe fn sigwaitinfo(
        &self,
        __set: *const sigset_t,
        __info: *mut siginfo_t,
    ) -> ::std::os::raw::c_int {
        (self
            .sigwaitinfo
            .as_ref()
            .expect("Expected function, got error."))(__set, __info)
    }
    pub unsafe fn sigtimedwait(
        &self,
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .sigtimedwait
            .as_ref()
            .expect("Expected function, got error."))(__set, __info, __timeout)
    }
    pub unsafe fn sigqueue(
        &self,
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int {
        (self
            .sigqueue
            .as_ref()
            .expect("Expected function, got error."))(__pid, __sig, __val)
    }
    pub unsafe fn sigreturn(&self, __scp: *mut sigcontext) -> ::std::os::raw::c_int {
        (self
            .sigreturn
            .as_ref()
            .expect("Expected function, got error."))(__scp)
    }
    pub unsafe fn siginterrupt(
        &self,
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .siginterrupt
            .as_ref()
            .expect("Expected function, got error."))(__sig, __interrupt)
    }
    pub unsafe fn sigstack(
        &self,
        __ss: *mut sigstack,
        __oss: *mut sigstack,
    ) -> ::std::os::raw::c_int {
        (self
            .sigstack
            .as_ref()
            .expect("Expected function, got error."))(__ss, __oss)
    }
    pub unsafe fn sigaltstack(
        &self,
        __ss: *const sigaltstack,
        __oss: *mut sigaltstack,
    ) -> ::std::os::raw::c_int {
        (self
            .sigaltstack
            .as_ref()
            .expect("Expected function, got error."))(__ss, __oss)
    }
    pub unsafe fn pthread_sigmask(
        &self,
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_sigmask
            .as_ref()
            .expect("Expected function, got error."))(__how, __newmask, __oldmask)
    }
    pub unsafe fn pthread_kill(
        &self,
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_kill
            .as_ref()
            .expect("Expected function, got error."))(__threadid, __signo)
    }
    pub unsafe fn __libc_current_sigrtmin(&self) -> ::std::os::raw::c_int {
        (self
            .__libc_current_sigrtmin
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __libc_current_sigrtmax(&self) -> ::std::os::raw::c_int {
        (self
            .__libc_current_sigrtmax
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wait(&self, __stat_loc: __WAIT_STATUS) -> __pid_t {
        (self.wait.as_ref().expect("Expected function, got error."))(__stat_loc)
    }
    pub unsafe fn waitpid(
        &self,
        __pid: __pid_t,
        __stat_loc: *mut ::std::os::raw::c_int,
        __options: ::std::os::raw::c_int,
    ) -> __pid_t {
        (self
            .waitpid
            .as_ref()
            .expect("Expected function, got error."))(__pid, __stat_loc, __options)
    }
    pub unsafe fn waitid(
        &self,
        __idtype: idtype_t,
        __id: __id_t,
        __infop: *mut siginfo_t,
        __options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.waitid.as_ref().expect("Expected function, got error."))(
            __idtype, __id, __infop, __options,
        )
    }
    pub unsafe fn wait3(
        &self,
        __stat_loc: __WAIT_STATUS,
        __options: ::std::os::raw::c_int,
        __usage: *mut rusage,
    ) -> __pid_t {
        (self.wait3.as_ref().expect("Expected function, got error."))(
            __stat_loc, __options, __usage,
        )
    }
    pub unsafe fn wait4(
        &self,
        __pid: __pid_t,
        __stat_loc: __WAIT_STATUS,
        __options: ::std::os::raw::c_int,
        __usage: *mut rusage,
    ) -> __pid_t {
        (self.wait4.as_ref().expect("Expected function, got error."))(
            __pid, __stat_loc, __options, __usage,
        )
    }
    pub unsafe fn opendir(&self, __name: *const ::std::os::raw::c_char) -> *mut DIR {
        (self
            .opendir
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn fdopendir(&self, __fd: ::std::os::raw::c_int) -> *mut DIR {
        (self
            .fdopendir
            .as_ref()
            .expect("Expected function, got error."))(__fd)
    }
    pub unsafe fn closedir(&self, __dirp: *mut DIR) -> ::std::os::raw::c_int {
        (self
            .closedir
            .as_ref()
            .expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn readdir(&self, __dirp: *mut DIR) -> *mut dirent {
        (self
            .readdir
            .as_ref()
            .expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn readdir_r(
        &self,
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::std::os::raw::c_int {
        (self
            .readdir_r
            .as_ref()
            .expect("Expected function, got error."))(__dirp, __entry, __result)
    }
    pub unsafe fn rewinddir(&self, __dirp: *mut DIR) {
        (self
            .rewinddir
            .as_ref()
            .expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn seekdir(&self, __dirp: *mut DIR, __pos: ::std::os::raw::c_long) {
        (self
            .seekdir
            .as_ref()
            .expect("Expected function, got error."))(__dirp, __pos)
    }
    pub unsafe fn telldir(&self, __dirp: *mut DIR) -> ::std::os::raw::c_long {
        (self
            .telldir
            .as_ref()
            .expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn dirfd(&self, __dirp: *mut DIR) -> ::std::os::raw::c_int {
        (self.dirfd.as_ref().expect("Expected function, got error."))(__dirp)
    }
    pub unsafe fn scandir(
        &self,
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int {
        (self
            .scandir
            .as_ref()
            .expect("Expected function, got error."))(__dir, __namelist, __selector, __cmp)
    }
    pub unsafe fn alphasort(
        &self,
        __e1: *mut *const dirent,
        __e2: *mut *const dirent,
    ) -> ::std::os::raw::c_int {
        (self
            .alphasort
            .as_ref()
            .expect("Expected function, got error."))(__e1, __e2)
    }
    pub unsafe fn getdirentries(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
        __basep: *mut __off_t,
    ) -> __ssize_t {
        (self
            .getdirentries
            .as_ref()
            .expect("Expected function, got error."))(__fd, __buf, __nbytes, __basep)
    }
    pub unsafe fn creat(
        &self,
        __file: *const ::std::os::raw::c_char,
        __mode: mode_t,
    ) -> ::std::os::raw::c_int {
        (self.creat.as_ref().expect("Expected function, got error."))(__file, __mode)
    }
    pub unsafe fn posix_fadvise(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_fadvise
            .as_ref()
            .expect("Expected function, got error."))(__fd, __offset, __len, __advise)
    }
    pub unsafe fn posix_fallocate(
        &self,
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int {
        (self
            .posix_fallocate
            .as_ref()
            .expect("Expected function, got error."))(__fd, __offset, __len)
    }
    pub unsafe fn setgrent(&self) {
        (self
            .setgrent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn endgrent(&self) {
        (self
            .endgrent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getgrent(&self) -> *mut group {
        (self
            .getgrent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn fgetgrent(&self, __stream: *mut FILE) -> *mut group {
        (self
            .fgetgrent
            .as_ref()
            .expect("Expected function, got error."))(__stream)
    }
    pub unsafe fn getgrgid(&self, __gid: __gid_t) -> *mut group {
        (self
            .getgrgid
            .as_ref()
            .expect("Expected function, got error."))(__gid)
    }
    pub unsafe fn getgrnam(&self, __name: *const ::std::os::raw::c_char) -> *mut group {
        (self
            .getgrnam
            .as_ref()
            .expect("Expected function, got error."))(__name)
    }
    pub unsafe fn getgrgid_r(
        &self,
        __gid: __gid_t,
        __resultbuf: *mut group,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut group,
    ) -> ::std::os::raw::c_int {
        (self
            .getgrgid_r
            .as_ref()
            .expect("Expected function, got error."))(
            __gid,
            __resultbuf,
            __buffer,
            __buflen,
            __result,
        )
    }
    pub unsafe fn getgrnam_r(
        &self,
        __name: *const ::std::os::raw::c_char,
        __resultbuf: *mut group,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut group,
    ) -> ::std::os::raw::c_int {
        (self
            .getgrnam_r
            .as_ref()
            .expect("Expected function, got error."))(
            __name,
            __resultbuf,
            __buffer,
            __buflen,
            __result,
        )
    }
    pub unsafe fn fgetgrent_r(
        &self,
        __stream: *mut FILE,
        __resultbuf: *mut group,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut group,
    ) -> ::std::os::raw::c_int {
        (self
            .fgetgrent_r
            .as_ref()
            .expect("Expected function, got error."))(
            __stream,
            __resultbuf,
            __buffer,
            __buflen,
            __result,
        )
    }
    pub unsafe fn setgroups(&self, __n: usize, __groups: *const __gid_t) -> ::std::os::raw::c_int {
        (self
            .setgroups
            .as_ref()
            .expect("Expected function, got error."))(__n, __groups)
    }
    pub unsafe fn getgrouplist(
        &self,
        __user: *const ::std::os::raw::c_char,
        __group: __gid_t,
        __groups: *mut __gid_t,
        __ngroups: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .getgrouplist
            .as_ref()
            .expect("Expected function, got error."))(__user, __group, __groups, __ngroups)
    }
    pub unsafe fn initgroups(
        &self,
        __user: *const ::std::os::raw::c_char,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .initgroups
            .as_ref()
            .expect("Expected function, got error."))(__user, __group)
    }
    pub unsafe fn ftok(
        &self,
        __pathname: *const ::std::os::raw::c_char,
        __proj_id: ::std::os::raw::c_int,
    ) -> key_t {
        (self.ftok.as_ref().expect("Expected function, got error."))(__pathname, __proj_id)
    }
    pub unsafe fn __getpagesize(&self) -> ::std::os::raw::c_int {
        (self
            .__getpagesize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn shmctl(
        &self,
        __shmid: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __buf: *mut shmid_ds,
    ) -> ::std::os::raw::c_int {
        (self.shmctl.as_ref().expect("Expected function, got error."))(__shmid, __cmd, __buf)
    }
    pub unsafe fn shmget(
        &self,
        __key: key_t,
        __size: usize,
        __shmflg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.shmget.as_ref().expect("Expected function, got error."))(__key, __size, __shmflg)
    }
    pub unsafe fn shmat(
        &self,
        __shmid: ::std::os::raw::c_int,
        __shmaddr: *const ::std::os::raw::c_void,
        __shmflg: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        (self.shmat.as_ref().expect("Expected function, got error."))(__shmid, __shmaddr, __shmflg)
    }
    pub unsafe fn shmdt(&self, __shmaddr: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int {
        (self.shmdt.as_ref().expect("Expected function, got error."))(__shmaddr)
    }
    pub unsafe fn msgctl(
        &self,
        __msqid: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __buf: *mut msqid_ds,
    ) -> ::std::os::raw::c_int {
        (self.msgctl.as_ref().expect("Expected function, got error."))(__msqid, __cmd, __buf)
    }
    pub unsafe fn msgget(
        &self,
        __key: key_t,
        __msgflg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.msgget.as_ref().expect("Expected function, got error."))(__key, __msgflg)
    }
    pub unsafe fn msgrcv(
        &self,
        __msqid: ::std::os::raw::c_int,
        __msgp: *mut ::std::os::raw::c_void,
        __msgsz: usize,
        __msgtyp: ::std::os::raw::c_long,
        __msgflg: ::std::os::raw::c_int,
    ) -> isize {
        (self.msgrcv.as_ref().expect("Expected function, got error."))(
            __msqid, __msgp, __msgsz, __msgtyp, __msgflg,
        )
    }
    pub unsafe fn msgsnd(
        &self,
        __msqid: ::std::os::raw::c_int,
        __msgp: *const ::std::os::raw::c_void,
        __msgsz: usize,
        __msgflg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.msgsnd.as_ref().expect("Expected function, got error."))(
            __msqid, __msgp, __msgsz, __msgflg,
        )
    }
    pub unsafe fn sysinfo(&self, __info: *mut sysinfo) -> ::std::os::raw::c_int {
        (self
            .sysinfo
            .as_ref()
            .expect("Expected function, got error."))(__info)
    }
    pub unsafe fn get_nprocs_conf(&self) -> ::std::os::raw::c_int {
        (self
            .get_nprocs_conf
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_nprocs(&self) -> ::std::os::raw::c_int {
        (self
            .get_nprocs
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_phys_pages(&self) -> ::std::os::raw::c_long {
        (self
            .get_phys_pages
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_avphys_pages(&self) -> ::std::os::raw::c_long {
        (self
            .get_avphys_pages
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __errno_location(&self) -> *mut ::std::os::raw::c_int {
        (self
            .__errno_location
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn zlibVersion(&self) -> *const ::std::os::raw::c_char {
        (self
            .zlibVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn deflate(
        &self,
        strm: z_streamp,
        flush: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .deflate
            .as_ref()
            .expect("Expected function, got error."))(strm, flush)
    }
    pub unsafe fn deflateEnd(&self, strm: z_streamp) -> ::std::os::raw::c_int {
        (self
            .deflateEnd
            .as_ref()
            .expect("Expected function, got error."))(strm)
    }
    pub unsafe fn inflate(
        &self,
        strm: z_streamp,
        flush: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .inflate
            .as_ref()
            .expect("Expected function, got error."))(strm, flush)
    }
    pub unsafe fn inflateEnd(&self, strm: z_streamp) -> ::std::os::raw::c_int {
        (self
            .inflateEnd
            .as_ref()
            .expect("Expected function, got error."))(strm)
    }
    pub unsafe fn deflateSetDictionary(
        &self,
        strm: z_streamp,
        dictionary: *const Bytef,
        dictLength: uInt,
    ) -> ::std::os::raw::c_int {
        (self
            .deflateSetDictionary
            .as_ref()
            .expect("Expected function, got error."))(strm, dictionary, dictLength)
    }
    pub unsafe fn deflateGetDictionary(
        &self,
        strm: z_streamp,
        dictionary: *mut Bytef,
        dictLength: *mut uInt,
    ) -> ::std::os::raw::c_int {
        (self
            .deflateGetDictionary
            .as_ref()
            .expect("Expected function, got error."))(strm, dictionary, dictLength)
    }
    pub unsafe fn deflateCopy(&self, dest: z_streamp, source: z_streamp) -> ::std::os::raw::c_int {
        (self
            .deflateCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, source)
    }
    pub unsafe fn deflateReset(&self, strm: z_streamp) -> ::std::os::raw::c_int {
        (self
            .deflateReset
            .as_ref()
            .expect("Expected function, got error."))(strm)
    }
    pub unsafe fn deflateParams(
        &self,
        strm: z_streamp,
        level: ::std::os::raw::c_int,
        strategy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .deflateParams
            .as_ref()
            .expect("Expected function, got error."))(strm, level, strategy)
    }
    pub unsafe fn deflateTune(
        &self,
        strm: z_streamp,
        good_length: ::std::os::raw::c_int,
        max_lazy: ::std::os::raw::c_int,
        nice_length: ::std::os::raw::c_int,
        max_chain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .deflateTune
            .as_ref()
            .expect("Expected function, got error."))(
            strm,
            good_length,
            max_lazy,
            nice_length,
            max_chain,
        )
    }
    pub unsafe fn deflateBound(&self, strm: z_streamp, sourceLen: uLong) -> uLong {
        (self
            .deflateBound
            .as_ref()
            .expect("Expected function, got error."))(strm, sourceLen)
    }
    pub unsafe fn deflatePending(
        &self,
        strm: z_streamp,
        pending: *mut ::std::os::raw::c_uint,
        bits: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .deflatePending
            .as_ref()
            .expect("Expected function, got error."))(strm, pending, bits)
    }
    pub unsafe fn deflatePrime(
        &self,
        strm: z_streamp,
        bits: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .deflatePrime
            .as_ref()
            .expect("Expected function, got error."))(strm, bits, value)
    }
    pub unsafe fn deflateSetHeader(
        &self,
        strm: z_streamp,
        head: gz_headerp,
    ) -> ::std::os::raw::c_int {
        (self
            .deflateSetHeader
            .as_ref()
            .expect("Expected function, got error."))(strm, head)
    }
    pub unsafe fn inflateSetDictionary(
        &self,
        strm: z_streamp,
        dictionary: *const Bytef,
        dictLength: uInt,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateSetDictionary
            .as_ref()
            .expect("Expected function, got error."))(strm, dictionary, dictLength)
    }
    pub unsafe fn inflateGetDictionary(
        &self,
        strm: z_streamp,
        dictionary: *mut Bytef,
        dictLength: *mut uInt,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateGetDictionary
            .as_ref()
            .expect("Expected function, got error."))(strm, dictionary, dictLength)
    }
    pub unsafe fn inflateSync(&self, strm: z_streamp) -> ::std::os::raw::c_int {
        (self
            .inflateSync
            .as_ref()
            .expect("Expected function, got error."))(strm)
    }
    pub unsafe fn inflateCopy(&self, dest: z_streamp, source: z_streamp) -> ::std::os::raw::c_int {
        (self
            .inflateCopy
            .as_ref()
            .expect("Expected function, got error."))(dest, source)
    }
    pub unsafe fn inflateReset(&self, strm: z_streamp) -> ::std::os::raw::c_int {
        (self
            .inflateReset
            .as_ref()
            .expect("Expected function, got error."))(strm)
    }
    pub unsafe fn inflateReset2(
        &self,
        strm: z_streamp,
        windowBits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateReset2
            .as_ref()
            .expect("Expected function, got error."))(strm, windowBits)
    }
    pub unsafe fn inflatePrime(
        &self,
        strm: z_streamp,
        bits: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .inflatePrime
            .as_ref()
            .expect("Expected function, got error."))(strm, bits, value)
    }
    pub unsafe fn inflateMark(&self, strm: z_streamp) -> ::std::os::raw::c_long {
        (self
            .inflateMark
            .as_ref()
            .expect("Expected function, got error."))(strm)
    }
    pub unsafe fn inflateGetHeader(
        &self,
        strm: z_streamp,
        head: gz_headerp,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateGetHeader
            .as_ref()
            .expect("Expected function, got error."))(strm, head)
    }
    pub unsafe fn inflateBack(
        &self,
        strm: z_streamp,
        in_: in_func,
        in_desc: *mut ::std::os::raw::c_void,
        out: out_func,
        out_desc: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateBack
            .as_ref()
            .expect("Expected function, got error."))(strm, in_, in_desc, out, out_desc)
    }
    pub unsafe fn inflateBackEnd(&self, strm: z_streamp) -> ::std::os::raw::c_int {
        (self
            .inflateBackEnd
            .as_ref()
            .expect("Expected function, got error."))(strm)
    }
    pub unsafe fn zlibCompileFlags(&self) -> uLong {
        (self
            .zlibCompileFlags
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn compress(
        &self,
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
    ) -> ::std::os::raw::c_int {
        (self
            .compress
            .as_ref()
            .expect("Expected function, got error."))(dest, destLen, source, sourceLen)
    }
    pub unsafe fn compress2(
        &self,
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .compress2
            .as_ref()
            .expect("Expected function, got error."))(
            dest, destLen, source, sourceLen, level
        )
    }
    pub unsafe fn compressBound(&self, sourceLen: uLong) -> uLong {
        (self
            .compressBound
            .as_ref()
            .expect("Expected function, got error."))(sourceLen)
    }
    pub unsafe fn uncompress(
        &self,
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: uLong,
    ) -> ::std::os::raw::c_int {
        (self
            .uncompress
            .as_ref()
            .expect("Expected function, got error."))(dest, destLen, source, sourceLen)
    }
    pub unsafe fn uncompress2(
        &self,
        dest: *mut Bytef,
        destLen: *mut uLongf,
        source: *const Bytef,
        sourceLen: *mut uLong,
    ) -> ::std::os::raw::c_int {
        (self
            .uncompress2
            .as_ref()
            .expect("Expected function, got error."))(dest, destLen, source, sourceLen)
    }
    pub unsafe fn gzdopen(
        &self,
        fd: ::std::os::raw::c_int,
        mode: *const ::std::os::raw::c_char,
    ) -> gzFile {
        (self
            .gzdopen
            .as_ref()
            .expect("Expected function, got error."))(fd, mode)
    }
    pub unsafe fn gzbuffer(
        &self,
        file: gzFile,
        size: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .gzbuffer
            .as_ref()
            .expect("Expected function, got error."))(file, size)
    }
    pub unsafe fn gzsetparams(
        &self,
        file: gzFile,
        level: ::std::os::raw::c_int,
        strategy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .gzsetparams
            .as_ref()
            .expect("Expected function, got error."))(file, level, strategy)
    }
    pub unsafe fn gzread(
        &self,
        file: gzFile,
        buf: voidp,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self.gzread.as_ref().expect("Expected function, got error."))(file, buf, len)
    }
    pub unsafe fn gzfread(
        &self,
        buf: voidp,
        size: z_size_t,
        nitems: z_size_t,
        file: gzFile,
    ) -> z_size_t {
        (self
            .gzfread
            .as_ref()
            .expect("Expected function, got error."))(buf, size, nitems, file)
    }
    pub unsafe fn gzwrite(
        &self,
        file: gzFile,
        buf: voidpc,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .gzwrite
            .as_ref()
            .expect("Expected function, got error."))(file, buf, len)
    }
    pub unsafe fn gzfwrite(
        &self,
        buf: voidpc,
        size: z_size_t,
        nitems: z_size_t,
        file: gzFile,
    ) -> z_size_t {
        (self
            .gzfwrite
            .as_ref()
            .expect("Expected function, got error."))(buf, size, nitems, file)
    }
    pub unsafe fn gzputs(
        &self,
        file: gzFile,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self.gzputs.as_ref().expect("Expected function, got error."))(file, s)
    }
    pub unsafe fn gzgets(
        &self,
        file: gzFile,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self.gzgets.as_ref().expect("Expected function, got error."))(file, buf, len)
    }
    pub unsafe fn gzputc(&self, file: gzFile, c: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.gzputc.as_ref().expect("Expected function, got error."))(file, c)
    }
    pub unsafe fn gzgetc(&self, file: gzFile) -> ::std::os::raw::c_int {
        (self.gzgetc.as_ref().expect("Expected function, got error."))(file)
    }
    pub unsafe fn gzungetc(&self, c: ::std::os::raw::c_int, file: gzFile) -> ::std::os::raw::c_int {
        (self
            .gzungetc
            .as_ref()
            .expect("Expected function, got error."))(c, file)
    }
    pub unsafe fn gzflush(
        &self,
        file: gzFile,
        flush: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .gzflush
            .as_ref()
            .expect("Expected function, got error."))(file, flush)
    }
    pub unsafe fn gzrewind(&self, file: gzFile) -> ::std::os::raw::c_int {
        (self
            .gzrewind
            .as_ref()
            .expect("Expected function, got error."))(file)
    }
    pub unsafe fn gzeof(&self, file: gzFile) -> ::std::os::raw::c_int {
        (self.gzeof.as_ref().expect("Expected function, got error."))(file)
    }
    pub unsafe fn gzdirect(&self, file: gzFile) -> ::std::os::raw::c_int {
        (self
            .gzdirect
            .as_ref()
            .expect("Expected function, got error."))(file)
    }
    pub unsafe fn gzclose(&self, file: gzFile) -> ::std::os::raw::c_int {
        (self
            .gzclose
            .as_ref()
            .expect("Expected function, got error."))(file)
    }
    pub unsafe fn gzclose_r(&self, file: gzFile) -> ::std::os::raw::c_int {
        (self
            .gzclose_r
            .as_ref()
            .expect("Expected function, got error."))(file)
    }
    pub unsafe fn gzclose_w(&self, file: gzFile) -> ::std::os::raw::c_int {
        (self
            .gzclose_w
            .as_ref()
            .expect("Expected function, got error."))(file)
    }
    pub unsafe fn gzerror(
        &self,
        file: gzFile,
        errnum: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        (self
            .gzerror
            .as_ref()
            .expect("Expected function, got error."))(file, errnum)
    }
    pub unsafe fn gzclearerr(&self, file: gzFile) {
        (self
            .gzclearerr
            .as_ref()
            .expect("Expected function, got error."))(file)
    }
    pub unsafe fn adler32(&self, adler: uLong, buf: *const Bytef, len: uInt) -> uLong {
        (self
            .adler32
            .as_ref()
            .expect("Expected function, got error."))(adler, buf, len)
    }
    pub unsafe fn adler32_z(&self, adler: uLong, buf: *const Bytef, len: z_size_t) -> uLong {
        (self
            .adler32_z
            .as_ref()
            .expect("Expected function, got error."))(adler, buf, len)
    }
    pub unsafe fn crc32(&self, crc: uLong, buf: *const Bytef, len: uInt) -> uLong {
        (self.crc32.as_ref().expect("Expected function, got error."))(crc, buf, len)
    }
    pub unsafe fn crc32_z(&self, adler: uLong, buf: *const Bytef, len: z_size_t) -> uLong {
        (self
            .crc32_z
            .as_ref()
            .expect("Expected function, got error."))(adler, buf, len)
    }
    pub unsafe fn deflateInit_(
        &self,
        strm: z_streamp,
        level: ::std::os::raw::c_int,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .deflateInit_
            .as_ref()
            .expect("Expected function, got error."))(strm, level, version, stream_size)
    }
    pub unsafe fn inflateInit_(
        &self,
        strm: z_streamp,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateInit_
            .as_ref()
            .expect("Expected function, got error."))(strm, version, stream_size)
    }
    pub unsafe fn deflateInit2_(
        &self,
        strm: z_streamp,
        level: ::std::os::raw::c_int,
        method: ::std::os::raw::c_int,
        windowBits: ::std::os::raw::c_int,
        memLevel: ::std::os::raw::c_int,
        strategy: ::std::os::raw::c_int,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .deflateInit2_
            .as_ref()
            .expect("Expected function, got error."))(
            strm,
            level,
            method,
            windowBits,
            memLevel,
            strategy,
            version,
            stream_size,
        )
    }
    pub unsafe fn inflateInit2_(
        &self,
        strm: z_streamp,
        windowBits: ::std::os::raw::c_int,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateInit2_
            .as_ref()
            .expect("Expected function, got error."))(strm, windowBits, version, stream_size)
    }
    pub unsafe fn inflateBackInit_(
        &self,
        strm: z_streamp,
        windowBits: ::std::os::raw::c_int,
        window: *mut ::std::os::raw::c_uchar,
        version: *const ::std::os::raw::c_char,
        stream_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateBackInit_
            .as_ref()
            .expect("Expected function, got error."))(
            strm,
            windowBits,
            window,
            version,
            stream_size,
        )
    }
    pub unsafe fn gzgetc_(&self, file: gzFile) -> ::std::os::raw::c_int {
        (self
            .gzgetc_
            .as_ref()
            .expect("Expected function, got error."))(file)
    }
    pub unsafe fn gzopen(
        &self,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> gzFile {
        (self.gzopen.as_ref().expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn gzseek(&self, arg1: gzFile, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t {
        (self.gzseek.as_ref().expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn gztell(&self, arg1: gzFile) -> off_t {
        (self.gztell.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn gzoffset(&self, arg1: gzFile) -> off_t {
        (self
            .gzoffset
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn adler32_combine(&self, arg1: uLong, arg2: uLong, arg3: off_t) -> uLong {
        (self
            .adler32_combine
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn crc32_combine(&self, arg1: uLong, arg2: uLong, arg3: off_t) -> uLong {
        (self
            .crc32_combine
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3)
    }
    pub unsafe fn zError(&self, arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char {
        (self.zError.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn inflateSyncPoint(&self, arg1: z_streamp) -> ::std::os::raw::c_int {
        (self
            .inflateSyncPoint
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn get_crc_table(&self) -> *const z_crc_t {
        (self
            .get_crc_table
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn inflateUndermine(
        &self,
        arg1: z_streamp,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateUndermine
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn inflateValidate(
        &self,
        arg1: z_streamp,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .inflateValidate
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2)
    }
    pub unsafe fn inflateCodesUsed(&self, arg1: z_streamp) -> ::std::os::raw::c_ulong {
        (self
            .inflateCodesUsed
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn inflateResetKeep(&self, arg1: z_streamp) -> ::std::os::raw::c_int {
        (self
            .inflateResetKeep
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn deflateResetKeep(&self, arg1: z_streamp) -> ::std::os::raw::c_int {
        (self
            .deflateResetKeep
            .as_ref()
            .expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn gzvprintf(
        &self,
        file: gzFile,
        format: *const ::std::os::raw::c_char,
        va: va_list,
    ) -> ::std::os::raw::c_int {
        (self
            .gzvprintf
            .as_ref()
            .expect("Expected function, got error."))(file, format, va)
    }
    pub unsafe fn __sched_cpucount(
        &self,
        __setsize: usize,
        __setp: *const cpu_set_t,
    ) -> ::std::os::raw::c_int {
        (self
            .__sched_cpucount
            .as_ref()
            .expect("Expected function, got error."))(__setsize, __setp)
    }
    pub unsafe fn __sched_cpualloc(&self, __count: usize) -> *mut cpu_set_t {
        (self
            .__sched_cpualloc
            .as_ref()
            .expect("Expected function, got error."))(__count)
    }
    pub unsafe fn __sched_cpufree(&self, __set: *mut cpu_set_t) {
        (self
            .__sched_cpufree
            .as_ref()
            .expect("Expected function, got error."))(__set)
    }
    pub unsafe fn sched_setparam(
        &self,
        __pid: __pid_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int {
        (self
            .sched_setparam
            .as_ref()
            .expect("Expected function, got error."))(__pid, __param)
    }
    pub unsafe fn sched_getparam(
        &self,
        __pid: __pid_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int {
        (self
            .sched_getparam
            .as_ref()
            .expect("Expected function, got error."))(__pid, __param)
    }
    pub unsafe fn sched_setscheduler(
        &self,
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int {
        (self
            .sched_setscheduler
            .as_ref()
            .expect("Expected function, got error."))(__pid, __policy, __param)
    }
    pub unsafe fn sched_getscheduler(&self, __pid: __pid_t) -> ::std::os::raw::c_int {
        (self
            .sched_getscheduler
            .as_ref()
            .expect("Expected function, got error."))(__pid)
    }
    pub unsafe fn sched_yield(&self) -> ::std::os::raw::c_int {
        (self
            .sched_yield
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn sched_get_priority_max(
        &self,
        __algorithm: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .sched_get_priority_max
            .as_ref()
            .expect("Expected function, got error."))(__algorithm)
    }
    pub unsafe fn sched_get_priority_min(
        &self,
        __algorithm: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .sched_get_priority_min
            .as_ref()
            .expect("Expected function, got error."))(__algorithm)
    }
    pub unsafe fn sched_rr_get_interval(
        &self,
        __pid: __pid_t,
        __t: *mut timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .sched_rr_get_interval
            .as_ref()
            .expect("Expected function, got error."))(__pid, __t)
    }
    pub unsafe fn pthread_create(
        &self,
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_create
            .as_ref()
            .expect("Expected function, got error."))(
            __newthread, __attr, __start_routine, __arg
        )
    }
    pub unsafe fn pthread_exit(&self, __retval: *mut ::std::os::raw::c_void) -> ! {
        (self
            .pthread_exit
            .as_ref()
            .expect("Expected function, got error."))(__retval)
    }
    pub unsafe fn pthread_join(
        &self,
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_join
            .as_ref()
            .expect("Expected function, got error."))(__th, __thread_return)
    }
    pub unsafe fn pthread_detach(&self, __th: pthread_t) -> ::std::os::raw::c_int {
        (self
            .pthread_detach
            .as_ref()
            .expect("Expected function, got error."))(__th)
    }
    pub unsafe fn pthread_self(&self) -> pthread_t {
        (self
            .pthread_self
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn pthread_equal(
        &self,
        __thread1: pthread_t,
        __thread2: pthread_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_equal
            .as_ref()
            .expect("Expected function, got error."))(__thread1, __thread2)
    }
    pub unsafe fn pthread_attr_init(&self, __attr: *mut pthread_attr_t) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_init
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_attr_destroy(
        &self,
        __attr: *mut pthread_attr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_destroy
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_attr_getdetachstate(
        &self,
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getdetachstate
            .as_ref()
            .expect("Expected function, got error."))(__attr, __detachstate)
    }
    pub unsafe fn pthread_attr_setdetachstate(
        &self,
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setdetachstate
            .as_ref()
            .expect("Expected function, got error."))(__attr, __detachstate)
    }
    pub unsafe fn pthread_attr_getguardsize(
        &self,
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getguardsize
            .as_ref()
            .expect("Expected function, got error."))(__attr, __guardsize)
    }
    pub unsafe fn pthread_attr_setguardsize(
        &self,
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setguardsize
            .as_ref()
            .expect("Expected function, got error."))(__attr, __guardsize)
    }
    pub unsafe fn pthread_attr_getschedparam(
        &self,
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getschedparam
            .as_ref()
            .expect("Expected function, got error."))(__attr, __param)
    }
    pub unsafe fn pthread_attr_setschedparam(
        &self,
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setschedparam
            .as_ref()
            .expect("Expected function, got error."))(__attr, __param)
    }
    pub unsafe fn pthread_attr_getschedpolicy(
        &self,
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getschedpolicy
            .as_ref()
            .expect("Expected function, got error."))(__attr, __policy)
    }
    pub unsafe fn pthread_attr_setschedpolicy(
        &self,
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setschedpolicy
            .as_ref()
            .expect("Expected function, got error."))(__attr, __policy)
    }
    pub unsafe fn pthread_attr_getinheritsched(
        &self,
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getinheritsched
            .as_ref()
            .expect("Expected function, got error."))(__attr, __inherit)
    }
    pub unsafe fn pthread_attr_setinheritsched(
        &self,
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setinheritsched
            .as_ref()
            .expect("Expected function, got error."))(__attr, __inherit)
    }
    pub unsafe fn pthread_attr_getscope(
        &self,
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getscope
            .as_ref()
            .expect("Expected function, got error."))(__attr, __scope)
    }
    pub unsafe fn pthread_attr_setscope(
        &self,
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setscope
            .as_ref()
            .expect("Expected function, got error."))(__attr, __scope)
    }
    pub unsafe fn pthread_attr_getstackaddr(
        &self,
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getstackaddr
            .as_ref()
            .expect("Expected function, got error."))(__attr, __stackaddr)
    }
    pub unsafe fn pthread_attr_setstackaddr(
        &self,
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setstackaddr
            .as_ref()
            .expect("Expected function, got error."))(__attr, __stackaddr)
    }
    pub unsafe fn pthread_attr_getstacksize(
        &self,
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getstacksize
            .as_ref()
            .expect("Expected function, got error."))(__attr, __stacksize)
    }
    pub unsafe fn pthread_attr_setstacksize(
        &self,
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setstacksize
            .as_ref()
            .expect("Expected function, got error."))(__attr, __stacksize)
    }
    pub unsafe fn pthread_attr_getstack(
        &self,
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_getstack
            .as_ref()
            .expect("Expected function, got error."))(__attr, __stackaddr, __stacksize)
    }
    pub unsafe fn pthread_attr_setstack(
        &self,
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_attr_setstack
            .as_ref()
            .expect("Expected function, got error."))(__attr, __stackaddr, __stacksize)
    }
    pub unsafe fn pthread_setschedparam(
        &self,
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_setschedparam
            .as_ref()
            .expect("Expected function, got error."))(__target_thread, __policy, __param)
    }
    pub unsafe fn pthread_getschedparam(
        &self,
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_getschedparam
            .as_ref()
            .expect("Expected function, got error."))(__target_thread, __policy, __param)
    }
    pub unsafe fn pthread_setschedprio(
        &self,
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_setschedprio
            .as_ref()
            .expect("Expected function, got error."))(__target_thread, __prio)
    }
    pub unsafe fn pthread_once(
        &self,
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_once
            .as_ref()
            .expect("Expected function, got error."))(__once_control, __init_routine)
    }
    pub unsafe fn pthread_setcancelstate(
        &self,
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_setcancelstate
            .as_ref()
            .expect("Expected function, got error."))(__state, __oldstate)
    }
    pub unsafe fn pthread_setcanceltype(
        &self,
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_setcanceltype
            .as_ref()
            .expect("Expected function, got error."))(__type, __oldtype)
    }
    pub unsafe fn pthread_cancel(&self, __th: pthread_t) -> ::std::os::raw::c_int {
        (self
            .pthread_cancel
            .as_ref()
            .expect("Expected function, got error."))(__th)
    }
    pub unsafe fn pthread_testcancel(&self) {
        (self
            .pthread_testcancel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn __pthread_register_cancel(&self, __buf: *mut __pthread_unwind_buf_t) {
        (self
            .__pthread_register_cancel
            .as_ref()
            .expect("Expected function, got error."))(__buf)
    }
    pub unsafe fn __pthread_unregister_cancel(&self, __buf: *mut __pthread_unwind_buf_t) {
        (self
            .__pthread_unregister_cancel
            .as_ref()
            .expect("Expected function, got error."))(__buf)
    }
    pub unsafe fn __pthread_unwind_next(&self, __buf: *mut __pthread_unwind_buf_t) -> ! {
        (self
            .__pthread_unwind_next
            .as_ref()
            .expect("Expected function, got error."))(__buf)
    }
    pub unsafe fn __sigsetjmp(
        &self,
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .__sigsetjmp
            .as_ref()
            .expect("Expected function, got error."))(__env, __savemask)
    }
    pub unsafe fn pthread_mutex_init(
        &self,
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_init
            .as_ref()
            .expect("Expected function, got error."))(__mutex, __mutexattr)
    }
    pub unsafe fn pthread_mutex_destroy(
        &self,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_destroy
            .as_ref()
            .expect("Expected function, got error."))(__mutex)
    }
    pub unsafe fn pthread_mutex_trylock(
        &self,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_trylock
            .as_ref()
            .expect("Expected function, got error."))(__mutex)
    }
    pub unsafe fn pthread_mutex_lock(
        &self,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_lock
            .as_ref()
            .expect("Expected function, got error."))(__mutex)
    }
    pub unsafe fn pthread_mutex_timedlock(
        &self,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_timedlock
            .as_ref()
            .expect("Expected function, got error."))(__mutex, __abstime)
    }
    pub unsafe fn pthread_mutex_unlock(
        &self,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_unlock
            .as_ref()
            .expect("Expected function, got error."))(__mutex)
    }
    pub unsafe fn pthread_mutex_getprioceiling(
        &self,
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_getprioceiling
            .as_ref()
            .expect("Expected function, got error."))(__mutex, __prioceiling)
    }
    pub unsafe fn pthread_mutex_setprioceiling(
        &self,
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_setprioceiling
            .as_ref()
            .expect("Expected function, got error."))(__mutex, __prioceiling, __old_ceiling)
    }
    pub unsafe fn pthread_mutex_consistent(
        &self,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutex_consistent
            .as_ref()
            .expect("Expected function, got error."))(__mutex)
    }
    pub unsafe fn pthread_mutexattr_init(
        &self,
        __attr: *mut pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_init
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_mutexattr_destroy(
        &self,
        __attr: *mut pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_destroy
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_mutexattr_getpshared(
        &self,
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_getpshared
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pshared)
    }
    pub unsafe fn pthread_mutexattr_setpshared(
        &self,
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_setpshared
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pshared)
    }
    pub unsafe fn pthread_mutexattr_gettype(
        &self,
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_gettype
            .as_ref()
            .expect("Expected function, got error."))(__attr, __kind)
    }
    pub unsafe fn pthread_mutexattr_settype(
        &self,
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_settype
            .as_ref()
            .expect("Expected function, got error."))(__attr, __kind)
    }
    pub unsafe fn pthread_mutexattr_getprotocol(
        &self,
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_getprotocol
            .as_ref()
            .expect("Expected function, got error."))(__attr, __protocol)
    }
    pub unsafe fn pthread_mutexattr_setprotocol(
        &self,
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_setprotocol
            .as_ref()
            .expect("Expected function, got error."))(__attr, __protocol)
    }
    pub unsafe fn pthread_mutexattr_getprioceiling(
        &self,
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_getprioceiling
            .as_ref()
            .expect("Expected function, got error."))(__attr, __prioceiling)
    }
    pub unsafe fn pthread_mutexattr_setprioceiling(
        &self,
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_setprioceiling
            .as_ref()
            .expect("Expected function, got error."))(__attr, __prioceiling)
    }
    pub unsafe fn pthread_mutexattr_getrobust(
        &self,
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_getrobust
            .as_ref()
            .expect("Expected function, got error."))(__attr, __robustness)
    }
    pub unsafe fn pthread_mutexattr_setrobust(
        &self,
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_mutexattr_setrobust
            .as_ref()
            .expect("Expected function, got error."))(__attr, __robustness)
    }
    pub unsafe fn pthread_rwlock_init(
        &self,
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_init
            .as_ref()
            .expect("Expected function, got error."))(__rwlock, __attr)
    }
    pub unsafe fn pthread_rwlock_destroy(
        &self,
        __rwlock: *mut pthread_rwlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_destroy
            .as_ref()
            .expect("Expected function, got error."))(__rwlock)
    }
    pub unsafe fn pthread_rwlock_rdlock(
        &self,
        __rwlock: *mut pthread_rwlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_rdlock
            .as_ref()
            .expect("Expected function, got error."))(__rwlock)
    }
    pub unsafe fn pthread_rwlock_tryrdlock(
        &self,
        __rwlock: *mut pthread_rwlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_tryrdlock
            .as_ref()
            .expect("Expected function, got error."))(__rwlock)
    }
    pub unsafe fn pthread_rwlock_timedrdlock(
        &self,
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_timedrdlock
            .as_ref()
            .expect("Expected function, got error."))(__rwlock, __abstime)
    }
    pub unsafe fn pthread_rwlock_wrlock(
        &self,
        __rwlock: *mut pthread_rwlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_wrlock
            .as_ref()
            .expect("Expected function, got error."))(__rwlock)
    }
    pub unsafe fn pthread_rwlock_trywrlock(
        &self,
        __rwlock: *mut pthread_rwlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_trywrlock
            .as_ref()
            .expect("Expected function, got error."))(__rwlock)
    }
    pub unsafe fn pthread_rwlock_timedwrlock(
        &self,
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_timedwrlock
            .as_ref()
            .expect("Expected function, got error."))(__rwlock, __abstime)
    }
    pub unsafe fn pthread_rwlock_unlock(
        &self,
        __rwlock: *mut pthread_rwlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlock_unlock
            .as_ref()
            .expect("Expected function, got error."))(__rwlock)
    }
    pub unsafe fn pthread_rwlockattr_init(
        &self,
        __attr: *mut pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlockattr_init
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_rwlockattr_destroy(
        &self,
        __attr: *mut pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlockattr_destroy
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_rwlockattr_getpshared(
        &self,
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlockattr_getpshared
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pshared)
    }
    pub unsafe fn pthread_rwlockattr_setpshared(
        &self,
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlockattr_setpshared
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pshared)
    }
    pub unsafe fn pthread_rwlockattr_getkind_np(
        &self,
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlockattr_getkind_np
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pref)
    }
    pub unsafe fn pthread_rwlockattr_setkind_np(
        &self,
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_rwlockattr_setkind_np
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pref)
    }
    pub unsafe fn pthread_cond_init(
        &self,
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_cond_init
            .as_ref()
            .expect("Expected function, got error."))(__cond, __cond_attr)
    }
    pub unsafe fn pthread_cond_destroy(
        &self,
        __cond: *mut pthread_cond_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_cond_destroy
            .as_ref()
            .expect("Expected function, got error."))(__cond)
    }
    pub unsafe fn pthread_cond_signal(&self, __cond: *mut pthread_cond_t) -> ::std::os::raw::c_int {
        (self
            .pthread_cond_signal
            .as_ref()
            .expect("Expected function, got error."))(__cond)
    }
    pub unsafe fn pthread_cond_broadcast(
        &self,
        __cond: *mut pthread_cond_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_cond_broadcast
            .as_ref()
            .expect("Expected function, got error."))(__cond)
    }
    pub unsafe fn pthread_cond_wait(
        &self,
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_cond_wait
            .as_ref()
            .expect("Expected function, got error."))(__cond, __mutex)
    }
    pub unsafe fn pthread_cond_timedwait(
        &self,
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_cond_timedwait
            .as_ref()
            .expect("Expected function, got error."))(__cond, __mutex, __abstime)
    }
    pub unsafe fn pthread_condattr_init(
        &self,
        __attr: *mut pthread_condattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_condattr_init
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_condattr_destroy(
        &self,
        __attr: *mut pthread_condattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_condattr_destroy
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_condattr_getpshared(
        &self,
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_condattr_getpshared
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pshared)
    }
    pub unsafe fn pthread_condattr_setpshared(
        &self,
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_condattr_setpshared
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pshared)
    }
    pub unsafe fn pthread_condattr_getclock(
        &self,
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_condattr_getclock
            .as_ref()
            .expect("Expected function, got error."))(__attr, __clock_id)
    }
    pub unsafe fn pthread_condattr_setclock(
        &self,
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_condattr_setclock
            .as_ref()
            .expect("Expected function, got error."))(__attr, __clock_id)
    }
    pub unsafe fn pthread_spin_init(
        &self,
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_spin_init
            .as_ref()
            .expect("Expected function, got error."))(__lock, __pshared)
    }
    pub unsafe fn pthread_spin_destroy(
        &self,
        __lock: *mut pthread_spinlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_spin_destroy
            .as_ref()
            .expect("Expected function, got error."))(__lock)
    }
    pub unsafe fn pthread_spin_lock(
        &self,
        __lock: *mut pthread_spinlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_spin_lock
            .as_ref()
            .expect("Expected function, got error."))(__lock)
    }
    pub unsafe fn pthread_spin_trylock(
        &self,
        __lock: *mut pthread_spinlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_spin_trylock
            .as_ref()
            .expect("Expected function, got error."))(__lock)
    }
    pub unsafe fn pthread_spin_unlock(
        &self,
        __lock: *mut pthread_spinlock_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_spin_unlock
            .as_ref()
            .expect("Expected function, got error."))(__lock)
    }
    pub unsafe fn pthread_barrier_init(
        &self,
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_barrier_init
            .as_ref()
            .expect("Expected function, got error."))(__barrier, __attr, __count)
    }
    pub unsafe fn pthread_barrier_destroy(
        &self,
        __barrier: *mut pthread_barrier_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_barrier_destroy
            .as_ref()
            .expect("Expected function, got error."))(__barrier)
    }
    pub unsafe fn pthread_barrier_wait(
        &self,
        __barrier: *mut pthread_barrier_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_barrier_wait
            .as_ref()
            .expect("Expected function, got error."))(__barrier)
    }
    pub unsafe fn pthread_barrierattr_init(
        &self,
        __attr: *mut pthread_barrierattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_barrierattr_init
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_barrierattr_destroy(
        &self,
        __attr: *mut pthread_barrierattr_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_barrierattr_destroy
            .as_ref()
            .expect("Expected function, got error."))(__attr)
    }
    pub unsafe fn pthread_barrierattr_getpshared(
        &self,
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_barrierattr_getpshared
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pshared)
    }
    pub unsafe fn pthread_barrierattr_setpshared(
        &self,
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_barrierattr_setpshared
            .as_ref()
            .expect("Expected function, got error."))(__attr, __pshared)
    }
    pub unsafe fn pthread_key_create(
        &self,
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_key_create
            .as_ref()
            .expect("Expected function, got error."))(__key, __destr_function)
    }
    pub unsafe fn pthread_key_delete(&self, __key: pthread_key_t) -> ::std::os::raw::c_int {
        (self
            .pthread_key_delete
            .as_ref()
            .expect("Expected function, got error."))(__key)
    }
    pub unsafe fn pthread_getspecific(&self, __key: pthread_key_t) -> *mut ::std::os::raw::c_void {
        (self
            .pthread_getspecific
            .as_ref()
            .expect("Expected function, got error."))(__key)
    }
    pub unsafe fn pthread_setspecific(
        &self,
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_setspecific
            .as_ref()
            .expect("Expected function, got error."))(__key, __pointer)
    }
    pub unsafe fn pthread_getcpuclockid(
        &self,
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_getcpuclockid
            .as_ref()
            .expect("Expected function, got error."))(__thread_id, __clock_id)
    }
    pub unsafe fn pthread_atfork(
        &self,
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        (self
            .pthread_atfork
            .as_ref()
            .expect("Expected function, got error."))(__prepare, __parent, __child)
    }
    pub unsafe fn device_audio(&self) -> audio_id_t {
        (self
            .device_audio
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_audio(&self) -> bool {
        (self
            .device_has_audio
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_hp_detect_cfg(&self) -> *const hp_detect_cfg_t {
        (self
            .device_hp_detect_cfg
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn init_hwconfig(&self) -> bool {
        (self
            .init_hwconfig
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_ID(&self) -> device_id_t {
        (self
            .device_ID
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_platform(&self) -> platform_id_t {
        (self
            .device_platform
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_number(&self) -> ::std::os::raw::c_uint {
        (self
            .device_number
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_display(&self) -> display_id_t {
        (self
            .device_display
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_display_colormask(&self) -> colormask_t {
        (self
            .device_display_colormask
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_display_height(&self) -> ::std::os::raw::c_uint {
        (self
            .device_display_height
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_display_width(&self) -> ::std::os::raw::c_uint {
        (self
            .device_display_width
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_display_scanline(&self) -> ::std::os::raw::c_uint {
        (self
            .device_display_scanline
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_display_dpi(&self) -> ::std::os::raw::c_uint {
        (self
            .device_display_dpi
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_display_native_orientation(&self) -> ::std::os::raw::c_uint {
        (self
            .device_display_native_orientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_display_position(&self) -> u8 {
        (self
            .device_display_position
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_epdc(&self) -> epdc_id_t {
        (self
            .device_epdc
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_epdc_init(&self) -> *mut epdc_instance_t {
        (self
            .device_epdc_init
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_keyboard(&self) -> keyboard_id_t {
        (self
            .device_keyboard
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_touchpanel(&self) -> touchpanel_id_t {
        (self
            .device_touchpanel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_touchpanel(&self) -> bool {
        (self
            .device_has_touchpanel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_input_init(&self) -> ::std::os::raw::c_int {
        (self
            .device_input_init
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_input_read(
        &self,
        ie: *mut input_event,
        devtype: *mut input_dev_e,
        maxcount: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .device_input_read
            .as_ref()
            .expect("Expected function, got error."))(ie, devtype, maxcount, timeout_ms)
    }
    pub unsafe fn device_keyboard_translate(
        &self,
        ev: *mut input_event,
        keymask: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        (self
            .device_keyboard_translate
            .as_ref()
            .expect("Expected function, got error."))(ev, keymask)
    }
    pub unsafe fn device_keyboard_buttons(&self) -> ::std::os::raw::c_ulong {
        (self
            .device_keyboard_buttons
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_keyboard_state(&self) -> ::std::os::raw::c_ulong {
        (self
            .device_keyboard_state
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_touchpanel_getmatrix(&self) -> *const ::std::os::raw::c_int {
        (self
            .device_touchpanel_getmatrix
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn add_input_device(
        &self,
        devpath: *const ::std::os::raw::c_char,
        devtype: input_dev_e,
    ) -> ::std::os::raw::c_int {
        (self
            .add_input_device
            .as_ref()
            .expect("Expected function, got error."))(devpath, devtype)
    }
    pub unsafe fn remove_input_device(
        &self,
        devpath: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .remove_input_device
            .as_ref()
            .expect("Expected function, got error."))(devpath)
    }
    pub unsafe fn device_slider(&self) -> slider_id_t {
        (self
            .device_slider
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_slider(&self) -> bool {
        (self
            .device_has_slider
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_slider_cfg(&self) -> *const slider_cfg_t {
        (self
            .device_slider_cfg
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_gyroscope(&self) -> gyroscop_id_t {
        (self
            .device_gyroscope
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_gyroscope_placement(&self) -> u8 {
        (self
            .device_gyroscope_placement
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_gyroscope(&self) -> bool {
        (self
            .device_has_gyroscope
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_extcard(&self) -> bool {
        (self
            .device_has_extcard
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_usb(&self) -> usb_id_t {
        (self
            .device_usb
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_usb(&self) -> bool {
        (self
            .device_has_usb
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_usbhost(&self) -> bool {
        (self
            .device_has_usbhost
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_frontlight(&self) -> frontlight_id_t {
        (self
            .device_frontlight
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_frontlight(&self) -> bool {
        (self
            .device_has_frontlight
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_model(&self) -> *const ::std::os::raw::c_char {
        (self
            .device_model
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_serial_number(&self) -> *const ::std::os::raw::c_char {
        (self
            .device_serial_number
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_init_led(&self, cfg_led_state: bool) {
        (self
            .device_init_led
            .as_ref()
            .expect("Expected function, got error."))(cfg_led_state)
    }
    pub unsafe fn device_set_led(&self, value: ::std::os::raw::c_int) {
        (self
            .device_set_led
            .as_ref()
            .expect("Expected function, got error."))(value)
    }
    pub unsafe fn device_get_led(&self) -> ::std::os::raw::c_int {
        (self
            .device_get_led
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_battery_percent(&self) -> ::std::os::raw::c_int {
        (self
            .device_battery_percent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_is_powered(&self) -> bool {
        (self
            .device_is_powered
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_set_bootcramfs_flag(&self, flag: bool) -> bool {
        (self
            .device_set_bootcramfs_flag
            .as_ref()
            .expect("Expected function, got error."))(flag)
    }
    pub unsafe fn device_reboot(&self) {
        (self
            .device_reboot
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_poweroff(&self) {
        (self
            .device_poweroff
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_frontlight_init(&self) -> *mut frontlight_ctrl {
        (self
            .device_frontlight_init
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_lightsensor(&self) -> lightsensor_id_t {
        (self
            .device_lightsensor
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_lightsensor(&self) -> bool {
        (self
            .device_has_lightsensor
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_bluetooth(&self) -> bluetooth_id_t {
        (self
            .device_bluetooth
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_bluetooth(&self) -> bool {
        (self
            .device_has_bluetooth
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_wifi(&self) -> wifi_id_t {
        (self
            .device_wifi
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_wifi(&self) -> bool {
        (self
            .device_has_wifi
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_gsm(&self) -> gsm_id_t {
        (self
            .device_gsm
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_has_gsm(&self) -> bool {
        (self
            .device_has_gsm
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_suspend(&self, deep: bool) -> bool {
        (self
            .device_suspend
            .as_ref()
            .expect("Expected function, got error."))(deep)
    }
    pub unsafe fn device_set_wakealarm(&self, seconds: ::std::os::raw::c_int) -> bool {
        (self
            .device_set_wakealarm
            .as_ref()
            .expect("Expected function, got error."))(seconds)
    }
    pub unsafe fn device_write_file(
        &self,
        name: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> bool {
        (self
            .device_write_file
            .as_ref()
            .expect("Expected function, got error."))(name, buf, size)
    }
    pub unsafe fn device_write_file_int(
        &self,
        name: *const ::std::os::raw::c_char,
        v: ::std::os::raw::c_int,
    ) -> bool {
        (self
            .device_write_file_int
            .as_ref()
            .expect("Expected function, got error."))(name, v)
    }
    pub unsafe fn device_read_bin_file(
        &self,
        name: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .device_read_bin_file
            .as_ref()
            .expect("Expected function, got error."))(name, buf, size)
    }
    pub unsafe fn device_read_file(
        &self,
        name: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> bool {
        (self
            .device_read_file
            .as_ref()
            .expect("Expected function, got error."))(name, buf, size)
    }
    pub unsafe fn device_read_file_int(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .device_read_file_int
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn device_power_led_cfg(&self) -> *const power_led_cfg_t {
        (self
            .device_power_led_cfg
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn device_storage_cfg(&self) -> *mut storage_cfg_t {
        (self
            .device_storage_cfg
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_get_default_font(&self, fonttype: FONT_TYPE) -> *mut ::std::os::raw::c_char {
        (self
            .iv_get_default_font
            .as_ref()
            .expect("Expected function, got error."))(fonttype)
    }
    pub unsafe fn GetHardwareDepth(&self) -> ::std::os::raw::c_int {
        (self
            .GetHardwareDepth
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief iv_size{i,f,d}\n @param bitmap\n @return bitmap size vector"]
    pub unsafe fn iv_sizei(&self, bitmap: *const iv_bitmap) -> iv_vector2i {
        (self
            .iv_sizei
            .as_ref()
            .expect("Expected function, got error."))(bitmap)
    }
    pub unsafe fn iv_sizef(&self, bitmap: *const iv_bitmap) -> iv_vector2f {
        (self
            .iv_sizef
            .as_ref()
            .expect("Expected function, got error."))(bitmap)
    }
    pub unsafe fn iv_sized(&self, bitmap: *const iv_bitmap) -> iv_vector2d {
        (self
            .iv_sized
            .as_ref()
            .expect("Expected function, got error."))(bitmap)
    }
    #[doc = " @brief iv_half_size{i,f,d}\n @param bitmap\n @return bitmap size vector / 2 (center of image)"]
    pub unsafe fn iv_half_sizei(&self, bitmap: *mut ibitmap) -> iv_vector2i {
        (self
            .iv_half_sizei
            .as_ref()
            .expect("Expected function, got error."))(bitmap)
    }
    pub unsafe fn iv_half_sizef(&self, bitmap: *mut ibitmap) -> iv_vector2f {
        (self
            .iv_half_sizef
            .as_ref()
            .expect("Expected function, got error."))(bitmap)
    }
    pub unsafe fn iv_half_sized(&self, bitmap: *mut ibitmap) -> iv_vector2d {
        (self
            .iv_half_sized
            .as_ref()
            .expect("Expected function, got error."))(bitmap)
    }
    pub unsafe fn iv_bitmap_ref_from_canvas(&self, canvas: *mut icanvas) -> iv_bitmap_ref {
        (self
            .iv_bitmap_ref_from_canvas
            .as_ref()
            .expect("Expected function, got error."))(canvas)
    }
    pub unsafe fn stacktrace_dump(&self) {
        (self
            .stacktrace_dump
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenScreen(&self) {
        (self
            .OpenScreen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsScreenOpened(&self) -> ::std::os::raw::c_int {
        (self
            .IsScreenOpened
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenScreenExt(&self) {
        (self
            .OpenScreenExt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn InkViewMain(&self, h: iv_handler) {
        (self
            .InkViewMain
            .as_ref()
            .expect("Expected function, got error."))(h)
    }
    pub unsafe fn CloseApp(&self) {
        (self
            .CloseApp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn InitInkview(&self, reg_flags: ::std::os::raw::c_int) {
        (self
            .InitInkview
            .as_ref()
            .expect("Expected function, got error."))(reg_flags)
    }
    pub unsafe fn iv_new_vector2i(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> iv_vector2i {
        (self
            .iv_new_vector2i
            .as_ref()
            .expect("Expected function, got error."))(x, y)
    }
    pub unsafe fn iv_new_vector2f(&self, x: f32, y: f32) -> iv_vector2f {
        (self
            .iv_new_vector2f
            .as_ref()
            .expect("Expected function, got error."))(x, y)
    }
    pub unsafe fn iv_new_vector2d(&self, x: f64, y: f64) -> iv_vector2d {
        (self
            .iv_new_vector2d
            .as_ref()
            .expect("Expected function, got error."))(x, y)
    }
    pub unsafe fn iv_vec2i_to2d(&self, v: iv_vector2i) -> iv_vector2d {
        (self
            .iv_vec2i_to2d
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn iv_new_matrix2i(
        &self,
        a00: ::std::os::raw::c_int,
        a01: ::std::os::raw::c_int,
        a10: ::std::os::raw::c_int,
        a11: ::std::os::raw::c_int,
    ) -> iv_matrix2i {
        (self
            .iv_new_matrix2i
            .as_ref()
            .expect("Expected function, got error."))(a00, a01, a10, a11)
    }
    pub unsafe fn iv_new_matrix2f(&self, a00: f32, a01: f32, a10: f32, a11: f32) -> iv_matrix2f {
        (self
            .iv_new_matrix2f
            .as_ref()
            .expect("Expected function, got error."))(a00, a01, a10, a11)
    }
    pub unsafe fn iv_new_matrix2d(&self, a00: f64, a01: f64, a10: f64, a11: f64) -> iv_matrix2d {
        (self
            .iv_new_matrix2d
            .as_ref()
            .expect("Expected function, got error."))(a00, a01, a10, a11)
    }
    pub unsafe fn iv_new_complex2f(&self, real: f32, imaginary: f32) -> iv_complex2f {
        (self
            .iv_new_complex2f
            .as_ref()
            .expect("Expected function, got error."))(real, imaginary)
    }
    pub unsafe fn iv_new_complex2d(&self, real: f64, imaginary: f64) -> iv_complex2d {
        (self
            .iv_new_complex2d
            .as_ref()
            .expect("Expected function, got error."))(real, imaginary)
    }
    #[doc = " @brief iv_new_identity_matrix2{i,f,d}\n creates matrix:\n | 1, 0 |\n | 0, 1 |\n @return identity matrix"]
    pub unsafe fn iv_new_identity_matrix2i(&self) -> iv_matrix2i {
        (self
            .iv_new_identity_matrix2i
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_new_identity_matrix2f(&self) -> iv_matrix2f {
        (self
            .iv_new_identity_matrix2f
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_new_identity_matrix2d(&self) -> iv_matrix2d {
        (self
            .iv_new_identity_matrix2d
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iRect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> irect {
        (self.iRect.as_ref().expect("Expected function, got error."))(x, y, w, h, flags)
    }
    pub unsafe fn iv_new_rect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> iv_rect {
        (self
            .iv_new_rect
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, flags)
    }
    pub unsafe fn iv_empty_rect(&self) -> iv_rect {
        (self
            .iv_empty_rect
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ScreenWidth(&self) -> ::std::os::raw::c_int {
        (self
            .ScreenWidth
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ScreenHeight(&self) -> ::std::os::raw::c_int {
        (self
            .ScreenHeight
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetOrientation(&self, n: ::std::os::raw::c_int) {
        (self
            .SetOrientation
            .as_ref()
            .expect("Expected function, got error."))(n)
    }
    pub unsafe fn GetOrientation(&self) -> ::std::os::raw::c_int {
        (self
            .GetOrientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetGlobalOrientation(&self, n: ::std::os::raw::c_int) {
        (self
            .SetGlobalOrientation
            .as_ref()
            .expect("Expected function, got error."))(n)
    }
    pub unsafe fn GetGlobalOrientation(&self) -> ::std::os::raw::c_int {
        (self
            .GetGlobalOrientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn QueryGSensor(&self) -> ::std::os::raw::c_int {
        (self
            .QueryGSensor
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetGSensor(&self, mode: ::std::os::raw::c_int) {
        (self
            .SetGSensor
            .as_ref()
            .expect("Expected function, got error."))(mode)
    }
    pub unsafe fn ReadGSensor(
        &self,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        z: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .ReadGSensor
            .as_ref()
            .expect("Expected function, got error."))(x, y, z)
    }
    pub unsafe fn CalibrateGSensor(&self) {
        (self
            .CalibrateGSensor
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetGSensorEnabled(&self, onOff: bool) -> ::std::os::raw::c_int {
        (self
            .SetGSensorEnabled
            .as_ref()
            .expect("Expected function, got error."))(onOff)
    }
    pub unsafe fn IsGSensorEnabled(&self) -> bool {
        (self
            .IsGSensorEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetGSensorOrientation(&self) -> ::std::os::raw::c_int {
        (self
            .GetGSensorOrientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief SetActualGSensorOrientation - save last GSensor orientation\n @param orient - 0, 1, 2, 3, if -1 - save as 0"]
    pub unsafe fn SetActualGSensorOrientation(&self, orient: ::std::os::raw::c_int) {
        (self
            .SetActualGSensorOrientation
            .as_ref()
            .expect("Expected function, got error."))(orient)
    }
    pub unsafe fn GetActualGSensorOrientation(&self) -> ::std::os::raw::c_int {
        (self
            .GetActualGSensorOrientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetDefaultOrientation(&self, orient: ::std::os::raw::c_int) {
        (self
            .SetDefaultOrientation
            .as_ref()
            .expect("Expected function, got error."))(orient)
    }
    pub unsafe fn GetDefaultOrientation(&self) -> ::std::os::raw::c_int {
        (self
            .GetDefaultOrientation
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief CheckAndSetUpSideDownOrientation\n @param orient: -1 - depend on default orientation\n @return\n      0  - nothing changed\n      1  - orientation changed\n      -1 - not support, if (default_orientation_type == ORIENTATION_TYPE_SELF)"]
    pub unsafe fn CheckAndSetUpSideDownOrientation(
        &self,
        orient: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .CheckAndSetUpSideDownOrientation
            .as_ref()
            .expect("Expected function, got error."))(orient)
    }
    pub unsafe fn IsDeviceSupportUpSideDown(&self) -> ::std::os::raw::c_int {
        (self
            .IsDeviceSupportUpSideDown
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ClearScreen(&self) {
        (self
            .ClearScreen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetClip(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .SetClip
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn SetClipRect(&self, rect: *const irect) {
        (self
            .SetClipRect
            .as_ref()
            .expect("Expected function, got error."))(rect)
    }
    pub unsafe fn GetClip(
        &self,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) {
        (self
            .GetClip
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn GetClipRect(&self) -> irect {
        (self
            .GetClipRect
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn MergeClipRect(&self, rect: *const irect) -> irect {
        (self
            .MergeClipRect
            .as_ref()
            .expect("Expected function, got error."))(rect)
    }
    pub unsafe fn DrawPixel(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawPixel
            .as_ref()
            .expect("Expected function, got error."))(x, y, color)
    }
    pub unsafe fn DrawLine(
        &self,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawLine
            .as_ref()
            .expect("Expected function, got error."))(x1, y1, x2, y2, color)
    }
    pub unsafe fn DrawLineEx(
        &self,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
    ) {
        (self
            .DrawLineEx
            .as_ref()
            .expect("Expected function, got error."))(x1, y1, x2, y2, color, step)
    }
    pub unsafe fn DrawDashLine(
        &self,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        fill: ::std::os::raw::c_uint,
        space: ::std::os::raw::c_uint,
    ) {
        (self
            .DrawDashLine
            .as_ref()
            .expect("Expected function, got error."))(x1, y1, x2, y2, color, fill, space)
    }
    pub unsafe fn DrawRect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawRect
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, color)
    }
    pub unsafe fn DrawRectRound(
        &self,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) {
        (self
            .DrawRectRound
            .as_ref()
            .expect("Expected function, got error."))(arg1, arg2, arg3, arg4, arg5, arg6)
    }
    pub unsafe fn TriangleExternalRect(
        &self,
        v: *const iv_vector2i,
        flags: ::std::os::raw::c_int,
    ) -> irect {
        (self
            .TriangleExternalRect
            .as_ref()
            .expect("Expected function, got error."))(v, flags)
    }
    pub unsafe fn FillTriangularArea(
        &self,
        v: *const iv_vector2i,
        color: ::std::os::raw::c_int,
        externalRectFlags: ::std::os::raw::c_int,
    ) -> irect {
        (self
            .FillTriangularArea
            .as_ref()
            .expect("Expected function, got error."))(v, color, externalRectFlags)
    }
    pub unsafe fn FillArea(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .FillArea
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, color)
    }
    pub unsafe fn FillAreaRect(&self, rect: *const irect, color: ::std::os::raw::c_int) {
        (self
            .FillAreaRect
            .as_ref()
            .expect("Expected function, got error."))(rect, color)
    }
    pub unsafe fn InvertArea(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .InvertArea
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn InvertAreaBW(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .InvertAreaBW
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn ColorMapCreate(&self, size: ::std::os::raw::c_int) -> *mut icolor_map {
        (self
            .ColorMapCreate
            .as_ref()
            .expect("Expected function, got error."))(size)
    }
    pub unsafe fn ColorMapDestroy(&self, map: *mut *mut icolor_map) {
        (self
            .ColorMapDestroy
            .as_ref()
            .expect("Expected function, got error."))(map)
    }
    pub unsafe fn InvertAreaMap(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        map: *mut icolor_map,
    ) {
        (self
            .InvertAreaMap
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, map)
    }
    pub unsafe fn DimArea(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DimArea
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, color)
    }
    pub unsafe fn DrawSelection(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawSelection
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, color)
    }
    pub unsafe fn DrawCircle(
        &self,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawCircle
            .as_ref()
            .expect("Expected function, got error."))(x0, y0, radius, color)
    }
    pub unsafe fn DrawHorizontalSeparator(
        &self,
        x0: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) {
        (self
            .DrawHorizontalSeparator
            .as_ref()
            .expect("Expected function, got error."))(x0, y, w, type_)
    }
    #[doc = " @brief DrawCircleQuarter - draw smooth circle (background is considered white)\n @param x0 - x coordinate of center\n @param y0 - y coordinate of center\n @param radius - outer radius ( so if width > 0 then inner radius is radius - width + 1)\n @param direction - part of circle to draw\n @param thickness - circle line width\n @param color - circle color\n @param bg_color - background color (use with flag ROUND_FILL_OUTSIDE_BG)"]
    pub unsafe fn DrawCircleQuarter(
        &self,
        x0: ::std::os::raw::c_int,
        y0: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
        thickness: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        bg_color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawCircleQuarter
            .as_ref()
            .expect("Expected function, got error."))(
            x0, y0, radius, direction, thickness, color, bg_color,
        )
    }
    #[doc = " @brief GetDefaultFrameCertifiedThickness\n @param thickness - negative value - certified default thickness\n @return certified thickness according \"edef_thickness\""]
    pub unsafe fn GetDefaultFrameCertifiedThickness(
        &self,
        thickness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetDefaultFrameCertifiedThickness
            .as_ref()
            .expect("Expected function, got error."))(thickness)
    }
    #[doc = " @brief getDefaultFrameCertifiedRadius\n @param thickness - using line thickness for line (-1 - use certified default thickness)\n @return certified radius according \"thickness\""]
    pub unsafe fn GetDefaultFrameCertifiedRadius(
        &self,
        thickness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetDefaultFrameCertifiedRadius
            .as_ref()
            .expect("Expected function, got error."))(thickness)
    }
    #[doc = " @brief DrawFrameCertified - draw rect (x, y, w, h) with round corners\n call DrawFrameCertifiedEx(x, y, w, h, thickness, SIDE_ALL, ROUND_DEFAULT, RADIUS_DEPEND_ON_THICKNESS, BLACK, WHITE);"]
    pub unsafe fn DrawFrameCertified(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        thickness: ::std::os::raw::c_int,
    ) {
        (self
            .DrawFrameCertified
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, thickness)
    }
    #[doc = " @brief DrawFrameRectCertified - draw rect (x, y, w, h) with round corners\n call DrawFrameCertified(x, y, w, h, thickness);"]
    pub unsafe fn DrawFrameRectCertified(&self, rect: irect, thickness: ::std::os::raw::c_int) {
        (self
            .DrawFrameRectCertified
            .as_ref()
            .expect("Expected function, got error."))(rect, thickness)
    }
    #[doc = " @brief DrawFrameCertified - draw rect straight lines on \"sides\" in rect(x, y, w, h) and with round corners in \"direction\"\n @param x, y, w, h - rect margins\n @param thickness - line thickness\n @param sides - draw straight line sides\n @param direction - round corners\n @param radius - round radius of corners (RADIUS_DEPEND_ON_THICKNESS - default value, negative value depend on THICKNESS_DEF_*)\n @param color - line color\n @param bg_color - background color (use with flag ROUND_FILL_OUTSIDE_BG)"]
    pub unsafe fn DrawFrameCertifiedEx(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        thickness: ::std::os::raw::c_int,
        sides: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        bg_color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawFrameCertifiedEx
            .as_ref()
            .expect("Expected function, got error."))(
            x, y, w, h, thickness, sides, direction, radius, color, bg_color,
        )
    }
    #[doc = " @brief DrawFrameRectCertified - draw rect straight lines on \"sides\" in rect(x, y, w, h) and with round corners in \"direction\"\n @param rect - rect margins\n @param thickness - line thickness\n @param sides - draw straight line sides\n @param direction - round corners\n @param radius - round radius of corners (RADIUS_DEPEND_ON_THICKNESS - default value, negative value depend on THICKNESS_DEF_*)\n @param color - line color\n @param bg_color - background color (use with flag ROUND_FILL_OUTSIDE_BG)"]
    pub unsafe fn DrawFrameRectCertifiedEx(
        &self,
        rect: irect,
        thickness: ::std::os::raw::c_int,
        sides: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        bg_color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawFrameRectCertifiedEx
            .as_ref()
            .expect("Expected function, got error."))(
            rect, thickness, sides, direction, radius, color, bg_color,
        )
    }
    #[doc = " @brief processCircle - call cb for each circle line once (order of lines is not specified).\n    cb is (*)(void* context, int x_from, int y, int x_to, int re, int is_first)\n    x_from, x_to - left and right edge of circle in line y\n @param center_x, center_y - center of circle\n @param radius - radius\n @param context - context to pass to cb"]
    pub unsafe fn processCircle(
        &self,
        center_x: ::std::os::raw::c_int,
        center_y: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        context: *mut ::std::os::raw::c_void,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
                arg3: ::std::os::raw::c_int,
                arg4: ::std::os::raw::c_int,
                arg5: ::std::os::raw::c_int,
                arg6: ::std::os::raw::c_int,
            ),
        >,
    ) {
        (self
            .processCircle
            .as_ref()
            .expect("Expected function, got error."))(
            center_x, center_y, radius, context, cb
        )
    }
    pub unsafe fn invertCircle(
        &self,
        center_x: ::std::os::raw::c_int,
        center_y: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        canvas: *mut icanvas,
    ) {
        (self
            .invertCircle
            .as_ref()
            .expect("Expected function, got error."))(center_x, center_y, radius, canvas)
    }
    pub unsafe fn DrawPickOut(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_char,
    ) {
        (self
            .DrawPickOut
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, key)
    }
    pub unsafe fn DrawPickOutEx(&self, rect: *const irect, key: *const ::std::os::raw::c_char) {
        (self
            .DrawPickOutEx
            .as_ref()
            .expect("Expected function, got error."))(rect, key)
    }
    pub unsafe fn DitherArea(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        levels: ::std::os::raw::c_int,
        method: ::std::os::raw::c_int,
    ) {
        (self
            .DitherArea
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, levels, method)
    }
    pub unsafe fn DitherAreaQuick2Level(
        &self,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        dw: ::std::os::raw::c_int,
        dh: ::std::os::raw::c_int,
    ) {
        (self
            .DitherAreaQuick2Level
            .as_ref()
            .expect("Expected function, got error."))(dx, dy, dw, dh)
    }
    pub unsafe fn DitherAreaPattern2Level(
        &self,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        dw: ::std::os::raw::c_int,
        dh: ::std::os::raw::c_int,
    ) {
        (self
            .DitherAreaPattern2Level
            .as_ref()
            .expect("Expected function, got error."))(dx, dy, dw, dh)
    }
    pub unsafe fn MakeBW(&self, btmp: *mut iv_bitmap_ref, rect: iv_rect) {
        (self.MakeBW.as_ref().expect("Expected function, got error."))(btmp, rect)
    }
    pub unsafe fn QuickFloyd16Dither(
        &self,
        buffer: *mut ::std::os::raw::c_uchar,
        row_size: ::std::os::raw::c_int,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        (self
            .QuickFloyd16Dither
            .as_ref()
            .expect("Expected function, got error."))(
            buffer, row_size, left, top, width, height
        )
    }
    pub unsafe fn Stretch(
        &self,
        src: *const ::std::os::raw::c_uchar,
        format: ::std::os::raw::c_int,
        sw: ::std::os::raw::c_int,
        sh: ::std::os::raw::c_int,
        scanline: ::std::os::raw::c_int,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        dw: ::std::os::raw::c_int,
        dh: ::std::os::raw::c_int,
        rotate: ::std::os::raw::c_int,
    ) {
        (self
            .Stretch
            .as_ref()
            .expect("Expected function, got error."))(
            src, format, sw, sh, scanline, dx, dy, dw, dh, rotate,
        )
    }
    pub unsafe fn StretchArea(
        &self,
        src: *const ::std::os::raw::c_uchar,
        format: ::std::os::raw::c_int,
        sx: ::std::os::raw::c_int,
        sy: ::std::os::raw::c_int,
        sw: ::std::os::raw::c_int,
        sh: ::std::os::raw::c_int,
        scanline: ::std::os::raw::c_int,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        dw: ::std::os::raw::c_int,
        dh: ::std::os::raw::c_int,
        rotate: ::std::os::raw::c_int,
    ) {
        (self
            .StretchArea
            .as_ref()
            .expect("Expected function, got error."))(
            src, format, sx, sy, sw, sh, scanline, dx, dy, dw, dh, rotate,
        )
    }
    pub unsafe fn StretchAreaBW(
        &self,
        src: *const ::std::os::raw::c_uchar,
        format: ::std::os::raw::c_int,
        sx: ::std::os::raw::c_int,
        sy: ::std::os::raw::c_int,
        sw: ::std::os::raw::c_int,
        sh: ::std::os::raw::c_int,
        scanline: ::std::os::raw::c_int,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        dw: ::std::os::raw::c_int,
        dh: ::std::os::raw::c_int,
    ) {
        (self
            .StretchAreaBW
            .as_ref()
            .expect("Expected function, got error."))(
            src, format, sx, sy, sw, sh, scanline, dx, dy, dw, dh,
        )
    }
    pub unsafe fn SetCanvas(&self, c: *mut icanvas) {
        (self
            .SetCanvas
            .as_ref()
            .expect("Expected function, got error."))(c)
    }
    pub unsafe fn GetCanvas(&self) -> *mut icanvas {
        (self
            .GetCanvas
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn Repaint(&self) {
        (self
            .Repaint
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DrawFrame(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        icon: *mut ibitmap,
        title: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        clientarea: *mut irect,
    ) {
        (self
            .DrawFrame
            .as_ref()
            .expect("Expected function, got error."))(
            x, y, w, h, icon, title, flags, clientarea
        )
    }
    pub unsafe fn DrawFrameDialog(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        icon: *mut ibitmap,
        title: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        clientarea: *mut irect,
    ) {
        (self
            .DrawFrameDialog
            .as_ref()
            .expect("Expected function, got error."))(
            x, y, w, h, icon, title, flags, clientarea
        )
    }
    pub unsafe fn CheckFramePointer(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        ptx: ::std::os::raw::c_int,
        pty: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .CheckFramePointer
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, flags, ptx, pty)
    }
    pub unsafe fn DrawBorder(
        &self,
        border_rect: *const irect,
        border_size: ::std::os::raw::c_int,
        style: ::std::os::raw::c_int,
        radius: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawBorder
            .as_ref()
            .expect("Expected function, got error."))(
            border_rect,
            border_size,
            style,
            radius,
            color,
        )
    }
    pub unsafe fn DrawPager(&self, pager: *mut ipager) {
        (self
            .DrawPager
            .as_ref()
            .expect("Expected function, got error."))(pager)
    }
    pub unsafe fn GetPagerRect(&self, pager: *mut ipager) -> irect {
        (self
            .GetPagerRect
            .as_ref()
            .expect("Expected function, got error."))(pager)
    }
    pub unsafe fn GetPagerHeight(&self, pager: *mut ipager) -> ::std::os::raw::c_int {
        (self
            .GetPagerHeight
            .as_ref()
            .expect("Expected function, got error."))(pager)
    }
    pub unsafe fn IsPagerEvent(
        &self,
        pager: *mut ipager,
        type_: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .IsPagerEvent
            .as_ref()
            .expect("Expected function, got error."))(pager, type_, x, y)
    }
    pub unsafe fn PagerHandler(
        &self,
        pager: *mut ipager,
        type_: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .PagerHandler
            .as_ref()
            .expect("Expected function, got error."))(pager, type_, x, y)
    }
    #[doc = " Draw diagonal hatch in area. step should be positive and (step - 1) is horizontal distance in pixels between hatches\n (e.g. step 1 means no distance)\n IMPORTANT! this function works incorrectly and actually uses width = w + 1"]
    pub unsafe fn DrawDiagonalHatch(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    ) {
        (self
            .DrawDiagonalHatch
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, step, color)
    }
    pub unsafe fn DrawDiagonalHatchLimits(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
        limit: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    ) {
        (self
            .DrawDiagonalHatchLimits
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, step, color, limit)
    }
    #[doc = " Tranparent specified rect"]
    pub unsafe fn Transparent(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        percent: ::std::os::raw::c_int,
    ) {
        (self
            .Transparent
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, percent)
    }
    pub unsafe fn TransparentRect(&self, rect: irect, percent: ::std::os::raw::c_int) {
        (self
            .TransparentRect
            .as_ref()
            .expect("Expected function, got error."))(rect, percent)
    }
    #[doc = " @brief TransparentGradientData, TransparentGradient, TransparentGradientRect - Draw gradient transparent\n @param x\n @param y\n @param w\n @param h\n @param direction - gradient direction"]
    pub unsafe fn TransparentGradientData(
        &self,
        data: *mut ::std::os::raw::c_uchar,
        depth: ::std::os::raw::c_int,
        scanline: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
    ) {
        (self
            .TransparentGradientData
            .as_ref()
            .expect("Expected function, got error."))(
            data, depth, scanline, x, y, w, h, direction
        )
    }
    pub unsafe fn TransparentGradient(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        direction: ::std::os::raw::c_int,
    ) {
        (self
            .TransparentGradient
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, direction)
    }
    pub unsafe fn TransparentGradientRect(&self, rect: irect, direction: ::std::os::raw::c_int) {
        (self
            .TransparentGradientRect
            .as_ref()
            .expect("Expected function, got error."))(rect, direction)
    }
    pub unsafe fn LoadBitmap(&self, filename: *const ::std::os::raw::c_char) -> *mut ibitmap {
        (self
            .LoadBitmap
            .as_ref()
            .expect("Expected function, got error."))(filename)
    }
    pub unsafe fn zLoadBitmap(
        &self,
        zf: *mut ::std::os::raw::c_void,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut ibitmap {
        (self
            .zLoadBitmap
            .as_ref()
            .expect("Expected function, got error."))(zf, filename)
    }
    pub unsafe fn SaveBitmap(
        &self,
        filename: *const ::std::os::raw::c_char,
        bm: *const ibitmap,
    ) -> ::std::os::raw::c_int {
        (self
            .SaveBitmap
            .as_ref()
            .expect("Expected function, got error."))(filename, bm)
    }
    pub unsafe fn BitmapFromCanvas(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rotate: ::std::os::raw::c_int,
        canvas: *mut icanvas,
    ) -> *mut ibitmap {
        (self
            .BitmapFromCanvas
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, rotate, canvas)
    }
    pub unsafe fn BitmapFromScreen(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .BitmapFromScreen
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn BitmapFromScreenR(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rotate: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .BitmapFromScreenR
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, rotate)
    }
    pub unsafe fn NewBitmap(
        &self,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .NewBitmap
            .as_ref()
            .expect("Expected function, got error."))(w, h)
    }
    pub unsafe fn SetLoadImageFlags(&self, flags: ::std::os::raw::c_int) {
        (self
            .SetLoadImageFlags
            .as_ref()
            .expect("Expected function, got error."))(flags)
    }
    pub unsafe fn LoadJPEG(
        &self,
        path: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        br: ::std::os::raw::c_int,
        co: ::std::os::raw::c_int,
        proportional: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .LoadJPEG
            .as_ref()
            .expect("Expected function, got error."))(path, w, h, br, co, proportional)
    }
    pub unsafe fn LoadTIFF(
        &self,
        path: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        br: ::std::os::raw::c_int,
        co: ::std::os::raw::c_int,
        proportional: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .LoadTIFF
            .as_ref()
            .expect("Expected function, got error."))(path, w, h, br, co, proportional)
    }
    pub unsafe fn SaveJPEG(
        &self,
        path: *const ::std::os::raw::c_char,
        bmp: *mut ibitmap,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SaveJPEG
            .as_ref()
            .expect("Expected function, got error."))(path, bmp, quality)
    }
    pub unsafe fn LoadPNG(
        &self,
        path: *const ::std::os::raw::c_char,
        dither: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .LoadPNG
            .as_ref()
            .expect("Expected function, got error."))(path, dither)
    }
    pub unsafe fn LoadPNGStretch(
        &self,
        path: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        proportional: ::std::os::raw::c_int,
        dither: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .LoadPNGStretch
            .as_ref()
            .expect("Expected function, got error."))(
            path, width, height, proportional, dither
        )
    }
    pub unsafe fn GetImageType(&self, path: *const ::std::os::raw::c_char) -> ImageSignatureType {
        (self
            .GetImageType
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn LoadImageToFormat(
        &self,
        path: *const ::std::os::raw::c_char,
        format: PixelFormat,
    ) -> *mut ibitmap {
        (self
            .LoadImageToFormat
            .as_ref()
            .expect("Expected function, got error."))(path, format)
    }
    pub unsafe fn LoadGIFToFormat(
        &self,
        path: *const ::std::os::raw::c_char,
        format: PixelFormat,
    ) -> *mut ibitmap {
        (self
            .LoadGIFToFormat
            .as_ref()
            .expect("Expected function, got error."))(path, format)
    }
    pub unsafe fn LoadPNGToFormat(
        &self,
        path: *const ::std::os::raw::c_char,
        format: PixelFormat,
    ) -> *mut ibitmap {
        (self
            .LoadPNGToFormat
            .as_ref()
            .expect("Expected function, got error."))(path, format)
    }
    pub unsafe fn LoadJPEGToFormat(
        &self,
        path: *const ::std::os::raw::c_char,
        format: PixelFormat,
    ) -> *mut ibitmap {
        (self
            .LoadJPEGToFormat
            .as_ref()
            .expect("Expected function, got error."))(path, format)
    }
    pub unsafe fn LoadTiffToFormat(
        &self,
        path: *const ::std::os::raw::c_char,
        format: PixelFormat,
    ) -> *mut ibitmap {
        (self
            .LoadTiffToFormat
            .as_ref()
            .expect("Expected function, got error."))(path, format)
    }
    pub unsafe fn NewBitmapWithFormat(
        &self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        format: PixelFormat,
    ) -> *mut ibitmap {
        (self
            .NewBitmapWithFormat
            .as_ref()
            .expect("Expected function, got error."))(width, height, format)
    }
    pub unsafe fn LoadPNG8(&self, path: *const ::std::os::raw::c_char) -> *mut ibitmap {
        (self
            .LoadPNG8
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn LoadJPEG8(&self, path: *const ::std::os::raw::c_char) -> *mut ibitmap {
        (self
            .LoadJPEG8
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn NewBitmap8(
        &self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .NewBitmap8
            .as_ref()
            .expect("Expected function, got error."))(width, height)
    }
    pub unsafe fn NewBitmap24(
        &self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .NewBitmap24
            .as_ref()
            .expect("Expected function, got error."))(width, height)
    }
    pub unsafe fn SavePNG(
        &self,
        path: *const ::std::os::raw::c_char,
        bmp: *const ibitmap,
    ) -> ::std::os::raw::c_int {
        (self
            .SavePNG
            .as_ref()
            .expect("Expected function, got error."))(path, bmp)
    }
    pub unsafe fn SetTransparentColor(&self, bmp: *mut *mut ibitmap, color: ::std::os::raw::c_int) {
        (self
            .SetTransparentColor
            .as_ref()
            .expect("Expected function, got error."))(bmp, color)
    }
    pub unsafe fn CopyBitmapDepth4To8(&self, bmp: *const ibitmap) -> *mut ibitmap {
        (self
            .CopyBitmapDepth4To8
            .as_ref()
            .expect("Expected function, got error."))(bmp)
    }
    pub unsafe fn CopyBitmapDepth8To4(&self, bmp: *const ibitmap) -> *mut ibitmap {
        (self
            .CopyBitmapDepth8To4
            .as_ref()
            .expect("Expected function, got error."))(bmp)
    }
    pub unsafe fn CopyBitmapDepth24To8(&self, bmp: *const ibitmap) -> *mut ibitmap {
        (self
            .CopyBitmapDepth24To8
            .as_ref()
            .expect("Expected function, got error."))(bmp)
    }
    pub unsafe fn MoveBitmap(&self, bmp: *mut ibitmap, offset: ::std::os::raw::c_int) {
        (self
            .MoveBitmap
            .as_ref()
            .expect("Expected function, got error."))(bmp, offset)
    }
    pub unsafe fn MoveBitmapRight(&self, bm: *mut ibitmap, offset: ::std::os::raw::c_int) {
        (self
            .MoveBitmapRight
            .as_ref()
            .expect("Expected function, got error."))(bm, offset)
    }
    pub unsafe fn FindAverageBitmapColor(
        &self,
        bmp: *const ibitmap,
        side: ::std::os::raw::c_int,
        percent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .FindAverageBitmapColor
            .as_ref()
            .expect("Expected function, got error."))(bmp, side, percent)
    }
    pub unsafe fn ApplyContrastToBitmap8(
        &self,
        bmp: *mut ibitmap,
        contrast: ::std::os::raw::c_int,
    ) {
        (self
            .ApplyContrastToBitmap8
            .as_ref()
            .expect("Expected function, got error."))(bmp, contrast)
    }
    #[doc = " @brief BitmapStretchCopy function copies a part of an other bitmap to the newly created bitmap\n @param bmp source image\n @param sx, @param sy, @param sw, @param sh are coordinates of source image part to be copied\n @param width and @param height are size of the new bitmap\n @return a pointer of the new bitmap"]
    pub unsafe fn BitmapStretchCopy(
        &self,
        bmp: *const ibitmap,
        sx: ::std::os::raw::c_int,
        sy: ::std::os::raw::c_int,
        sw: ::std::os::raw::c_int,
        sh: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .BitmapStretchCopy
            .as_ref()
            .expect("Expected function, got error."))(bmp, sx, sy, sw, sh, width, height)
    }
    pub unsafe fn BitmapStretchProportionally(
        &self,
        bmp: *const ibitmap,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .BitmapStretchProportionally
            .as_ref()
            .expect("Expected function, got error."))(bmp, width, height)
    }
    pub unsafe fn BitmapStretchFill(
        &self,
        bmp: *const ibitmap,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .BitmapStretchFill
            .as_ref()
            .expect("Expected function, got error."))(bmp, width, height)
    }
    #[doc = " @brief adjustBitmapDefault make default ajustment of bitmap with adjustBitmapWithSaturationBrightnessAndDithering\n @param bmp - bitmap to make adjustment"]
    pub unsafe fn adjustBitmapDefault(&self, bmp: *mut ibitmap) {
        (self
            .adjustBitmapDefault
            .as_ref()
            .expect("Expected function, got error."))(bmp)
    }
    #[doc = " @brief adjustBitmapWithSaturationBrightnessAndDithering - change saturation and value of bitmap pixels (as in HVS color representation)\n        and optionally apply ordered dithering\n @param bmp - bitmap to adjust\n @param saturation_table - table with 256 elements each element - what substitute corresponding saturation with.\n @param value_table - same as saturation table but fur value\n @param dithering - apply dithering or not."]
    pub unsafe fn adjustBitmapWithSaturationBrightnessAndDithering(
        &self,
        bmp: *mut ibitmap,
        saturation_table: *mut ::std::os::raw::c_int,
        value_table: *mut ::std::os::raw::c_int,
        dithering: bool,
    ) {
        (self
            .adjustBitmapWithSaturationBrightnessAndDithering
            .as_ref()
            .expect("Expected function, got error."))(
            bmp, saturation_table, value_table, dithering
        )
    }
    pub unsafe fn adjustAreaWithSaturationBrightnessAndDithering(
        &self,
        data: *mut ::std::os::raw::c_uchar,
        scanline: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        saturation_table: *mut ::std::os::raw::c_int,
        value_table: *mut ::std::os::raw::c_int,
        dithering: bool,
    ) {
        (self
            .adjustAreaWithSaturationBrightnessAndDithering
            .as_ref()
            .expect("Expected function, got error."))(
            data,
            scanline,
            width,
            height,
            saturation_table,
            value_table,
            dithering,
        )
    }
    pub unsafe fn adjustAreaWithLabColorsSaturation(
        &self,
        data: *mut ::std::os::raw::c_uchar,
        scanline: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        koef: f64,
    ) {
        (self
            .adjustAreaWithLabColorsSaturation
            .as_ref()
            .expect("Expected function, got error."))(data, scanline, width, height, koef)
    }
    pub unsafe fn adjustAreaWithVibrance(
        &self,
        data: *mut ::std::os::raw::c_uchar,
        scanline: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        vibrance: f32,
    ) {
        (self
            .adjustAreaWithVibrance
            .as_ref()
            .expect("Expected function, got error."))(
            data, scanline, width, height, vibrance
        )
    }
    pub unsafe fn adjustAreaDefault(
        &self,
        data: *mut ::std::os::raw::c_uchar,
        scanline: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) {
        (self
            .adjustAreaDefault
            .as_ref()
            .expect("Expected function, got error."))(data, scanline, width, height)
    }
    pub unsafe fn ditherAndAdjustArea(
        &self,
        data: *mut ::std::os::raw::c_uchar,
        scanline: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        params: *mut AdjustmentParams,
    ) {
        (self
            .ditherAndAdjustArea
            .as_ref()
            .expect("Expected function, got error."))(data, scanline, width, height, params)
    }
    pub unsafe fn adjustAreaWithBrightnessContrastGamma(
        &self,
        data: *mut ::std::os::raw::c_uchar,
        scanline: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        brightness: f64,
        contrast: f64,
        gamma: f64,
    ) {
        (self
            .adjustAreaWithBrightnessContrastGamma
            .as_ref()
            .expect("Expected function, got error."))(
            data, scanline, width, height, brightness, contrast, gamma,
        )
    }
    pub unsafe fn getBrightnessContrastGammaAdjustParams(
        &self,
        brightness: *mut ::std::os::raw::c_int,
        contrast: *mut ::std::os::raw::c_int,
        gamma: *mut ::std::os::raw::c_int,
    ) {
        (self
            .getBrightnessContrastGammaAdjustParams
            .as_ref()
            .expect("Expected function, got error."))(brightness, contrast, gamma)
    }
    pub unsafe fn bm_stretch8(
        &self,
        in_: *mut ::std::os::raw::c_uchar,
        ix: ::std::os::raw::c_int,
        iy: ::std::os::raw::c_int,
        iw: ::std::os::raw::c_int,
        ih: ::std::os::raw::c_int,
        ilw: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        ox: ::std::os::raw::c_int,
        oy: ::std::os::raw::c_int,
        ow: ::std::os::raw::c_int,
        oh: ::std::os::raw::c_int,
        olw: ::std::os::raw::c_int,
    ) {
        (self
            .bm_stretch8
            .as_ref()
            .expect("Expected function, got error."))(
            in_, ix, iy, iw, ih, ilw, out, ox, oy, ow, oh, olw,
        )
    }
    pub unsafe fn DrawBitmap(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        b: *const ibitmap,
    ) {
        (self
            .DrawBitmap
            .as_ref()
            .expect("Expected function, got error."))(x, y, b)
    }
    pub unsafe fn DrawBitmapArea(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        b: *const ibitmap,
        bx: ::std::os::raw::c_int,
        by: ::std::os::raw::c_int,
        bw: ::std::os::raw::c_int,
        bh: ::std::os::raw::c_int,
    ) {
        (self
            .DrawBitmapArea
            .as_ref()
            .expect("Expected function, got error."))(x, y, b, bx, by, bw, bh)
    }
    pub unsafe fn DrawBitmapRect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        b: *const ibitmap,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .DrawBitmapRect
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, b, flags)
    }
    pub unsafe fn DrawBitmapRect2(&self, rect: *const irect, b: *const ibitmap) {
        (self
            .DrawBitmapRect2
            .as_ref()
            .expect("Expected function, got error."))(rect, b)
    }
    pub unsafe fn StretchBitmap(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        src: *const ibitmap,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .StretchBitmap
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, src, flags)
    }
    pub unsafe fn TileBitmap(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        src: *const ibitmap,
    ) {
        (self
            .TileBitmap
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, src)
    }
    pub unsafe fn CopyBitmap(&self, bm: *const ibitmap) -> *mut ibitmap {
        (self
            .CopyBitmap
            .as_ref()
            .expect("Expected function, got error."))(bm)
    }
    pub unsafe fn MirrorBitmap(&self, bm: *mut ibitmap, m: ::std::os::raw::c_int) {
        (self
            .MirrorBitmap
            .as_ref()
            .expect("Expected function, got error."))(bm, m)
    }
    pub unsafe fn iv_inv_bitmap(&self, bitmap: *mut ibitmap) {
        (self
            .iv_inv_bitmap
            .as_ref()
            .expect("Expected function, got error."))(bitmap)
    }
    pub unsafe fn iv_copy_inv_bitmap(&self, bitmap: *const ibitmap) -> *mut ibitmap {
        (self
            .iv_copy_inv_bitmap
            .as_ref()
            .expect("Expected function, got error."))(bitmap)
    }
    pub unsafe fn EnumFonts(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumFonts
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumFontsFromDirectory(
        &self,
        directory1: *const ::std::os::raw::c_char,
        directory2: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumFontsFromDirectory
            .as_ref()
            .expect("Expected function, got error."))(directory1, directory2)
    }
    pub unsafe fn EnumFontsEx(&self) -> *mut FontForSort {
        (self
            .EnumFontsEx
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumFontsFromDirectoryEx(
        &self,
        directory1: *const ::std::os::raw::c_char,
        directory2: *const ::std::os::raw::c_char,
    ) -> *mut FontForSort {
        (self
            .EnumFontsFromDirectoryEx
            .as_ref()
            .expect("Expected function, got error."))(directory1, directory2)
    }
    pub unsafe fn FreeFontsForSort(&self, fonts: *mut FontForSort) {
        (self
            .FreeFontsForSort
            .as_ref()
            .expect("Expected function, got error."))(fonts)
    }
    pub unsafe fn OpenFont(
        &self,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        aa: ::std::os::raw::c_int,
    ) -> *mut ifont {
        (self
            .OpenFont
            .as_ref()
            .expect("Expected function, got error."))(name, size, aa)
    }
    pub unsafe fn OpenFontEx(
        &self,
        name: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        line_height: ::std::os::raw::c_int,
        aa: ::std::os::raw::c_int,
    ) -> *mut ifont {
        (self
            .OpenFontEx
            .as_ref()
            .expect("Expected function, got error."))(name, size, line_height, aa)
    }
    pub unsafe fn CloseFont(&self, f: *mut ifont) {
        (self
            .CloseFont
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn SetFont(&self, font: *const ifont, color: ::std::os::raw::c_int) {
        (self
            .SetFont
            .as_ref()
            .expect("Expected function, got error."))(font, color)
    }
    pub unsafe fn GetFont(&self) -> *const ifont {
        (self
            .GetFont
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DrawString(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
    ) {
        (self
            .DrawString
            .as_ref()
            .expect("Expected function, got error."))(x, y, s)
    }
    pub unsafe fn DrawStringR(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
    ) {
        (self
            .DrawStringR
            .as_ref()
            .expect("Expected function, got error."))(x, y, s)
    }
    pub unsafe fn TextRectHeight(
        &self,
        width: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .TextRectHeight
            .as_ref()
            .expect("Expected function, got error."))(width, s, flags)
    }
    pub unsafe fn TextRectHeightEx(
        &self,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .TextRectHeightEx
            .as_ref()
            .expect("Expected function, got error."))(width, height, s, flags)
    }
    pub unsafe fn MinimalTextRectWidth(
        &self,
        w: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .MinimalTextRectWidth
            .as_ref()
            .expect("Expected function, got error."))(w, s)
    }
    pub unsafe fn DrawTextRect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .DrawTextRect
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, s, flags)
    }
    pub unsafe fn DrawTextRect2(
        &self,
        rect: *const irect,
        s: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .DrawTextRect2
            .as_ref()
            .expect("Expected function, got error."))(rect, s)
    }
    pub unsafe fn DrawTextRect3(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        s: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .DrawTextRect3
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, s, flags, height)
    }
    pub unsafe fn CharWidth(&self, c: ::std::os::raw::c_ushort) -> ::std::os::raw::c_int {
        (self
            .CharWidth
            .as_ref()
            .expect("Expected function, got error."))(c)
    }
    pub unsafe fn StringWidthExt(
        &self,
        s: *const ::std::os::raw::c_char,
        l: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .StringWidthExt
            .as_ref()
            .expect("Expected function, got error."))(s, l)
    }
    pub unsafe fn StringWidth(&self, s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .StringWidth
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn GetMultilineStringWidth(
        &self,
        str_: *const ::std::os::raw::c_char,
        area_width: ::std::os::raw::c_int,
        font: *mut ifont,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetMultilineStringWidth
            .as_ref()
            .expect("Expected function, got error."))(str_, area_width, font, flags)
    }
    pub unsafe fn DrawSymbol(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        symbol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawSymbol
            .as_ref()
            .expect("Expected function, got error."))(x, y, symbol)
    }
    pub unsafe fn RegisterFontList(&self, fontlist: *mut *mut ifont, count: ::std::os::raw::c_int) {
        (self
            .RegisterFontList
            .as_ref()
            .expect("Expected function, got error."))(fontlist, count)
    }
    pub unsafe fn SetTextStrength(&self, n: ::std::os::raw::c_int) {
        (self
            .SetTextStrength
            .as_ref()
            .expect("Expected function, got error."))(n)
    }
    pub unsafe fn FullUpdate(&self) {
        (self
            .FullUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FullUpdateHQ(&self) {
        (self
            .FullUpdateHQ
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SoftUpdate(&self) {
        (self
            .SoftUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SoftUpdateHQ(&self) {
        (self
            .SoftUpdateHQ
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PartialUpdate(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdate
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn PartialUpdateBlack(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdateBlack
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn PartialUpdateBW(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdateBW
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn PartialUpdateHQ(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdateHQ
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn PartialUpdateDU4(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .PartialUpdateDU4
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn DynamicUpdate(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .DynamicUpdate
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn DynamicUpdateWithoutImprovingLinesColor(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .DynamicUpdateWithoutImprovingLinesColor
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn DynamicUpdateBW(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .DynamicUpdateBW
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn iv_empty_update_area(&self) -> iv_update_area {
        (self
            .iv_empty_update_area
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_new_update_area(
        &self,
        rect: irect,
        prev_rect: irect,
        need_update: bool,
    ) -> iv_update_area {
        (self
            .iv_new_update_area
            .as_ref()
            .expect("Expected function, got error."))(rect, prev_rect, need_update)
    }
    pub unsafe fn iv_new_ptr_update_area(
        &self,
        rect: irect,
        prev_rect: irect,
        need_update: *mut bool,
    ) -> iv_update_area {
        (self
            .iv_new_ptr_update_area
            .as_ref()
            .expect("Expected function, got error."))(rect, prev_rect, need_update)
    }
    pub unsafe fn iv_update_screen(
        &self,
        update_area: iv_update_area,
        partial_update: ::std::option::Option<
            unsafe extern "C" fn(
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
            ),
        >,
    ) {
        (self
            .iv_update_screen
            .as_ref()
            .expect("Expected function, got error."))(update_area, partial_update)
    }
    pub unsafe fn iv_update_many(
        &self,
        update_area: *mut iv_update_area,
        count: usize,
        partial_update: ::std::option::Option<
            unsafe extern "C" fn(
                x: ::std::os::raw::c_int,
                y: ::std::os::raw::c_int,
                w: ::std::os::raw::c_int,
                h: ::std::os::raw::c_int,
            ),
        >,
    ) {
        (self
            .iv_update_many
            .as_ref()
            .expect("Expected function, got error."))(update_area, count, partial_update)
    }
    #[doc = " Fast update of the screen area. This function call is asyncronous (return before update finished).\n It takes some time (hardware dependent, for 622 it is 125 ms) to actually update screen and calling any screen update function\n during this time for the intersected screen area may lead to artefacts on resulting image.\n TODO clarify is it neccesary to call dithering before the call?"]
    pub unsafe fn DynamicUpdateA2(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .DynamicUpdateA2
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h)
    }
    pub unsafe fn ExitUpdateA2(&self) {
        (self
            .ExitUpdateA2
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsInA2Update(&self) -> ::std::os::raw::c_int {
        (self
            .IsInA2Update
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FineUpdate(&self) {
        (self
            .FineUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FineUpdateSupported(&self) -> ::std::os::raw::c_int {
        (self
            .FineUpdateSupported
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn HQUpdateSupported(&self) -> ::std::os::raw::c_int {
        (self
            .HQUpdateSupported
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ScheduleUpdate(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        bw: ::std::os::raw::c_int,
    ) {
        (self
            .ScheduleUpdate
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, bw)
    }
    pub unsafe fn WaitForUpdateComplete(&self) {
        (self
            .WaitForUpdateComplete
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetWaveformTimes(&self, result: *mut ::std::os::raw::c_ushort) {
        (self
            .GetWaveformTimes
            .as_ref()
            .expect("Expected function, got error."))(result)
    }
    pub unsafe fn SetEventHandler(&self, hproc: iv_handler) -> iv_handler {
        (self
            .SetEventHandler
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn SetEventHandlerEx(&self, hproc: iv_handler) -> iv_handler {
        (self
            .SetEventHandlerEx
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn GetEventHandler(&self) -> iv_handler {
        (self
            .GetEventHandler
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SendEvent(
        &self,
        hproc: iv_handler,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) {
        (self
            .SendEvent
            .as_ref()
            .expect("Expected function, got error."))(hproc, type_, par1, par2)
    }
    pub unsafe fn SendEventEx(
        &self,
        hproc: iv_handler,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) {
        (self
            .SendEventEx
            .as_ref()
            .expect("Expected function, got error."))(hproc, type_, par1, par2, data)
    }
    pub unsafe fn GetCurrentEventExData(&self) -> *mut ::std::os::raw::c_void {
        (self
            .GetCurrentEventExData
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ProcessEventLoop(&self) {
        (self
            .ProcessEventLoop
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ProcessEventLoopQuick(&self) {
        (self
            .ProcessEventLoopQuick
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FlushEvents(&self) {
        (self
            .FlushEvents
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_evttype(&self, type_: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        (self
            .iv_evttype
            .as_ref()
            .expect("Expected function, got error."))(type_)
    }
    pub unsafe fn IsAnyEvents(&self) -> ::std::os::raw::c_char {
        (self
            .IsAnyEvents
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PrepareForLoop(&self, hproc: iv_handler) {
        (self
            .PrepareForLoop
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn PrepareForLoopEx(&self, ctx: *mut ::std::os::raw::c_void, hproc: iv_ctx_handler) {
        (self
            .PrepareForLoopEx
            .as_ref()
            .expect("Expected function, got error."))(ctx, hproc)
    }
    pub unsafe fn IsEventLoopBlocked(&self) -> ::std::os::raw::c_int {
        (self
            .IsEventLoopBlocked
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetEventLoopBlockIntervalMicroseconds(&self) -> ::std::os::raw::c_int {
        (self
            .GetEventLoopBlockIntervalMicroseconds
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetEventsNotifier(&self, func: iv_eventsnotifierfunc) {
        (self
            .SetEventsNotifier
            .as_ref()
            .expect("Expected function, got error."))(func)
    }
    pub unsafe fn ClearOnExit(&self) {
        (self
            .ClearOnExit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetHardTimer(
        &self,
        name: *const ::std::os::raw::c_char,
        tproc: iv_timerproc,
        ms: ::std::os::raw::c_int,
    ) {
        (self
            .SetHardTimer
            .as_ref()
            .expect("Expected function, got error."))(name, tproc, ms)
    }
    pub unsafe fn SetHardTimerEx(
        &self,
        name: *const ::std::os::raw::c_char,
        tproc: iv_timerprocEx,
        context: *mut ::std::os::raw::c_void,
        ms: ::std::os::raw::c_int,
    ) {
        (self
            .SetHardTimerEx
            .as_ref()
            .expect("Expected function, got error."))(name, tproc, context, ms)
    }
    pub unsafe fn SetWeakTimer(
        &self,
        name: *const ::std::os::raw::c_char,
        tproc: iv_timerproc,
        ms: ::std::os::raw::c_int,
    ) {
        (self
            .SetWeakTimer
            .as_ref()
            .expect("Expected function, got error."))(name, tproc, ms)
    }
    pub unsafe fn SetWeakTimerEx(
        &self,
        name: *const ::std::os::raw::c_char,
        tp: iv_timerprocEx,
        context: *mut ::std::os::raw::c_void,
        ms: ::std::os::raw::c_int,
    ) {
        (self
            .SetWeakTimerEx
            .as_ref()
            .expect("Expected function, got error."))(name, tp, context, ms)
    }
    pub unsafe fn QueryTimer(&self, tp: iv_timerproc) -> ::std::os::raw::c_longlong {
        (self
            .QueryTimer
            .as_ref()
            .expect("Expected function, got error."))(tp)
    }
    pub unsafe fn QueryTimerEx(
        &self,
        tp: iv_timerprocEx,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_longlong {
        (self
            .QueryTimerEx
            .as_ref()
            .expect("Expected function, got error."))(tp, context)
    }
    pub unsafe fn ClearTimer(&self, tproc: iv_timerproc) {
        (self
            .ClearTimer
            .as_ref()
            .expect("Expected function, got error."))(tproc)
    }
    pub unsafe fn ClearTimerEx(&self, tproc: iv_timerprocEx, context: *mut ::std::os::raw::c_void) {
        (self
            .ClearTimerEx
            .as_ref()
            .expect("Expected function, got error."))(tproc, context)
    }
    pub unsafe fn ClearTimerByName(&self, name: *const ::std::os::raw::c_char) {
        (self
            .ClearTimerByName
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn OpenMenu(
        &self,
        menu: *mut imenu,
        pos: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        hproc: iv_menuhandler,
    ) {
        (self
            .OpenMenu
            .as_ref()
            .expect("Expected function, got error."))(menu, pos, x, y, hproc)
    }
    pub unsafe fn OpenMenuEx(
        &self,
        menu: *mut imenuex,
        pos: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        hproc: iv_menuhandler,
    ) {
        (self
            .OpenMenuEx
            .as_ref()
            .expect("Expected function, got error."))(menu, pos, x, y, hproc)
    }
    pub unsafe fn UpdateMenuEx(&self, menu: *mut imenuex) {
        (self
            .UpdateMenuEx
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn OpenContextMenu(&self, menu: *const icontext_menu) {
        (self
            .OpenContextMenu
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn SetContextMenu(&self, menu: *const icontext_menu) {
        (self
            .SetContextMenu
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn CreateContextMenu(
        &self,
        id: *const ::std::os::raw::c_char,
    ) -> *mut icontext_menu {
        (self
            .CreateContextMenu
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn CloseContextMenu(&self, menu: *mut icontext_menu) {
        (self
            .CloseContextMenu
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn OpenMenu3x3(
        &self,
        mbitmap: *const ibitmap,
        strings: *mut *const ::std::os::raw::c_char,
        hproc: iv_menuhandler,
    ) {
        (self
            .OpenMenu3x3
            .as_ref()
            .expect("Expected function, got error."))(mbitmap, strings, hproc)
    }
    pub unsafe fn GetMenuRect(&self, menu: *const imenu) -> irect {
        (self
            .GetMenuRect
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn GetMenuRectEx(&self, menu: *const imenuex) -> irect {
        (self
            .GetMenuRectEx
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn OpenList(
        &self,
        title: *const ::std::os::raw::c_char,
        background: *const ibitmap,
        itemw: ::std::os::raw::c_int,
        itemh: ::std::os::raw::c_int,
        itemcount: ::std::os::raw::c_int,
        cpos: ::std::os::raw::c_int,
        hproc: iv_listhandler,
    ) {
        (self
            .OpenList
            .as_ref()
            .expect("Expected function, got error."))(
            title, background, itemw, itemh, itemcount, cpos, hproc,
        )
    }
    pub unsafe fn SetListHeaderLevel(&self, level: ::std::os::raw::c_int) {
        (self
            .SetListHeaderLevel
            .as_ref()
            .expect("Expected function, got error."))(level)
    }
    pub unsafe fn GetListHeaderLevel(&self) -> ::std::os::raw::c_int {
        (self
            .GetListHeaderLevel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenDummyList(
        &self,
        title: *const ::std::os::raw::c_char,
        background: *const ibitmap,
        text: *mut ::std::os::raw::c_char,
        hproc: iv_listhandler,
    ) {
        (self
            .OpenDummyList
            .as_ref()
            .expect("Expected function, got error."))(title, background, text, hproc)
    }
    pub unsafe fn EnumKeyboards(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumKeyboards
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LoadKeyboard(&self, kbdlang: *const ::std::os::raw::c_char) {
        (self
            .LoadKeyboard
            .as_ref()
            .expect("Expected function, got error."))(kbdlang)
    }
    #[doc = " @brief GetKeyboardFlags is thread safe in device environment\n @return flags with wich keyboard was opened"]
    pub unsafe fn GetKeyboardFlags(&self) -> ::std::os::raw::c_int {
        (self
            .GetKeyboardFlags
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenKeyboard(
        &self,
        title: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        hproc: iv_keyboardhandler,
    ) {
        (self
            .OpenKeyboard
            .as_ref()
            .expect("Expected function, got error."))(title, buffer, maxlen, flags, hproc)
    }
    pub unsafe fn OpenKeyboardEx(
        &self,
        title: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        hproc: iv_keyboardhandlerex,
        cb_data: *mut ::std::os::raw::c_void,
    ) {
        (self
            .OpenKeyboardEx
            .as_ref()
            .expect("Expected function, got error."))(
            title, buffer, maxlen, flags, hproc, cb_data
        )
    }
    pub unsafe fn returnFocusToKeyboard(&self) {
        (self
            .returnFocusToKeyboard
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn KeyboardProcessTextChanges(
        &self,
        text_before: *const ::std::os::raw::c_char,
        text_after: *const ::std::os::raw::c_char,
    ) {
        (self
            .KeyboardProcessTextChanges
            .as_ref()
            .expect("Expected function, got error."))(text_before, text_after)
    }
    pub unsafe fn KeyboardNotifyTextChanges(
        &self,
        text_before: *const ::std::os::raw::c_char,
        text_after: *const ::std::os::raw::c_char,
    ) {
        (self
            .KeyboardNotifyTextChanges
            .as_ref()
            .expect("Expected function, got error."))(text_before, text_after)
    }
    pub unsafe fn setKeyboardTextChangeCallback(
        &self,
        cb: keyboard_text_change_callback,
        context: *mut ::std::os::raw::c_void,
    ) {
        (self
            .setKeyboardTextChangeCallback
            .as_ref()
            .expect("Expected function, got error."))(cb, context)
    }
    pub unsafe fn DrawKeyboard(&self) {
        (self
            .DrawKeyboard
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenCustomKeyboard(
        &self,
        filename: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        hproc: iv_keyboardhandler,
    ) {
        (self
            .OpenCustomKeyboard
            .as_ref()
            .expect("Expected function, got error."))(
            filename, title, buffer, maxlen, flags, hproc
        )
    }
    pub unsafe fn CloseKeyboard(&self) {
        (self
            .CloseKeyboard
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetKeyboardRect(&self, rect: *mut irect) {
        (self
            .GetKeyboardRect
            .as_ref()
            .expect("Expected function, got error."))(rect)
    }
    pub unsafe fn GetKeyboardRectWithParams(
        &self,
        title: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> irect {
        (self
            .GetKeyboardRectWithParams
            .as_ref()
            .expect("Expected function, got error."))(title, buffer, flags)
    }
    pub unsafe fn IsKeyboardOpened(&self) -> ::std::os::raw::c_int {
        (self
            .IsKeyboardOpened
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn setDrawTopLine(&self, kbd_draw_top_line_: ::std::os::raw::c_int) {
        (self
            .setDrawTopLine
            .as_ref()
            .expect("Expected function, got error."))(kbd_draw_top_line_)
    }
    pub unsafe fn OpenPageSelector(&self, hproc: iv_pageselecthandler) {
        (self
            .OpenPageSelector
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn OpenTimeEdit(
        &self,
        title: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        intime: ::std::os::raw::c_long,
        hproc: iv_timeedithandler,
    ) {
        (self
            .OpenTimeEdit
            .as_ref()
            .expect("Expected function, got error."))(title, x, y, intime, hproc)
    }
    pub unsafe fn OpenFontSelector(
        &self,
        title: *const ::std::os::raw::c_char,
        font: *const ::std::os::raw::c_char,
        with_size: ::std::os::raw::c_int,
        hproc: iv_fontselecthandler,
    ) {
        (self
            .OpenFontSelector
            .as_ref()
            .expect("Expected function, got error."))(title, font, with_size, hproc)
    }
    pub unsafe fn OpenFontSelectorEx(&self, menu: *const ifont_menu) {
        (self
            .OpenFontSelectorEx
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn GetFontMenuStruct(&self) -> ifont_menu {
        (self
            .GetFontMenuStruct
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ClearFontMenuStruct(&self, menu: *mut ifont_menu) {
        (self
            .ClearFontMenuStruct
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn ClearFontListStruct(&self, list: *mut ifont_list) {
        (self
            .ClearFontListStruct
            .as_ref()
            .expect("Expected function, got error."))(list)
    }
    pub unsafe fn SetFontMenuStruct(&self, menu: *mut ifont_menu) {
        (self
            .SetFontMenuStruct
            .as_ref()
            .expect("Expected function, got error."))(menu)
    }
    pub unsafe fn OpenBookmarks(
        &self,
        page: ::std::os::raw::c_int,
        position: ::std::os::raw::c_longlong,
        bmklist: *mut ::std::os::raw::c_int,
        poslist: *mut ::std::os::raw::c_longlong,
        bmkcount: *mut ::std::os::raw::c_int,
        maxbmks: ::std::os::raw::c_int,
        hproc: iv_bmkhandler,
    ) {
        (self
            .OpenBookmarks
            .as_ref()
            .expect("Expected function, got error."))(
            page, position, bmklist, poslist, bmkcount, maxbmks, hproc,
        )
    }
    pub unsafe fn SwitchBookmark(
        &self,
        page: ::std::os::raw::c_int,
        position: ::std::os::raw::c_longlong,
        bmklist: *mut ::std::os::raw::c_int,
        poslist: *mut ::std::os::raw::c_longlong,
        bmkcount: *mut ::std::os::raw::c_int,
        maxbmks: ::std::os::raw::c_int,
        hproc: iv_bmkhandler,
    ) {
        (self
            .SwitchBookmark
            .as_ref()
            .expect("Expected function, got error."))(
            page, position, bmklist, poslist, bmkcount, maxbmks, hproc,
        )
    }
    pub unsafe fn OpenRotateBox(&self, hproc: iv_rotatehandler) {
        (self
            .OpenRotateBox
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn Message(
        &self,
        icon: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        timeout: ::std::os::raw::c_int,
    ) {
        (self
            .Message
            .as_ref()
            .expect("Expected function, got error."))(icon, title, text, timeout)
    }
    pub unsafe fn Dialog(
        &self,
        icon: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        button1: *const ::std::os::raw::c_char,
        button2: *const ::std::os::raw::c_char,
        hproc: iv_dialoghandler,
    ) {
        (self.Dialog.as_ref().expect("Expected function, got error."))(
            icon, title, text, button1, button2, hproc,
        )
    }
    pub unsafe fn Dialog3(
        &self,
        icon: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        button1: *const ::std::os::raw::c_char,
        button2: *const ::std::os::raw::c_char,
        button3: *const ::std::os::raw::c_char,
        hproc: iv_dialoghandler,
    ) {
        (self
            .Dialog3
            .as_ref()
            .expect("Expected function, got error."))(
            icon, title, text, button1, button2, button3, hproc,
        )
    }
    pub unsafe fn DialogSynchro(
        &self,
        icon: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        button1: *const ::std::os::raw::c_char,
        button2: *const ::std::os::raw::c_char,
        button3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .DialogSynchro
            .as_ref()
            .expect("Expected function, got error."))(
            icon, title, text, button1, button2, button3
        )
    }
    pub unsafe fn CloseDialog(&self) {
        (self
            .CloseDialog
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenProgressbar(
        &self,
        icon: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
        hproc: iv_dialoghandler,
    ) {
        (self
            .OpenProgressbar
            .as_ref()
            .expect("Expected function, got error."))(icon, title, text, percent, hproc)
    }
    pub unsafe fn UpdateProgressbar(
        &self,
        text: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .UpdateProgressbar
            .as_ref()
            .expect("Expected function, got error."))(text, percent)
    }
    pub unsafe fn CloseProgressbar(&self) {
        (self
            .CloseProgressbar
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ShowHourglassForce(&self) {
        (self
            .ShowHourglassForce
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ShowHourglass(&self) {
        (self
            .ShowHourglass
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ShowHourglassAt(&self, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) {
        (self
            .ShowHourglassAt
            .as_ref()
            .expect("Expected function, got error."))(x, y)
    }
    pub unsafe fn ShowHourglassForceAt(&self, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) {
        (self
            .ShowHourglassForceAt
            .as_ref()
            .expect("Expected function, got error."))(x, y)
    }
    pub unsafe fn ShowPureHourglass(&self) {
        (self
            .ShowPureHourglass
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ShowPureHourglassForce(&self) {
        (self
            .ShowPureHourglassForce
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn HideHourglass(&self) {
        (self
            .HideHourglass
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DisableExitHourglass(&self) {
        (self
            .DisableExitHourglass
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LockDevice(&self) {
        (self
            .LockDevice
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetManualPanelUpdates(
        &self,
        enable: ::std::os::raw::c_int,
        handler: iv_panelupdateshandler,
    ) {
        (self
            .SetManualPanelUpdates
            .as_ref()
            .expect("Expected function, got error."))(enable, handler)
    }
    pub unsafe fn SetReadingMode(
        &self,
        enable: ::std::os::raw::c_int,
        after_time: ::std::os::raw::c_int,
        update: ::std::os::raw::c_int,
    ) {
        (self
            .SetReadingMode
            .as_ref()
            .expect("Expected function, got error."))(enable, after_time, update)
    }
    #[doc = " Function changes panel working style\n @param type when is 0 panel is completely off, otherwise it is a set of PANEL_FLAGS\n @see enum PANEL_FLAGS"]
    pub unsafe fn SetPanelType(&self, type_: ::std::os::raw::c_int) {
        (self
            .SetPanelType
            .as_ref()
            .expect("Expected function, got error."))(type_)
    }
    pub unsafe fn GetPanelType(&self) -> ::std::os::raw::c_int {
        (self
            .GetPanelType
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IvAddPanelTypeChangeHandler(
        &self,
        ctx: *mut ::std::os::raw::c_void,
        handler: iv_panel_type_change_handler,
    ) -> iv_handler_descriptor {
        (self
            .IvAddPanelTypeChangeHandler
            .as_ref()
            .expect("Expected function, got error."))(ctx, handler)
    }
    pub unsafe fn IvRemovePanelTypeChangeHandler(&self, descriptor: iv_handler_descriptor) -> bool {
        (self
            .IvRemovePanelTypeChangeHandler
            .as_ref()
            .expect("Expected function, got error."))(descriptor)
    }
    pub unsafe fn SetFocusOnPanel(&self, focus: ::std::os::raw::c_int) {
        (self
            .SetFocusOnPanel
            .as_ref()
            .expect("Expected function, got error."))(focus)
    }
    pub unsafe fn IsPanelFocused(&self) -> ::std::os::raw::c_int {
        (self
            .IsPanelFocused
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief SetShowStatusBar is called to show enable/disable showing status bar in reader\n @param show takes 0 to disable status bar, othe value to enable"]
    pub unsafe fn SetShowPanelReader(&self, show: ::std::os::raw::c_int) {
        (self
            .SetShowPanelReader
            .as_ref()
            .expect("Expected function, got error."))(show)
    }
    pub unsafe fn IsShowPanelReader(&self) -> ::std::os::raw::c_int {
        (self
            .IsShowPanelReader
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetPanelSeparatorEnabled(
        &self,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SetPanelSeparatorEnabled
            .as_ref()
            .expect("Expected function, got error."))(enable)
    }
    pub unsafe fn IsPanelSeparatorEnabled(&self) -> ::std::os::raw::c_int {
        (self
            .IsPanelSeparatorEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn InitPanel(&self) {
        (self
            .InitPanel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetPanelKeyForFullScreenEnabled(&self, key: *const ::std::os::raw::c_char) {
        (self
            .SetPanelKeyForFullScreenEnabled
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn SetPanelTransparent(&self, value: ::std::os::raw::c_int) {
        (self
            .SetPanelTransparent
            .as_ref()
            .expect("Expected function, got error."))(value)
    }
    pub unsafe fn SetShowPanelCenterIcon(&self, show: ::std::os::raw::c_int) {
        (self
            .SetShowPanelCenterIcon
            .as_ref()
            .expect("Expected function, got error."))(show)
    }
    #[doc = " @brief StartPanelProgress start gui animation on panel\n @param progress currently not used, but may be used in future, values between 0 - 100\n after @param timeoutMs will be automatically stoped, negative value meens animation will run always"]
    pub unsafe fn StartPanelProgress(
        &self,
        progress: ::std::os::raw::c_int,
        timeoutMs: ::std::os::raw::c_int,
    ) {
        (self
            .StartPanelProgress
            .as_ref()
            .expect("Expected function, got error."))(progress, timeoutMs)
    }
    #[doc = " @brief StopPanelProgress stops gui animation"]
    pub unsafe fn StopPanelProgress(&self) {
        (self
            .StopPanelProgress
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ShowPanelPackageProgress(
        &self,
        progress: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) {
        (self
            .ShowPanelPackageProgress
            .as_ref()
            .expect("Expected function, got error."))(progress, timeout)
    }
    pub unsafe fn DrawPanel(
        &self,
        icon: *const ibitmap,
        text: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel
            .as_ref()
            .expect("Expected function, got error."))(icon, text, title, percent)
    }
    pub unsafe fn DrawPanel2(
        &self,
        icon: *const ibitmap,
        text: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
        readingModeEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel2
            .as_ref()
            .expect("Expected function, got error."))(
            icon, text, title, percent, readingModeEnable
        )
    }
    pub unsafe fn DrawPanel3(
        &self,
        icon: *const ibitmap,
        currentPage: ::std::os::raw::c_int,
        totalPages: ::std::os::raw::c_int,
        readingModeEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel3
            .as_ref()
            .expect("Expected function, got error."))(
            icon,
            currentPage,
            totalPages,
            readingModeEnable,
        )
    }
    pub unsafe fn DrawPanel4(
        &self,
        icon: *const ibitmap,
        bookName: *const ::std::os::raw::c_char,
        currentPage: ::std::os::raw::c_int,
        totalPages: ::std::os::raw::c_int,
        readingModeEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel4
            .as_ref()
            .expect("Expected function, got error."))(
            icon,
            bookName,
            currentPage,
            totalPages,
            readingModeEnable,
        )
    }
    pub unsafe fn DrawPanel5(
        &self,
        icon: *const ibitmap,
        text: *const ::std::os::raw::c_char,
        title: *const ::std::os::raw::c_char,
        percent: ::std::os::raw::c_int,
        readingModeEnable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DrawPanel5
            .as_ref()
            .expect("Expected function, got error."))(
            icon, text, title, percent, readingModeEnable
        )
    }
    #[doc = " @brief OpenControlPanel calls control panel application\n @param ctx is parameter wich contains\n special panel configurations options"]
    pub unsafe fn OpenControlPanel(&self, ctx: *mut control_panel) {
        (self
            .OpenControlPanel
            .as_ref()
            .expect("Expected function, got error."))(ctx)
    }
    pub unsafe fn PanelHeight(&self) -> ::std::os::raw::c_int {
        (self
            .PanelHeight
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PanelHeightFBOffset(&self) -> ::std::os::raw::c_int {
        (self
            .PanelHeightFBOffset
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetKeyboardRate(&self, t1: ::std::os::raw::c_int, t2: ::std::os::raw::c_int) {
        (self
            .SetKeyboardRate
            .as_ref()
            .expect("Expected function, got error."))(t1, t2)
    }
    pub unsafe fn QuickNavigatorSupported(
        &self,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .QuickNavigatorSupported
            .as_ref()
            .expect("Expected function, got error."))(flags)
    }
    pub unsafe fn QuickNavigator(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .QuickNavigator
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, cx, cy, flags)
    }
    pub unsafe fn SetQuickNavigatorXY(&self, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) {
        (self
            .SetQuickNavigatorXY
            .as_ref()
            .expect("Expected function, got error."))(x, y)
    }
    pub unsafe fn DrawApplicationCaption(
        &self,
        caption: *const ::std::os::raw::c_char,
        title_rect: *const irect,
    ) {
        (self
            .DrawApplicationCaption
            .as_ref()
            .expect("Expected function, got error."))(caption, title_rect)
    }
    pub unsafe fn GetCaptionHeight(&self) -> ::std::os::raw::c_int {
        (self
            .GetCaptionHeight
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetApplicationCaptionHeight(&self, h: ::std::os::raw::c_int) {
        (self
            .SetApplicationCaptionHeight
            .as_ref()
            .expect("Expected function, got error."))(h)
    }
    pub unsafe fn LoadApplicationCaptionProperties(&self) -> *mut iapp_caption {
        (self
            .LoadApplicationCaptionProperties
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LoadTaskManagerProperties(&self) -> *mut itaskmgr {
        (self
            .LoadTaskManagerProperties
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LoadPagerProperties(&self) -> *mut ipager {
        (self
            .LoadPagerProperties
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LoadSelectionProperties(
        &self,
        key: *const ::std::os::raw::c_char,
    ) -> *mut iselection {
        (self
            .LoadSelectionProperties
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn LoadContextMenuProperties(&self) -> *mut icontext_menu_properties {
        (self
            .LoadContextMenuProperties
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetAppGlobalStyle(&self) -> AppStyles {
        (self
            .GetAppGlobalStyle
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetAppStyle(&self, key: *const ::std::os::raw::c_char) -> AppStyles {
        (self
            .GetAppStyle
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn GetAppStyleEx(&self, key: *const ::std::os::raw::c_char) -> *mut iappstyle {
        (self
            .GetAppStyleEx
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn GetFontSelectorProperties(&self) -> *mut font_selector_properties {
        (self
            .GetFontSelectorProperties
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetCustomFontString(&self) -> *const ::std::os::raw::c_char {
        (self
            .GetCustomFontString
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetGlobalConfig(&self) -> *mut iconfig {
        (self
            .GetGlobalConfig
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenConfig(
        &self,
        path: *const ::std::os::raw::c_char,
        ce: *mut iconfigedit,
    ) -> *mut iconfig {
        (self
            .OpenConfig
            .as_ref()
            .expect("Expected function, got error."))(path, ce)
    }
    pub unsafe fn RefreshConfig(&self, cfg: *mut *mut iconfig) -> ::std::os::raw::c_int {
        (self
            .RefreshConfig
            .as_ref()
            .expect("Expected function, got error."))(cfg)
    }
    pub unsafe fn SaveConfig(&self, cfg: *mut iconfig) -> ::std::os::raw::c_int {
        (self
            .SaveConfig
            .as_ref()
            .expect("Expected function, got error."))(cfg)
    }
    pub unsafe fn CloseConfig(&self, cfg: *mut iconfig) {
        (self
            .CloseConfig
            .as_ref()
            .expect("Expected function, got error."))(cfg)
    }
    pub unsafe fn CloseConfigNoSave(&self, cfg: *mut iconfig) {
        (self
            .CloseConfigNoSave
            .as_ref()
            .expect("Expected function, got error."))(cfg)
    }
    pub unsafe fn ReadInt(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        deflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .ReadInt
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, deflt)
    }
    pub unsafe fn ReadLongLong(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        deflt: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong {
        (self
            .ReadLongLong
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, deflt)
    }
    pub unsafe fn ReadString(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        deflt: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .ReadString
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, deflt)
    }
    pub unsafe fn ReadSecret(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        deflt: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .ReadSecret
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, deflt)
    }
    pub unsafe fn WriteInt(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) {
        (self
            .WriteInt
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, value)
    }
    pub unsafe fn WriteLongLong(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_longlong,
    ) {
        (self
            .WriteLongLong
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, value)
    }
    pub unsafe fn WriteString(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .WriteString
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, value)
    }
    pub unsafe fn WriteSecret(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .WriteSecret
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, value)
    }
    pub unsafe fn WriteIntVolatile(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    ) {
        (self
            .WriteIntVolatile
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, value)
    }
    pub unsafe fn WriteStringVolatile(
        &self,
        cfg: *mut iconfig,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .WriteStringVolatile
            .as_ref()
            .expect("Expected function, got error."))(cfg, name, value)
    }
    pub unsafe fn DeleteInt(&self, cfg: *mut iconfig, name: *const ::std::os::raw::c_char) {
        (self
            .DeleteInt
            .as_ref()
            .expect("Expected function, got error."))(cfg, name)
    }
    pub unsafe fn DeleteString(&self, cfg: *mut iconfig, name: *const ::std::os::raw::c_char) {
        (self
            .DeleteString
            .as_ref()
            .expect("Expected function, got error."))(cfg, name)
    }
    pub unsafe fn SetConfigEditorBackground(&self, bmp: *mut ibitmap) {
        (self
            .SetConfigEditorBackground
            .as_ref()
            .expect("Expected function, got error."))(bmp)
    }
    pub unsafe fn OpenConfigEditor(
        &self,
        header: *const ::std::os::raw::c_char,
        cfg: *mut iconfig,
        ce: *mut iconfigedit,
        hproc: iv_confighandler,
        cproc: iv_itemchangehandler,
    ) {
        (self
            .OpenConfigEditor
            .as_ref()
            .expect("Expected function, got error."))(header, cfg, ce, hproc, cproc)
    }
    pub unsafe fn OpenConfigSubmenuExt(
        &self,
        title: *const ::std::os::raw::c_char,
        ice: *mut iconfigedit,
        pos: ::std::os::raw::c_int,
    ) {
        (self
            .OpenConfigSubmenuExt
            .as_ref()
            .expect("Expected function, got error."))(title, ice, pos)
    }
    pub unsafe fn OpenConfigSubmenu(
        &self,
        title: *const ::std::os::raw::c_char,
        ice: *mut iconfigedit,
    ) {
        (self
            .OpenConfigSubmenu
            .as_ref()
            .expect("Expected function, got error."))(title, ice)
    }
    pub unsafe fn UpdateCurrentConfigPage(&self) {
        (self
            .UpdateCurrentConfigPage
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn UpdateConfigPage(
        &self,
        title: *const ::std::os::raw::c_char,
        ice: *mut iconfigedit,
    ) {
        (self
            .UpdateConfigPage
            .as_ref()
            .expect("Expected function, got error."))(title, ice)
    }
    pub unsafe fn CloseConfigLevel(&self) {
        (self
            .CloseConfigLevel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn NotifyConfigChanged(&self) {
        (self
            .NotifyConfigChanged
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ClearConfig(&self, cfg: *mut iconfig) {
        (self
            .ClearConfig
            .as_ref()
            .expect("Expected function, got error."))(cfg)
    }
    pub unsafe fn EnumerateConfig(
        &self,
        cfg: *mut iconfig,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                name: *mut ::std::os::raw::c_char,
                value: *mut ::std::os::raw::c_void,
                userdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) {
        (self
            .EnumerateConfig
            .as_ref()
            .expect("Expected function, got error."))(cfg, func, user_data)
    }
    #[doc = " @brief GetKeyMapping used to read TEXT key mapping from default config\n @param act0 and @param act1 are are arrays of CSTtring wich look like \"@KA_...\"\n FOR EXAMPLE act0[KEY_PREV] will contain an action wich should happen when user PRESSES IV_KEY_PREV,\n act1[KEY_PREV] will contain an action wich should happen when user HOLS IV_KEY_PREV,\n IMPORTANT !! pointers are not always valid, use strdup to handle it"]
    pub unsafe fn GetKeyMapping(
        &self,
        act0: *mut *const ::std::os::raw::c_char,
        act1: *mut *const ::std::os::raw::c_char,
    ) {
        (self
            .GetKeyMapping
            .as_ref()
            .expect("Expected function, got error."))(act0, act1)
    }
    #[doc = " @brief GetKeyMappingEx is similar to GetKeyMapping\n @param what may be KEYMAPPING_GLOBAL or KEYMAPPING_TXT or KEYMAPPING_PDF\n @param act0 @see GetKeyMapping\n @param act1 @see GetKeyMapping\n @param count contains key count, it is the size of act0 and act1 maximal size\n IMPORTANT !! pointers are not always valid, use strdup to handle it"]
    pub unsafe fn GetKeyMappingEx(
        &self,
        what: ::std::os::raw::c_int,
        act0: *mut *const ::std::os::raw::c_char,
        act1: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) {
        (self
            .GetKeyMappingEx
            .as_ref()
            .expect("Expected function, got error."))(what, act0, act1, count)
    }
    pub unsafe fn GetKeyMappingExtended(
        &self,
        type_: keymap_t,
        act0: *mut *const ::std::os::raw::c_char,
        act1: *mut *const ::std::os::raw::c_char,
        act2: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) {
        (self
            .GetKeyMappingExtended
            .as_ref()
            .expect("Expected function, got error."))(type_, act0, act1, act2, count)
    }
    pub unsafe fn AdjustDirectionKeys(&self, key: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .AdjustDirectionKeys
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn QueryDeviceButtons(&self) -> ::std::os::raw::c_ulong {
        (self
            .QueryDeviceButtons
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsJoystickButtonsPresent(&self) -> ::std::os::raw::c_int {
        (self
            .IsJoystickButtonsPresent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn MultitaskingSupported(&self) -> ::std::os::raw::c_int {
        (self
            .MultitaskingSupported
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn NewTask(
        &self,
        path: *const ::std::os::raw::c_char,
        args: *const *const ::std::os::raw::c_char,
        appname: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        icon: *const ibitmap,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .NewTask
            .as_ref()
            .expect("Expected function, got error."))(path, args, appname, name, icon, flags)
    }
    pub unsafe fn NewTaskEx(
        &self,
        path: *const ::std::os::raw::c_char,
        args: *const *mut ::std::os::raw::c_char,
        appname: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        icon: *const ibitmap,
        flags: ::std::os::raw::c_uint,
        run_as_reader_if_needed: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .NewTaskEx
            .as_ref()
            .expect("Expected function, got error."))(
            path,
            args,
            appname,
            name,
            icon,
            flags,
            run_as_reader_if_needed,
        )
    }
    #[doc = " @brief OpenTask runs child process or make active existing process of specified exe if exist\n @param path - path/to/exe\n @param argc - args ptr\n @param argv - args count\n @param flags - TASK_* macros\n @return 0 if created | 1 if already exist | -1 if fail"]
    pub unsafe fn OpenTask(
        &self,
        path: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .OpenTask
            .as_ref()
            .expect("Expected function, got error."))(path, argc, argv, flags)
    }
    pub unsafe fn NewSubtask(&self, name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .NewSubtask
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn SwitchSubtask(&self, subtask: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .SwitchSubtask
            .as_ref()
            .expect("Expected function, got error."))(subtask)
    }
    pub unsafe fn SubtaskFinished(&self, subtask: ::std::os::raw::c_int) {
        (self
            .SubtaskFinished
            .as_ref()
            .expect("Expected function, got error."))(subtask)
    }
    pub unsafe fn GetCurrentTask(&self) -> ::std::os::raw::c_int {
        (self
            .GetCurrentTask
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetActiveTask(
        &self,
        task: *mut ::std::os::raw::c_int,
        subtask: *mut ::std::os::raw::c_int,
    ) {
        (self
            .GetActiveTask
            .as_ref()
            .expect("Expected function, got error."))(task, subtask)
    }
    pub unsafe fn IsTaskActive(&self) -> ::std::os::raw::c_int {
        (self
            .IsTaskActive
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetPreviousTask(
        &self,
        task: *mut ::std::os::raw::c_int,
        subtask: *mut ::std::os::raw::c_int,
    ) {
        (self
            .GetPreviousTask
            .as_ref()
            .expect("Expected function, got error."))(task, subtask)
    }
    pub unsafe fn GetPreviousTaskInStack(
        &self,
        task: *mut ::std::os::raw::c_int,
        subtask: *mut ::std::os::raw::c_int,
    ) {
        (self
            .GetPreviousTaskInStack
            .as_ref()
            .expect("Expected function, got error."))(task, subtask)
    }
    pub unsafe fn GetTaskList(
        &self,
        list: *mut ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetTaskList
            .as_ref()
            .expect("Expected function, got error."))(list, size)
    }
    #[doc = " @brief GetTaskInfo\n @param task - gid\n @return taskinfo struct ptr (you don`t need to free it manualy)"]
    pub unsafe fn GetTaskInfo(&self, task: ::std::os::raw::c_int) -> *mut taskinfo {
        (self
            .GetTaskInfo
            .as_ref()
            .expect("Expected function, got error."))(task)
    }
    pub unsafe fn FindTaskByBook(
        &self,
        name: *const ::std::os::raw::c_char,
        task: *mut ::std::os::raw::c_int,
        subtask: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .FindTaskByBook
            .as_ref()
            .expect("Expected function, got error."))(name, task, subtask)
    }
    pub unsafe fn FindTaskByAppName(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .FindTaskByAppName
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    #[doc = " @brief SetTaskParameters - changes parameters of task\n @param task - task gid where to change params\n @param appname - new app name\n @param name - new title\n @param icon - new icon\n @param flags - new flags\n @return 1 if success otherwise 0"]
    pub unsafe fn SetTaskParameters(
        &self,
        task: ::std::os::raw::c_int,
        appname: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        icon: *mut ibitmap,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int {
        (self
            .SetTaskParameters
            .as_ref()
            .expect("Expected function, got error."))(task, appname, name, icon, flags)
    }
    pub unsafe fn SetSubtaskInfo(
        &self,
        task: ::std::os::raw::c_int,
        subtask: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        book: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .SetSubtaskInfo
            .as_ref()
            .expect("Expected function, got error."))(task, subtask, name, book)
    }
    #[doc = " @brief SetActiveTask\n @note You can do exit() immediately after this call because singal is completely sent after returning from the function\n @param task - gid\n @param subtask\n @return"]
    pub unsafe fn SetActiveTask(
        &self,
        task: ::std::os::raw::c_int,
        subtask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SetActiveTask
            .as_ref()
            .expect("Expected function, got error."))(task, subtask)
    }
    pub unsafe fn GoToBackground(&self) {
        (self
            .GoToBackground
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CloseTask(
        &self,
        task: ::std::os::raw::c_int,
        subtask: ::std::os::raw::c_int,
        force: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .CloseTask
            .as_ref()
            .expect("Expected function, got error."))(task, subtask, force)
    }
    pub unsafe fn SendEventTo(
        &self,
        task: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendEventTo
            .as_ref()
            .expect("Expected function, got error."))(task, type_, par1, par2)
    }
    pub unsafe fn SendEventSyncTo(
        &self,
        task: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        par1: ::std::os::raw::c_int,
        par2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendEventSyncTo
            .as_ref()
            .expect("Expected function, got error."))(task, type_, par1, par2)
    }
    pub unsafe fn SendMessageTo(
        &self,
        task: ::std::os::raw::c_int,
        request: ::std::os::raw::c_int,
        message: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendMessageTo
            .as_ref()
            .expect("Expected function, got error."))(task, request, message, len)
    }
    pub unsafe fn SetRequestListener(
        &self,
        request: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        hproc: iv_requestlistener,
    ) -> ::std::os::raw::c_int {
        (self
            .SetRequestListener
            .as_ref()
            .expect("Expected function, got error."))(request, flags, hproc)
    }
    pub unsafe fn SetRequestListenerEx(
        &self,
        request: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        ctx: *mut ::std::os::raw::c_void,
        hproc: iv_requestlistener_ex,
    ) -> iv_set_request_listener_ex_result {
        (self
            .SetRequestListenerEx
            .as_ref()
            .expect("Expected function, got error."))(request, flags, ctx, hproc)
    }
    pub unsafe fn SendRequest(
        &self,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendRequest
            .as_ref()
            .expect("Expected function, got error."))(request, data, inlen, outlen, timeout)
    }
    pub unsafe fn SendRequestNoWait(
        &self,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendRequestNoWait
            .as_ref()
            .expect("Expected function, got error."))(request, data, inlen, outlen)
    }
    pub unsafe fn SendRequestTo(
        &self,
        task: ::std::os::raw::c_int,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendRequestTo
            .as_ref()
            .expect("Expected function, got error."))(
            task, request, data, inlen, outlen, timeout
        )
    }
    pub unsafe fn SendRequestToNoWait(
        &self,
        task: ::std::os::raw::c_int,
        request: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SendRequestToNoWait
            .as_ref()
            .expect("Expected function, got error."))(task, request, data, inlen, outlen)
    }
    pub unsafe fn SendGlobalRequest(&self, param: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .SendGlobalRequest
            .as_ref()
            .expect("Expected function, got error."))(param)
    }
    pub unsafe fn SetMessageHandler(&self, hproc: iv_msghandler) {
        (self
            .SetMessageHandler
            .as_ref()
            .expect("Expected function, got error."))(hproc)
    }
    pub unsafe fn OpenTaskList(&self) {
        (self
            .OpenTaskList
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetTaskFramebuffer(&self, task: ::std::os::raw::c_int) -> *mut icanvas {
        (self
            .GetTaskFramebuffer
            .as_ref()
            .expect("Expected function, got error."))(task)
    }
    pub unsafe fn GetTaskFramebufferInfo(&self, task: ::std::os::raw::c_int) -> *mut iv_fbinfo {
        (self
            .GetTaskFramebufferInfo
            .as_ref()
            .expect("Expected function, got error."))(task)
    }
    pub unsafe fn ReleaseTaskFramebuffer(&self, fb: *mut icanvas) {
        (self
            .ReleaseTaskFramebuffer
            .as_ref()
            .expect("Expected function, got error."))(fb)
    }
    pub unsafe fn iv_wait_task_activation(&self, timeout: ::std::os::raw::c_int) {
        (self
            .iv_wait_task_activation
            .as_ref()
            .expect("Expected function, got error."))(timeout)
    }
    pub unsafe fn CopyActiveFb(&self) {
        (self
            .CopyActiveFb
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CopyTaskFb(&self, task: ::std::os::raw::c_int) {
        (self
            .CopyTaskFb
            .as_ref()
            .expect("Expected function, got error."))(task)
    }
    pub unsafe fn GetFrontlightVersion(&self) -> ::std::os::raw::c_int {
        (self
            .GetFrontlightVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetFrontlightState(&self) -> ::std::os::raw::c_int {
        (self
            .GetFrontlightState
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetFrontlightState(&self, flstate: ::std::os::raw::c_int) {
        (self
            .SetFrontlightState
            .as_ref()
            .expect("Expected function, got error."))(flstate)
    }
    pub unsafe fn GetFrontlightEnabled(&self) -> ::std::os::raw::c_int {
        (self
            .GetFrontlightEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetFrontlightEnabled(&self, enabled: ::std::os::raw::c_int) {
        (self
            .SetFrontlightEnabled
            .as_ref()
            .expect("Expected function, got error."))(enabled)
    }
    pub unsafe fn SetFrontlightStateEx(
        &self,
        flstate: ::std::os::raw::c_int,
        temporary: ::std::os::raw::c_int,
    ) {
        (self
            .SetFrontlightStateEx
            .as_ref()
            .expect("Expected function, got error."))(flstate, temporary)
    }
    pub unsafe fn OpenFrontLightConfig(&self) {
        (self
            .OpenFrontLightConfig
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SwitchFrontlightState(&self) {
        (self
            .SwitchFrontlightState
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetFrontlightColor(&self) -> ::std::os::raw::c_int {
        (self
            .GetFrontlightColor
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetFrontlightColor(&self, color: ::std::os::raw::c_int) {
        (self
            .SetFrontlightColor
            .as_ref()
            .expect("Expected function, got error."))(color)
    }
    pub unsafe fn hash_new(&self, prime: ::std::os::raw::c_int) -> *mut ihash {
        (self
            .hash_new
            .as_ref()
            .expect("Expected function, got error."))(prime)
    }
    pub unsafe fn hash_add(
        &self,
        h: *mut ihash,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) {
        (self
            .hash_add
            .as_ref()
            .expect("Expected function, got error."))(h, name, value)
    }
    pub unsafe fn hash_delete(&self, h: *mut ihash, name: *const ::std::os::raw::c_char) {
        (self
            .hash_delete
            .as_ref()
            .expect("Expected function, got error."))(h, name)
    }
    pub unsafe fn hash_find(
        &self,
        h: *mut ihash,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .hash_find
            .as_ref()
            .expect("Expected function, got error."))(h, name)
    }
    pub unsafe fn vhash_new(
        &self,
        prime: ::std::os::raw::c_int,
        addproc: iv_hashaddproc,
        delproc: iv_hashdelproc,
    ) -> *mut ihash {
        (self
            .vhash_new
            .as_ref()
            .expect("Expected function, got error."))(prime, addproc, delproc)
    }
    pub unsafe fn vhash_add(
        &self,
        h: *mut ihash,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
    ) {
        (self
            .vhash_add
            .as_ref()
            .expect("Expected function, got error."))(h, name, value)
    }
    pub unsafe fn vhash_delete(&self, h: *mut ihash, name: *const ::std::os::raw::c_char) {
        (self
            .vhash_delete
            .as_ref()
            .expect("Expected function, got error."))(h, name)
    }
    pub unsafe fn vhash_find(
        &self,
        h: *mut ihash,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_void {
        (self
            .vhash_find
            .as_ref()
            .expect("Expected function, got error."))(h, name)
    }
    pub unsafe fn hash_clear(&self, h: *mut ihash) {
        (self
            .hash_clear
            .as_ref()
            .expect("Expected function, got error."))(h)
    }
    pub unsafe fn hash_destroy(&self, h: *mut ihash) {
        (self
            .hash_destroy
            .as_ref()
            .expect("Expected function, got error."))(h)
    }
    pub unsafe fn hash_count(&self, h: *mut ihash) -> ::std::os::raw::c_int {
        (self
            .hash_count
            .as_ref()
            .expect("Expected function, got error."))(h)
    }
    pub unsafe fn hash_enumerate(
        &self,
        h: *mut ihash,
        cmpproc: iv_hashcmpproc,
        enumproc: iv_hashenumproc,
        userdata: *mut ::std::os::raw::c_void,
    ) {
        (self
            .hash_enumerate
            .as_ref()
            .expect("Expected function, got error."))(h, cmpproc, enumproc, userdata)
    }
    pub unsafe fn hash_merge(
        &self,
        base_hash: *mut ihash,
        hash_to_merge: *mut ihash,
    ) -> *mut ihash {
        (self
            .hash_merge
            .as_ref()
            .expect("Expected function, got error."))(base_hash, hash_to_merge)
    }
    pub unsafe fn hash_merge_to(
        &self,
        base_hash: *mut ihash,
        hash_to_merge: *mut ihash,
        dest_hash: *mut ihash,
    ) -> ::std::os::raw::c_int {
        (self
            .hash_merge_to
            .as_ref()
            .expect("Expected function, got error."))(base_hash, hash_to_merge, dest_hash)
    }
    pub unsafe fn hash_copy(&self, source_hash: *mut ihash) -> *mut ihash {
        (self
            .hash_copy
            .as_ref()
            .expect("Expected function, got error."))(source_hash)
    }
    pub unsafe fn hash_copy_to(
        &self,
        source_hash: *mut ihash,
        dest_hash: *mut ihash,
    ) -> ::std::os::raw::c_int {
        (self
            .hash_copy_to
            .as_ref()
            .expect("Expected function, got error."))(source_hash, dest_hash)
    }
    pub unsafe fn iv_stat(
        &self,
        name: *const ::std::os::raw::c_char,
        st: *mut stat,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_stat
            .as_ref()
            .expect("Expected function, got error."))(name, st)
    }
    pub unsafe fn iv_access(
        &self,
        pathname: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_access
            .as_ref()
            .expect("Expected function, got error."))(pathname, mode)
    }
    pub unsafe fn iv_fopen(
        &self,
        name: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        (self
            .iv_fopen
            .as_ref()
            .expect("Expected function, got error."))(name, mode)
    }
    pub unsafe fn iv_fread(
        &self,
        buffer: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        f: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_fread
            .as_ref()
            .expect("Expected function, got error."))(buffer, size, count, f)
    }
    pub unsafe fn iv_fwrite(
        &self,
        buffer: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        f: *mut FILE,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_fwrite
            .as_ref()
            .expect("Expected function, got error."))(buffer, size, count, f)
    }
    pub unsafe fn iv_fseek(
        &self,
        f: *mut FILE,
        offset: ::std::os::raw::c_long,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_fseek
            .as_ref()
            .expect("Expected function, got error."))(f, offset, whence)
    }
    pub unsafe fn iv_ftell(&self, f: *mut FILE) -> ::std::os::raw::c_long {
        (self
            .iv_ftell
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn iv_fclose(&self, f: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .iv_fclose
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn iv_fclose_no_sync(&self, f: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .iv_fclose_no_sync
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn iv_fgetc(&self, f: *mut FILE) -> ::std::os::raw::c_int {
        (self
            .iv_fgetc
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn iv_fgets(
        &self,
        string: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        f: *mut FILE,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .iv_fgets
            .as_ref()
            .expect("Expected function, got error."))(string, n, f)
    }
    pub unsafe fn iv_mkdir(
        &self,
        pathname: *const ::std::os::raw::c_char,
        mode: mode_t,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_mkdir
            .as_ref()
            .expect("Expected function, got error."))(pathname, mode)
    }
    pub unsafe fn iv_buildpath(&self, filename: *const ::std::os::raw::c_char) {
        (self
            .iv_buildpath
            .as_ref()
            .expect("Expected function, got error."))(filename)
    }
    pub unsafe fn iv_opendir(&self, dirname: *const ::std::os::raw::c_char) -> *mut DIR {
        (self
            .iv_opendir
            .as_ref()
            .expect("Expected function, got error."))(dirname)
    }
    pub unsafe fn iv_readdir(&self, dir: *mut DIR) -> *mut dirent {
        (self
            .iv_readdir
            .as_ref()
            .expect("Expected function, got error."))(dir)
    }
    pub unsafe fn iv_closedir(&self, dir: *mut DIR) -> ::std::os::raw::c_int {
        (self
            .iv_closedir
            .as_ref()
            .expect("Expected function, got error."))(dir)
    }
    pub unsafe fn iv_unlink(&self, name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .iv_unlink
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn iv_rmdir(&self, name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .iv_rmdir
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn iv_truncate(
        &self,
        name: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_truncate
            .as_ref()
            .expect("Expected function, got error."))(name, length)
    }
    pub unsafe fn iv_rename(
        &self,
        oldname: *const ::std::os::raw::c_char,
        newname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_rename
            .as_ref()
            .expect("Expected function, got error."))(oldname, newname)
    }
    pub unsafe fn iv_preload(
        &self,
        name: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) {
        (self
            .iv_preload
            .as_ref()
            .expect("Expected function, got error."))(name, count)
    }
    pub unsafe fn iv_sync(&self) {
        (self
            .iv_sync
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_validate_name(
        &self,
        s: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_validate_name
            .as_ref()
            .expect("Expected function, got error."))(s, flags)
    }
    pub unsafe fn iv_setbgresponse(&self, t: ::std::os::raw::c_int) {
        (self
            .iv_setbgresponse
            .as_ref()
            .expect("Expected function, got error."))(t)
    }
    pub unsafe fn Path2String(
        &self,
        path: *const ::std::os::raw::c_char,
        string: *mut ::std::os::raw::c_char,
        maxLength: ::std::os::raw::c_int,
    ) {
        (self
            .Path2String
            .as_ref()
            .expect("Expected function, got error."))(path, string, maxLength)
    }
    pub unsafe fn iv_ipc_request(
        &self,
        type_: ::std::os::raw::c_long,
        attr: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .iv_ipc_request
            .as_ref()
            .expect("Expected function, got error."))(type_, attr, data, inlen, outlen)
    }
    pub unsafe fn iv_ipc_request_secure(
        &self,
        type_: ::std::os::raw::c_long,
        param: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .iv_ipc_request_secure
            .as_ref()
            .expect("Expected function, got error."))(type_, param, data, inlen, outlen)
    }
    pub unsafe fn iv_ipc_cmd(
        &self,
        type_: ::std::os::raw::c_long,
        param: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long {
        (self
            .iv_ipc_cmd
            .as_ref()
            .expect("Expected function, got error."))(type_, param)
    }
    pub unsafe fn iv_ipc_request_with_timeout(
        &self,
        type_: ::std::os::raw::c_long,
        param: ::std::os::raw::c_long,
        data: *mut ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_int,
        outlen: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        (self
            .iv_ipc_request_with_timeout
            .as_ref()
            .expect("Expected function, got error."))(
            type_, param, data, inlen, outlen, timeout_ms
        )
    }
    pub unsafe fn currentLang(&self) -> *const ::std::os::raw::c_char {
        (self
            .currentLang
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumLanguages(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumLanguages
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DumpLanguage(&self) {
        (self
            .DumpLanguage
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LoadLanguageFromStream(
        &self,
        lang: *const ::std::os::raw::c_char,
        f: *mut FILE,
        ef: *mut FILE,
    ) {
        (self
            .LoadLanguageFromStream
            .as_ref()
            .expect("Expected function, got error."))(lang, f, ef)
    }
    pub unsafe fn LoadLanguage(&self, lang: *const ::std::os::raw::c_char) {
        (self
            .LoadLanguage
            .as_ref()
            .expect("Expected function, got error."))(lang)
    }
    pub unsafe fn AddTranslation(
        &self,
        label: *const ::std::os::raw::c_char,
        trans: *const ::std::os::raw::c_char,
    ) {
        (self
            .AddTranslation
            .as_ref()
            .expect("Expected function, got error."))(label, trans)
    }
    pub unsafe fn GetCurrentLangText(
        &self,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetCurrentLangText
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn GetLangText(
        &self,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetLangText
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn FormattedDate(
        &self,
        buf: *mut ::std::os::raw::c_char,
        max_size: usize,
        t: time_t,
    ) -> ::std::os::raw::c_int {
        (self
            .FormattedDate
            .as_ref()
            .expect("Expected function, got error."))(buf, max_size, t)
    }
    pub unsafe fn GetLangTextPlural(
        &self,
        s: *const ::std::os::raw::c_char,
        amount: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetLangTextPlural
            .as_ref()
            .expect("Expected function, got error."))(s, amount)
    }
    #[doc = " localized value by key should be in part of \"strftime\" format\n return localized time in variable \"buf\" or empty string if \"key\" not found\n return value \"0\" - ok\n return value \"-1\" - no key found (key may be a format)\n return value \"-2\" - not found any replacement of time format\n return value \"-3\" - result not fit in buffer\n return value \"-100\" - not supported format\n Notice: function try to add \"_12\" to key if AM/PM time format turned on in settings\n Requirments for keys:\n \"@TimeFormat\" + <key_words1> + <options> + <key_words2> + <am.pm>\n <options>:\n \"Date\"/\"SDate\" - month name and month day number / short month name and month day number (ex. January/Jan)\n \"Time\" - hours and minutes\n \"WDay\"/\"SWDay\" - Week day name / short week day name (ex. Monday/Mon)\n \"Year\" - year number\n others - other options like \"Seconds\", \"Month\", \"SMonth\", \"SMDay\", etc\n <key_words1>, <key_words2> - optional if need for detalize key\n <am.pm> - if AM/PM time format turned on in settings, auto add \"_12\" in function."]
    pub unsafe fn GetLangTime(
        &self,
        buf: *mut ::std::os::raw::c_char,
        size: usize,
        key: *const ::std::os::raw::c_char,
        t: *mut tm,
        current_time: *mut tm,
    ) -> ::std::os::raw::c_int {
        (self
            .GetLangTime
            .as_ref()
            .expect("Expected function, got error."))(buf, size, key, t, current_time)
    }
    pub unsafe fn SetRTLBook(&self, rtl: ::std::os::raw::c_int) {
        (self
            .SetRTLBook
            .as_ref()
            .expect("Expected function, got error."))(rtl)
    }
    pub unsafe fn IsRTL(&self) -> ::std::os::raw::c_int {
        (self.IsRTL.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn IsBookRTL(&self) -> ::std::os::raw::c_int {
        (self
            .IsBookRTL
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumProfiles(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumProfiles
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetProfileType(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .GetProfileType
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn EnumProfileAvatars(&self) -> *mut *mut ibitmap {
        (self
            .EnumProfileAvatars
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetProfileAvatar(&self, name: *const ::std::os::raw::c_char) -> *mut ibitmap {
        (self
            .GetProfileAvatar
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn SetProfileAvatar(
        &self,
        name: *const ::std::os::raw::c_char,
        ava: *mut ibitmap,
    ) -> ::std::os::raw::c_int {
        (self
            .SetProfileAvatar
            .as_ref()
            .expect("Expected function, got error."))(name, ava)
    }
    pub unsafe fn RenameProfile(
        &self,
        oldname: *const ::std::os::raw::c_char,
        newname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .RenameProfile
            .as_ref()
            .expect("Expected function, got error."))(oldname, newname)
    }
    pub unsafe fn DeleteProfile(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .DeleteProfile
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn GetCurrentProfile(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetCurrentProfile
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetCurrentProfile(
        &self,
        name: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .SetCurrentProfile
            .as_ref()
            .expect("Expected function, got error."))(name, flags)
    }
    pub unsafe fn GetProfilesCountAfterEnum(&self) -> ::std::os::raw::c_int {
        (self
            .GetProfilesCountAfterEnum
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenProfileSelector(&self) {
        (self
            .OpenProfileSelector
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ScanProfiles(
        &self,
        path: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        profiles: *mut iprofiles,
    ) -> ::std::os::raw::c_int {
        (self
            .ScanProfiles
            .as_ref()
            .expect("Expected function, got error."))(path, type_, profiles)
    }
    pub unsafe fn GetLocalProfilesLimit(&self) -> ::std::os::raw::c_int {
        (self
            .GetLocalProfilesLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSDProfilesLimit(&self) -> ::std::os::raw::c_int {
        (self
            .GetSDProfilesLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetProfilesLimit(&self) -> ::std::os::raw::c_int {
        (self
            .GetProfilesLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CreateProfileStruct(&self) -> iprofile {
        (self
            .CreateProfileStruct
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CreateProfilesStruct(&self) -> iprofiles {
        (self
            .CreateProfilesStruct
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ClearProfilesStruct(&self, profiles: *mut iprofiles) {
        (self
            .ClearProfilesStruct
            .as_ref()
            .expect("Expected function, got error."))(profiles)
    }
    pub unsafe fn ClearProfileStruct(&self, profile: *mut iprofile) {
        (self
            .ClearProfileStruct
            .as_ref()
            .expect("Expected function, got error."))(profile)
    }
    pub unsafe fn GetProfilesList(&self, profiles: *mut iprofiles) -> ::std::os::raw::c_int {
        (self
            .GetProfilesList
            .as_ref()
            .expect("Expected function, got error."))(profiles)
    }
    pub unsafe fn CreateProfile(
        &self,
        name: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .CreateProfile
            .as_ref()
            .expect("Expected function, got error."))(name, type_)
    }
    pub unsafe fn DeleteProfileEx(&self, profile: *const iprofile) -> ::std::os::raw::c_int {
        (self
            .DeleteProfileEx
            .as_ref()
            .expect("Expected function, got error."))(profile)
    }
    pub unsafe fn RenameProfileEx(
        &self,
        profile: *const iprofile,
        new_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .RenameProfileEx
            .as_ref()
            .expect("Expected function, got error."))(profile, new_name)
    }
    pub unsafe fn GetCurrentProfileEx(&self, profile: *mut iprofile) -> ::std::os::raw::c_int {
        (self
            .GetCurrentProfileEx
            .as_ref()
            .expect("Expected function, got error."))(profile)
    }
    pub unsafe fn SetCurrentProfileEx(&self, profile: *const iprofile) -> ::std::os::raw::c_int {
        (self
            .SetCurrentProfileEx
            .as_ref()
            .expect("Expected function, got error."))(profile)
    }
    pub unsafe fn GetProfilesCount(&self) -> ::std::os::raw::c_int {
        (self
            .GetProfilesCount
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumThemes(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumThemes
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenTheme(&self, path: *const ::std::os::raw::c_char) {
        (self
            .OpenTheme
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn GetResource(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: *const ibitmap,
    ) -> *mut ibitmap {
        (self
            .GetResource
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn GetThemeInt(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetThemeInt
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn GetThemeString(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetThemeString
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn GetLayoutFromTheme(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .GetLayoutFromTheme
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn GetThemeFont(
        &self,
        name: *const ::std::os::raw::c_char,
        deflt: *const ::std::os::raw::c_char,
    ) -> *mut ifont {
        (self
            .GetThemeFont
            .as_ref()
            .expect("Expected function, got error."))(name, deflt)
    }
    pub unsafe fn GetThemeRect(
        &self,
        name: *const ::std::os::raw::c_char,
        rect: *mut irect,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .GetThemeRect
            .as_ref()
            .expect("Expected function, got error."))(name, rect, x, y, w, h, flags)
    }
    pub unsafe fn GetKeyResource(
        &self,
        key: *const ::std::os::raw::c_char,
        deflt: *const ibitmap,
    ) -> *mut ibitmap {
        (self
            .GetKeyResource
            .as_ref()
            .expect("Expected function, got error."))(key, deflt)
    }
    pub unsafe fn IsResourcePresent(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ushort {
        (self
            .IsResourcePresent
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn GetSupportedFileTypes(&self) -> *mut iv_filetype {
        (self
            .GetSupportedFileTypes
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSupportedFileTypesLength(&self) -> ::std::os::raw::c_int {
        (self
            .GetSupportedFileTypesLength
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetBookInfo(&self, name: *const ::std::os::raw::c_char) -> *mut bookinfo {
        (self
            .GetBookInfo
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn GetBookInfoExt(
        &self,
        path: *const ::std::os::raw::c_char,
        separator: *const ::std::os::raw::c_char,
    ) -> *mut bookinfo {
        (self
            .GetBookInfoExt
            .as_ref()
            .expect("Expected function, got error."))(path, separator)
    }
    pub unsafe fn GetBookISBN(
        &self,
        path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .GetBookISBN
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn GetBookCover(
        &self,
        name: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut ibitmap {
        (self
            .GetBookCover
            .as_ref()
            .expect("Expected function, got error."))(name, width, height)
    }
    pub unsafe fn GetBookCoverEx(
        &self,
        name: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        pixel_format: PixelFormat,
    ) -> *mut ibitmap {
        (self
            .GetBookCoverEx
            .as_ref()
            .expect("Expected function, got error."))(name, width, height, pixel_format)
    }
    pub unsafe fn GetBookSyncStatus(&self, path: *const ::std::os::raw::c_char) -> BookSyncStatus {
        (self
            .GetBookSyncStatus
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn GetAssociatedFile(
        &self,
        name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .GetAssociatedFile
            .as_ref()
            .expect("Expected function, got error."))(name, index)
    }
    pub unsafe fn CheckAssociatedFile(
        &self,
        name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .CheckAssociatedFile
            .as_ref()
            .expect("Expected function, got error."))(name, index)
    }
    pub unsafe fn FileType(&self, path: *const ::std::os::raw::c_char) -> *mut iv_filetype {
        (self
            .FileType
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn FileTypeExt(
        &self,
        path: *const ::std::os::raw::c_char,
        f_stat: *mut stat,
    ) -> *mut iv_filetype {
        (self
            .FileTypeExt
            .as_ref()
            .expect("Expected function, got error."))(path, f_stat)
    }
    pub unsafe fn SetFileHandler(
        &self,
        path: *const ::std::os::raw::c_char,
        handler: *const ::std::os::raw::c_char,
    ) {
        (self
            .SetFileHandler
            .as_ref()
            .expect("Expected function, got error."))(path, handler)
    }
    pub unsafe fn GetFileHandler(
        &self,
        path: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetFileHandler
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn PackParameters(
        &self,
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
        data: *mut *mut ::std::os::raw::c_void,
        len: *mut ::std::os::raw::c_int,
    ) {
        (self
            .PackParameters
            .as_ref()
            .expect("Expected function, got error."))(argc, argv, data, len)
    }
    pub unsafe fn UnpackParameters(
        &self,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
        argc: *mut ::std::os::raw::c_int,
        argv: *mut *mut *mut ::std::os::raw::c_char,
    ) {
        (self
            .UnpackParameters
            .as_ref()
            .expect("Expected function, got error."))(data, len, argc, argv)
    }
    pub unsafe fn OpenBook(
        &self,
        path: *const ::std::os::raw::c_char,
        parameters: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .OpenBook
            .as_ref()
            .expect("Expected function, got error."))(path, parameters, flags)
    }
    pub unsafe fn OpenBook2(
        &self,
        path: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .OpenBook2
            .as_ref()
            .expect("Expected function, got error."))(path, argc, argv, flags)
    }
    pub unsafe fn BookPreparing(&self, path: *const ::std::os::raw::c_char) {
        (self
            .BookPreparing
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn BookReady(&self, path: *const ::std::os::raw::c_char) {
        (self
            .BookReady
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn GetLastOpen(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .GetLastOpen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn AddLastOpen(&self, path: *const ::std::os::raw::c_char) {
        (self
            .AddLastOpen
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn OpenLastBooks(&self) {
        (self
            .OpenLastBooks
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn FlushLastOpen(&self) {
        (self
            .FlushLastOpen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = "\\brief Try to find ISBN in text by regular expression patern. Return first occurence which match pattern.\n\\param text text to search in\n\\return pointer to isbn (null terminated string that should be freed by caller) or NULL if not found or error occurs"]
    pub unsafe fn FindIsbnInText(
        &self,
        text: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .FindIsbnInText
            .as_ref()
            .expect("Expected function, got error."))(text)
    }
    pub unsafe fn IvTTSSupported(&self) -> bool {
        (self
            .IvTTSSupported
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenPlayer(&self) {
        (self
            .OpenPlayer
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ClosePlayer(&self) {
        (self
            .ClosePlayer
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PlayFile(&self, filename: *const ::std::os::raw::c_char) {
        (self
            .PlayFile
            .as_ref()
            .expect("Expected function, got error."))(filename)
    }
    pub unsafe fn LoadPlaylist(&self, pl: *mut *mut ::std::os::raw::c_char) {
        (self
            .LoadPlaylist
            .as_ref()
            .expect("Expected function, got error."))(pl)
    }
    pub unsafe fn GetPlaylist(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .GetPlaylist
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PlayTrack(&self, n: ::std::os::raw::c_int) {
        (self
            .PlayTrack
            .as_ref()
            .expect("Expected function, got error."))(n)
    }
    pub unsafe fn PreviousTrack(&self) {
        (self
            .PreviousTrack
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn NextTrack(&self) {
        (self
            .NextTrack
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetCurrentTrack(&self) -> ::std::os::raw::c_int {
        (self
            .GetCurrentTrack
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetTrackSize(&self) -> ::std::os::raw::c_int {
        (self
            .GetTrackSize
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetTrackPosition(&self, pos: ::std::os::raw::c_int) {
        (self
            .SetTrackPosition
            .as_ref()
            .expect("Expected function, got error."))(pos)
    }
    pub unsafe fn GetTrackPosition(&self) -> ::std::os::raw::c_int {
        (self
            .GetTrackPosition
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetPlayerState(&self, state: ::std::os::raw::c_int) {
        (self
            .SetPlayerState
            .as_ref()
            .expect("Expected function, got error."))(state)
    }
    pub unsafe fn GetPlayerState(&self) -> ::std::os::raw::c_int {
        (self
            .GetPlayerState
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetPlayerMode(&self, mode: ::std::os::raw::c_int) {
        (self
            .SetPlayerMode
            .as_ref()
            .expect("Expected function, got error."))(mode)
    }
    pub unsafe fn GetPlayerMode(&self) -> ::std::os::raw::c_int {
        (self
            .GetPlayerMode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn TogglePlaying(&self) {
        (self
            .TogglePlaying
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetVolume(&self, n: ::std::os::raw::c_int) {
        (self
            .SetVolume
            .as_ref()
            .expect("Expected function, got error."))(n)
    }
    pub unsafe fn GetVolume(&self) -> ::std::os::raw::c_int {
        (self
            .GetVolume
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetEqualizer(&self, eq: *mut ::std::os::raw::c_int) {
        (self
            .SetEqualizer
            .as_ref()
            .expect("Expected function, got error."))(eq)
    }
    pub unsafe fn GetEqualizer(&self, eq: *mut ::std::os::raw::c_int) {
        (self
            .GetEqualizer
            .as_ref()
            .expect("Expected function, got error."))(eq)
    }
    pub unsafe fn SetAudioPlayingInfo(&self, info: AudioPlayingInfo) -> ::std::os::raw::c_int {
        (self
            .SetAudioPlayingInfo
            .as_ref()
            .expect("Expected function, got error."))(info)
    }
    pub unsafe fn GetAudioPlayingInfo(&self, info: *mut AudioPlayingInfo) -> ::std::os::raw::c_int {
        (self
            .GetAudioPlayingInfo
            .as_ref()
            .expect("Expected function, got error."))(info)
    }
    pub unsafe fn GetHighVolumeTimeout(&self) -> ::std::os::raw::c_int {
        (self
            .GetHighVolumeTimeout
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ResetHighVolumeTimeout(&self) {
        (self
            .ResetHighVolumeTimeout
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IncreaseHighVolumeInterval(&self, value: ::std::os::raw::c_int) {
        (self
            .IncreaseHighVolumeInterval
            .as_ref()
            .expect("Expected function, got error."))(value)
    }
    pub unsafe fn LoadHighVolumeTimeout(&self) {
        (self
            .LoadHighVolumeTimeout
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SaveHighVolumeTimeout(&self) {
        (self
            .SaveHighVolumeTimeout
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSafeVolumeLimit(&self) -> ::std::os::raw::c_int {
        (self
            .GetSafeVolumeLimit
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHighVolumeMaxInterval(&self) -> ::std::os::raw::c_int {
        (self
            .GetHighVolumeMaxInterval
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumDictionaries(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumDictionaries
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumDictionariesFiles(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumDictionariesFiles
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumDictionariesFilesCallAfterEnumDictionaries(
        &self,
    ) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumDictionariesFilesCallAfterEnumDictionaries
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetKeyboardLayoutForOpenedDictionary(&self) -> *const ::std::os::raw::c_char {
        (self
            .GetKeyboardLayoutForOpenedDictionary
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn haveDictionaryKeyboard(&self) -> bool {
        (self
            .haveDictionaryKeyboard
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenDictionary(&self, name: *const ::std::os::raw::c_char) -> bool {
        (self
            .OpenDictionary
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn CloseDictionary(&self) {
        (self
            .CloseDictionary
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DictionaryOpened(&self) -> *const ::std::os::raw::c_char {
        (self
            .DictionaryOpened
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LookupWord(
        &self,
        what: *const ::std::os::raw::c_char,
        word: *mut *mut ::std::os::raw::c_char,
        trans: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .LookupWord
            .as_ref()
            .expect("Expected function, got error."))(what, word, trans)
    }
    pub unsafe fn LookupWordExact(
        &self,
        what: *const ::std::os::raw::c_char,
        word: *mut *mut ::std::os::raw::c_char,
        trans: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .LookupWordExact
            .as_ref()
            .expect("Expected function, got error."))(what, word, trans)
    }
    pub unsafe fn LookupPrevious(
        &self,
        word: *mut *mut ::std::os::raw::c_char,
        trans: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .LookupPrevious
            .as_ref()
            .expect("Expected function, got error."))(word, trans)
    }
    pub unsafe fn LookupNext(
        &self,
        word: *mut *mut ::std::os::raw::c_char,
        trans: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .LookupNext
            .as_ref()
            .expect("Expected function, got error."))(word, trans)
    }
    pub unsafe fn GetWordListWithPrefix(
        &self,
        prefix_utf8: *const ::std::os::raw::c_char,
        maxWords: ::std::os::raw::c_int,
        wordList: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .GetWordListWithPrefix
            .as_ref()
            .expect("Expected function, got error."))(prefix_utf8, maxWords, wordList)
    }
    pub unsafe fn iv_reflow_start(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        scale: ::std::os::raw::c_int,
    ) {
        (self
            .iv_reflow_start
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, scale)
    }
    pub unsafe fn iv_reflow_bt(&self) {
        (self
            .iv_reflow_bt
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_et(&self) {
        (self
            .iv_reflow_et
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_div(&self) {
        (self
            .iv_reflow_div
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_addchar(
        &self,
        code: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) {
        (self
            .iv_reflow_addchar
            .as_ref()
            .expect("Expected function, got error."))(code, x, y, w, h)
    }
    pub unsafe fn iv_reflow_addimage(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) {
        (self
            .iv_reflow_addimage
            .as_ref()
            .expect("Expected function, got error."))(x, y, w, h, flags)
    }
    pub unsafe fn iv_reflow_subpages(&self) -> ::std::os::raw::c_int {
        (self
            .iv_reflow_subpages
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_render(&self, spnum: ::std::os::raw::c_int) {
        (self
            .iv_reflow_render
            .as_ref()
            .expect("Expected function, got error."))(spnum)
    }
    pub unsafe fn iv_reflow_getchar(
        &self,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_reflow_getchar
            .as_ref()
            .expect("Expected function, got error."))(x, y)
    }
    pub unsafe fn iv_reflow_getimage(
        &self,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        scale: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_reflow_getimage
            .as_ref()
            .expect("Expected function, got error."))(x, y, scale)
    }
    pub unsafe fn iv_reflow_words(&self) -> ::std::os::raw::c_int {
        (self
            .iv_reflow_words
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_reflow_getword(
        &self,
        n: ::std::os::raw::c_int,
        spnum: *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .iv_reflow_getword
            .as_ref()
            .expect("Expected function, got error."))(n, spnum, x, y, w, h)
    }
    pub unsafe fn iv_reflow_clear(&self) {
        (self
            .iv_reflow_clear
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn AddScrolledArea(
        &self,
        area: *mut irect,
        receivePointerUp: ::std::os::raw::c_int,
    ) {
        (self
            .AddScrolledArea
            .as_ref()
            .expect("Expected function, got error."))(area, receivePointerUp)
    }
    pub unsafe fn RemoveScrolledArea(&self, area: *mut irect) {
        (self
            .RemoveScrolledArea
            .as_ref()
            .expect("Expected function, got error."))(area)
    }
    pub unsafe fn ClearAllScrolledAreas(&self) {
        (self
            .ClearAllScrolledAreas
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetMinimalXScrollIndent(&self, area: *mut irect, Xindent: ::std::os::raw::c_int) {
        (self
            .SetMinimalXScrollIndent
            .as_ref()
            .expect("Expected function, got error."))(area, Xindent)
    }
    pub unsafe fn SetMinimalYScrollIndent(&self, area: *mut irect, Yindent: ::std::os::raw::c_int) {
        (self
            .SetMinimalYScrollIndent
            .as_ref()
            .expect("Expected function, got error."))(area, Yindent)
    }
    pub unsafe fn IsAnyScrolledArea(&self) -> ::std::os::raw::c_int {
        (self
            .IsAnyScrolledArea
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetCurrentApplicationAttribute(
        &self,
        attribute: APPLICATION_ATTRIBUTE,
        on: ::std::os::raw::c_int,
    ) {
        (self
            .SetCurrentApplicationAttribute
            .as_ref()
            .expect("Expected function, got error."))(attribute, on)
    }
    pub unsafe fn TestCurrentApplicationAttribute(
        &self,
        attribute: APPLICATION_ATTRIBUTE,
    ) -> ::std::os::raw::c_int {
        (self
            .TestCurrentApplicationAttribute
            .as_ref()
            .expect("Expected function, got error."))(attribute)
    }
    pub unsafe fn iv_fullscreen(&self) {
        (self
            .iv_fullscreen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_nofullscreen(&self) {
        (self
            .iv_nofullscreen
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_sleepmode(&self, on: ::std::os::raw::c_int) {
        (self
            .iv_sleepmode
            .as_ref()
            .expect("Expected function, got error."))(on)
    }
    pub unsafe fn GetSleepmode(&self) -> ::std::os::raw::c_int {
        (self
            .GetSleepmode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetBatteryPower(&self) -> ::std::os::raw::c_int {
        (self
            .GetBatteryPower
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetTemperature(&self) -> ::std::os::raw::c_int {
        (self
            .GetTemperature
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsCharging(&self) -> ::std::os::raw::c_int {
        (self
            .IsCharging
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsUSBconnected(&self) -> ::std::os::raw::c_int {
        (self
            .IsUSBconnected
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsSDinserted(&self) -> ::std::os::raw::c_int {
        (self
            .IsSDinserted
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsPlayingMP3(&self) -> ::std::os::raw::c_int {
        (self
            .IsPlayingMP3
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsKeyPressed(&self, key: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .IsKeyPressed
            .as_ref()
            .expect("Expected function, got error."))(key)
    }
    pub unsafe fn GetDeviceModel(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetDeviceModel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHardwareType(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetHardwareType
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSoftwareVersion(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetSoftwareVersion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief IvReadVersionFromFirmwareFile - read version from header of SWUPDATE.BIN file\n @param output - buffer where result will be placed\n @param max_length - max len of buffer\n @param path - path to SWUPDATE.BIN\n @return true when suceess"]
    pub unsafe fn IvReadVersionFromFirmwareFile(
        &self,
        output: *mut ::std::os::raw::c_char,
        max_length: usize,
        path: *const ::std::os::raw::c_char,
    ) -> bool {
        (self
            .IvReadVersionFromFirmwareFile
            .as_ref()
            .expect("Expected function, got error."))(output, max_length, path)
    }
    pub unsafe fn isUsbStorAttached(&self) -> bool {
        (self
            .isUsbStorAttached
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn isUsbStorMounted(&self) -> bool {
        (self
            .isUsbStorMounted
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn usbStorEject(&self) {
        (self
            .usbStorEject
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn usbStorSerialNumber(&self) -> *mut ::std::os::raw::c_char {
        (self
            .usbStorSerialNumber
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetSerialSoftwareInfo(
        &self,
        device_model: *mut *mut ::std::os::raw::c_char,
        major_version: *mut ::std::os::raw::c_int,
        minor_version: *mut ::std::os::raw::c_int,
        build_version: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GetSerialSoftwareInfo
            .as_ref()
            .expect("Expected function, got error."))(
            device_model,
            major_version,
            minor_version,
            build_version,
        )
    }
    pub unsafe fn GetSerialNumber(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetSerialNumber
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetExternalCardSerialNumber(&self) -> *const ::std::os::raw::c_char {
        (self
            .GetExternalCardSerialNumber
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetWaveformFilename(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetWaveformFilename
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetDeviceKey(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetDeviceKey
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetDeviceFingerprint(&self) -> *mut ::std::os::raw::c_uchar {
        (self
            .GetDeviceFingerprint
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CurrentDateStr(&self) -> *mut ::std::os::raw::c_char {
        (self
            .CurrentDateStr
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DateStr(&self, t: time_t) -> *mut ::std::os::raw::c_char {
        (self
            .DateStr
            .as_ref()
            .expect("Expected function, got error."))(t)
    }
    pub unsafe fn GoSleep(
        &self,
        ms: ::std::os::raw::c_int,
        deep: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .GoSleep
            .as_ref()
            .expect("Expected function, got error."))(ms, deep)
    }
    pub unsafe fn BanSleep(&self, sec: ::std::os::raw::c_int) {
        (self
            .BanSleep
            .as_ref()
            .expect("Expected function, got error."))(sec)
    }
    pub unsafe fn SetAutoPowerOff(&self, en: bool) {
        (self
            .SetAutoPowerOff
            .as_ref()
            .expect("Expected function, got error."))(en)
    }
    pub unsafe fn SetAutoKeylock(&self, en: bool) {
        (self
            .SetAutoKeylock
            .as_ref()
            .expect("Expected function, got error."))(en)
    }
    pub unsafe fn PowerOff(&self) {
        (self
            .PowerOff
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SafeMode(&self) -> ::std::os::raw::c_int {
        (self
            .SafeMode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenMainMenu(&self) {
        (self
            .OpenMainMenu
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CloseAllTasks(&self) {
        (self
            .CloseAllTasks
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn WriteStartupLogo(&self, bm: *const ibitmap) -> ::std::os::raw::c_int {
        (self
            .WriteStartupLogo
            .as_ref()
            .expect("Expected function, got error."))(bm)
    }
    pub unsafe fn WritePartnerPowerOffLogo(&self, bm: *const ibitmap) {
        (self
            .WritePartnerPowerOffLogo
            .as_ref()
            .expect("Expected function, got error."))(bm)
    }
    pub unsafe fn WriteLowPoweRLogo(&self, bm: *const ibitmap) -> ::std::os::raw::c_int {
        (self
            .WriteLowPoweRLogo
            .as_ref()
            .expect("Expected function, got error."))(bm)
    }
    pub unsafe fn PageSnapshot(&self) -> ::std::os::raw::c_int {
        (self
            .PageSnapshot
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn RestoreStartupLogo(&self) -> ::std::os::raw::c_int {
        (self
            .RestoreStartupLogo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn QueryTouchpanel(&self) -> ::std::os::raw::c_int {
        (self
            .QueryTouchpanel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CalibrateTouchpanel(&self) {
        (self
            .CalibrateTouchpanel
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CalibrateTouchDevice(&self, TouchDevice: input_dev_e) {
        (self
            .CalibrateTouchDevice
            .as_ref()
            .expect("Expected function, got error."))(TouchDevice)
    }
    pub unsafe fn TouchScreenEnable(&self, onOff: bool) -> ::std::os::raw::c_int {
        (self
            .TouchScreenEnable
            .as_ref()
            .expect("Expected function, got error."))(onOff)
    }
    pub unsafe fn IsTouchScreenEnabled(&self) -> bool {
        (self
            .IsTouchScreenEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenCalendar(&self) {
        (self
            .OpenCalendar
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief StartSoftwareUpdate - IvStartSoftwareUpdateEx always with dialog\n @return"]
    pub unsafe fn StartSoftwareUpdate(&self) -> ::std::os::raw::c_int {
        (self
            .StartSoftwareUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief IvStartSoftwareUpdateEx\n @param withDialog\n @return"]
    pub unsafe fn IvStartSoftwareUpdateEx(
        &self,
        withDialog: bool,
    ) -> iv_start_software_update_result {
        (self
            .IvStartSoftwareUpdateEx
            .as_ref()
            .expect("Expected function, got error."))(withDialog)
    }
    pub unsafe fn HavePowerForSoftwareUpdate(&self) -> bool {
        (self
            .HavePowerForSoftwareUpdate
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ForcingSleep(&self) {
        (self
            .ForcingSleep
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn WiFiPower(&self, status: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .WiFiPower
            .as_ref()
            .expect("Expected function, got error."))(status)
    }
    pub unsafe fn GetWiFiScanResults(&self, aps: *mut iv_wifi_ap_list) -> *mut iv_wifi_ap_list {
        (self
            .GetWiFiScanResults
            .as_ref()
            .expect("Expected function, got error."))(aps)
    }
    pub unsafe fn WiFiScanProcessStart(&self) -> ::std::os::raw::c_int {
        (self
            .WiFiScanProcessStart
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn WiFiScanProcessSetSelectiveList(&self, list: *mut iv_wifi_ap_list) {
        (self
            .WiFiScanProcessSetSelectiveList
            .as_ref()
            .expect("Expected function, got error."))(list)
    }
    pub unsafe fn WiFiScanProcessGetResults(&self) -> *mut iv_wifi_ap_list {
        (self
            .WiFiScanProcessGetResults
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn WiFiScanProcessStop(&self) -> ::std::os::raw::c_int {
        (self
            .WiFiScanProcessStop
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn QueryNetwork(&self) -> ::std::os::raw::c_int {
        (self
            .QueryNetwork
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHwAddress(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetHwAddress
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHwBTAddress(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetHwBTAddress
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetHw3GIMEI(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetHw3GIMEI
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetBluetoothMode(&self) -> ::std::os::raw::c_int {
        (self
            .GetBluetoothMode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetBluetoothMode(
        &self,
        mode: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .SetBluetoothMode
            .as_ref()
            .expect("Expected function, got error."))(mode, flags)
    }
    pub unsafe fn GetBluetoothStatus(&self) -> bt_state {
        (self
            .GetBluetoothStatus
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetBluetoothOn(&self) -> ::std::os::raw::c_int {
        (self
            .SetBluetoothOn
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetBluetoothOff(&self) -> ::std::os::raw::c_int {
        (self
            .SetBluetoothOff
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsBluetoothEnabled(&self) -> ::std::os::raw::c_int {
        (self
            .IsBluetoothEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsBluetoothAwake(&self) -> ::std::os::raw::c_int {
        (self
            .IsBluetoothAwake
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn BluetoothWakeUp(&self) -> ::std::os::raw::c_int {
        (self
            .BluetoothWakeUp
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn BluetoothSuspend(&self) -> ::std::os::raw::c_int {
        (self
            .BluetoothSuspend
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumBTdevices(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumBTdevices
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenBTdevicesMenu(
        &self,
        title: *mut ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        hproc: iv_itemchangehandler,
    ) {
        (self
            .OpenBTdevicesMenu
            .as_ref()
            .expect("Expected function, got error."))(title, x, y, hproc)
    }
    pub unsafe fn BtSendFiles(
        &self,
        mac: *mut ::std::os::raw::c_char,
        files: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .BtSendFiles
            .as_ref()
            .expect("Expected function, got error."))(mac, files)
    }
    pub unsafe fn SetFlightMode(&self, fm: bool) -> ::std::os::raw::c_int {
        (self
            .SetFlightMode
            .as_ref()
            .expect("Expected function, got error."))(fm)
    }
    pub unsafe fn IsFlightModeEnabled(&self) -> bool {
        (self
            .IsFlightModeEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumWirelessNetworks(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumWirelessNetworks
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn EnumConnections(&self) -> *mut *mut ::std::os::raw::c_char {
        (self
            .EnumConnections
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetBTservice(
        &self,
        mac: *const ::std::os::raw::c_char,
        service: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .GetBTservice
            .as_ref()
            .expect("Expected function, got error."))(mac, service)
    }
    #[doc = " @brief NetConnect - shows dilaog asking user to connect to wifi and than connecting\n @param name - name of network (NULL means to use last connection)\n @note showHourglass is always showing\n @return NET_OK if syccesfully connected or NET_* if error"]
    pub unsafe fn NetConnect(&self, name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .NetConnect
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    #[doc = " @brief NetConnect2 - shows dilaog asking user to connect to wifi and than connecting\n @param name - name of network (NULL means to use last connection)\n @param showHourglass\n @return NET_OK if syccesfully connected or NET_* if error"]
    pub unsafe fn NetConnect2(
        &self,
        name: *const ::std::os::raw::c_char,
        showHourglass: bool,
    ) -> ::std::os::raw::c_int {
        (self
            .NetConnect2
            .as_ref()
            .expect("Expected function, got error."))(name, showHourglass)
    }
    #[doc = " @brief NetConnectSilent - try to connect to wifi without showing any dialogs\n @param name - name of network (NULL means to use last connection)\n @return NET_OK if syccesfully connected or NET_* if error"]
    pub unsafe fn NetConnectSilent(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .NetConnectSilent
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    #[doc = " @brief NetConnectAsync - same as NetConnect byt not locking thread\n @param cb - callback (status: NET_*)\n @return always 0"]
    pub unsafe fn NetConnectAsync(
        &self,
        cb: ::std::option::Option<
            unsafe extern "C" fn(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int {
        (self
            .NetConnectAsync
            .as_ref()
            .expect("Expected function, got error."))(cb)
    }
    pub unsafe fn NetDisconnect(&self) -> ::std::os::raw::c_int {
        (self
            .NetDisconnect
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn NetDisconnectAsync(
        &self,
        cb: ::std::option::Option<
            unsafe extern "C" fn(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int {
        (self
            .NetDisconnectAsync
            .as_ref()
            .expect("Expected function, got error."))(cb)
    }
    #[doc = " @brief NetConnect3 - blocking function\n @param silent - not showing question dialog if silent\n @return true if connected by any reasons"]
    pub unsafe fn NetConnect3(&self, silent: bool) -> bool {
        (self
            .NetConnect3
            .as_ref()
            .expect("Expected function, got error."))(silent)
    }
    pub unsafe fn NetInfo(&self) -> *mut iv_netinfo {
        (self
            .NetInfo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn OpenNetworkInfo(&self) {
        (self
            .OpenNetworkInfo
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetUserAgent(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetUserAgent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetDefaultUserAgent(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetDefaultUserAgent
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetProxyUrl(&self) -> *mut ::std::os::raw::c_char {
        (self
            .GetProxyUrl
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn QuickDownloadExt3(
        &self,
        url: *const ::std::os::raw::c_char,
        retsize: *mut ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_char,
        post: *mut ::std::os::raw::c_char,
        error_code: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .QuickDownloadExt3
            .as_ref()
            .expect("Expected function, got error."))(
            url, retsize, timeout, cookie, post, error_code,
        )
    }
    pub unsafe fn QuickDownloadExt2(
        &self,
        url: *const ::std::os::raw::c_char,
        retsize: *mut ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_char,
        post: *mut ::std::os::raw::c_char,
        error_code: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .QuickDownloadExt2
            .as_ref()
            .expect("Expected function, got error."))(
            url, retsize, timeout, cookie, post, error_code,
        )
    }
    pub unsafe fn QuickDownloadExt(
        &self,
        url: *const ::std::os::raw::c_char,
        retsize: *mut ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        cookie: *mut ::std::os::raw::c_char,
        post: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .QuickDownloadExt
            .as_ref()
            .expect("Expected function, got error."))(url, retsize, timeout, cookie, post)
    }
    pub unsafe fn QuickDownload(
        &self,
        url: *const ::std::os::raw::c_char,
        retsize: *mut ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        (self
            .QuickDownload
            .as_ref()
            .expect("Expected function, got error."))(url, retsize, timeout)
    }
    pub unsafe fn NewSession(&self) -> ::std::os::raw::c_int {
        (self
            .NewSession
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CloseSession(&self, id: ::std::os::raw::c_int) {
        (self
            .CloseSession
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn SetUserAgent(
        &self,
        id: ::std::os::raw::c_int,
        ua: *const ::std::os::raw::c_char,
    ) {
        (self
            .SetUserAgent
            .as_ref()
            .expect("Expected function, got error."))(id, ua)
    }
    pub unsafe fn SetProxy(
        &self,
        id: ::std::os::raw::c_int,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        user: *const ::std::os::raw::c_char,
        pass: *const ::std::os::raw::c_char,
    ) {
        (self
            .SetProxy
            .as_ref()
            .expect("Expected function, got error."))(id, host, port, user, pass)
    }
    pub unsafe fn Download(
        &self,
        id: ::std::os::raw::c_int,
        url: *const ::std::os::raw::c_char,
        postdata: *const ::std::os::raw::c_char,
        fp: *mut *mut FILE,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .Download
            .as_ref()
            .expect("Expected function, got error."))(id, url, postdata, fp, timeout)
    }
    pub unsafe fn DownloadTo(
        &self,
        id: ::std::os::raw::c_int,
        url: *const ::std::os::raw::c_char,
        postdata: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DownloadTo
            .as_ref()
            .expect("Expected function, got error."))(id, url, postdata, filename, timeout)
    }
    pub unsafe fn DownloadTo_Crutch(
        &self,
        id: ::std::os::raw::c_int,
        url: *const ::std::os::raw::c_char,
        postdata: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .DownloadTo_Crutch
            .as_ref()
            .expect("Expected function, got error."))(id, url, postdata, filename, timeout)
    }
    pub unsafe fn SetSessionFlag(
        &self,
        _id: ::std::os::raw::c_int,
        _flag: ::std::os::raw::c_int,
        _value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .SetSessionFlag
            .as_ref()
            .expect("Expected function, got error."))(_id, _flag, _value)
    }
    pub unsafe fn GetSessionStatus(&self, id: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .GetSessionStatus
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn GetHeader(
        &self,
        id: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .GetHeader
            .as_ref()
            .expect("Expected function, got error."))(id, name)
    }
    pub unsafe fn GetSessionInfo(&self, id: ::std::os::raw::c_int) -> *mut iv_sessioninfo {
        (self
            .GetSessionInfo
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn PauseTransfer(&self, id: ::std::os::raw::c_int) {
        (self
            .PauseTransfer
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn ResumeTransfer(&self, id: ::std::os::raw::c_int) {
        (self
            .ResumeTransfer
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn AbortTransfer(&self, id: ::std::os::raw::c_int) {
        (self
            .AbortTransfer
            .as_ref()
            .expect("Expected function, got error."))(id)
    }
    pub unsafe fn NetError(&self, e: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char {
        (self
            .NetError
            .as_ref()
            .expect("Expected function, got error."))(e)
    }
    pub unsafe fn NetErrorMessage(&self, e: ::std::os::raw::c_int) {
        (self
            .NetErrorMessage
            .as_ref()
            .expect("Expected function, got error."))(e)
    }
    pub unsafe fn GetA2dpStatus(&self) -> ::std::os::raw::c_int {
        (self
            .GetA2dpStatus
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetPort(&self, port: ::std::os::raw::c_int) {
        (self
            .SetPort
            .as_ref()
            .expect("Expected function, got error."))(port)
    }
    pub unsafe fn GetTouchInfoI(&self, index: ::std::os::raw::c_uint) -> *mut iv_mtinfo {
        (self
            .GetTouchInfoI
            .as_ref()
            .expect("Expected function, got error."))(index)
    }
    pub unsafe fn GetTouchContainerLength(
        &self,
        index: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .GetTouchContainerLength
            .as_ref()
            .expect("Expected function, got error."))(index)
    }
    pub unsafe fn GetTouchSection(
        &self,
        index: ::std::os::raw::c_uint,
        section: ::std::os::raw::c_uint,
    ) -> *mut iv_mtinfo_section {
        (self
            .GetTouchSection
            .as_ref()
            .expect("Expected function, got error."))(index, section)
    }
    pub unsafe fn GetLastTouchSection(
        &self,
        index: ::std::os::raw::c_uint,
    ) -> *mut iv_mtinfo_section {
        (self
            .GetLastTouchSection
            .as_ref()
            .expect("Expected function, got error."))(index)
    }
    pub unsafe fn PopTouchSection(
        &self,
        index: ::std::os::raw::c_uint,
        count: *mut ::std::os::raw::c_uint,
    ) -> *mut iv_mtinfo_section {
        (self
            .PopTouchSection
            .as_ref()
            .expect("Expected function, got error."))(index, count)
    }
    pub unsafe fn QueryHeadphone(&self) -> ::std::os::raw::c_int {
        (self
            .QueryHeadphone
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn wpa_passphrase(
        &self,
        ssid: *mut ::std::os::raw::c_char,
        passphrase: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .wpa_passphrase
            .as_ref()
            .expect("Expected function, got error."))(ssid, passphrase)
    }
    pub unsafe fn iv_strcmp(
        &self,
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_strcmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2)
    }
    pub unsafe fn iv_strncmp(
        &self,
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_strncmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2, n)
    }
    pub unsafe fn iv_strcasecmp(
        &self,
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_strcasecmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2)
    }
    pub unsafe fn iv_strncasecmp(
        &self,
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_strncasecmp
            .as_ref()
            .expect("Expected function, got error."))(s1, s2, n)
    }
    pub unsafe fn escape(
        &self,
        val: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self.escape.as_ref().expect("Expected function, got error."))(val, buf, size)
    }
    pub unsafe fn unescape(
        &self,
        val: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .unescape
            .as_ref()
            .expect("Expected function, got error."))(val, buf, size)
    }
    pub unsafe fn url_decode(
        &self,
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
    ) {
        (self
            .url_decode
            .as_ref()
            .expect("Expected function, got error."))(dst, src)
    }
    pub unsafe fn trim_right(&self, s: *mut ::std::os::raw::c_char) {
        (self
            .trim_right
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn get_encoding_table(
        &self,
        enc: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_ushort {
        (self
            .get_encoding_table
            .as_ref()
            .expect("Expected function, got error."))(enc)
    }
    pub unsafe fn convert_to_utf(
        &self,
        src: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        destsize: ::std::os::raw::c_int,
        enc: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .convert_to_utf
            .as_ref()
            .expect("Expected function, got error."))(src, dest, destsize, enc)
    }
    pub unsafe fn utf2ucs(
        &self,
        s: *const ::std::os::raw::c_char,
        us: *mut ::std::os::raw::c_ushort,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .utf2ucs
            .as_ref()
            .expect("Expected function, got error."))(s, us, maxlen)
    }
    pub unsafe fn utf2ucsEx(
        &self,
        s: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        us: *mut ::std::os::raw::c_ushort,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .utf2ucsEx
            .as_ref()
            .expect("Expected function, got error."))(s, len, us, maxlen)
    }
    pub unsafe fn utf2ucs4(
        &self,
        s: *const ::std::os::raw::c_char,
        us: *mut ::std::os::raw::c_uint,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .utf2ucs4
            .as_ref()
            .expect("Expected function, got error."))(s, us, maxlen)
    }
    pub unsafe fn ucs2utf(
        &self,
        us: *const ::std::os::raw::c_ushort,
        s: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .ucs2utf
            .as_ref()
            .expect("Expected function, got error."))(us, s, maxlen)
    }
    pub unsafe fn utf_toupper_ext(
        &self,
        src: *mut ::std::os::raw::c_char,
        src_len: ::std::os::raw::c_int,
        dest: *mut *mut ::std::os::raw::c_char,
        dest_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .utf_toupper_ext
            .as_ref()
            .expect("Expected function, got error."))(src, src_len, dest, dest_len)
    }
    pub unsafe fn utf_tolower_ext(
        &self,
        src: *mut ::std::os::raw::c_char,
        src_len: ::std::os::raw::c_int,
        dest: *mut *mut ::std::os::raw::c_char,
        dest_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .utf_tolower_ext
            .as_ref()
            .expect("Expected function, got error."))(src, src_len, dest, dest_len)
    }
    pub unsafe fn md5sum(
        &self,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        digest: *mut ::std::os::raw::c_uchar,
    ) {
        (self.md5sum.as_ref().expect("Expected function, got error."))(data, len, digest)
    }
    pub unsafe fn base64_encode(
        &self,
        in_: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .base64_encode
            .as_ref()
            .expect("Expected function, got error."))(in_, len, out)
    }
    pub unsafe fn base64_decode(
        &self,
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .base64_decode
            .as_ref()
            .expect("Expected function, got error."))(in_, out, len)
    }
    pub unsafe fn copy_file(
        &self,
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .copy_file
            .as_ref()
            .expect("Expected function, got error."))(src, dst)
    }
    pub unsafe fn move_file(
        &self,
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .move_file
            .as_ref()
            .expect("Expected function, got error."))(src, dst)
    }
    pub unsafe fn copy_file_with_af(
        &self,
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .copy_file_with_af
            .as_ref()
            .expect("Expected function, got error."))(src, dst)
    }
    pub unsafe fn move_file_with_af(
        &self,
        src: *const ::std::os::raw::c_char,
        dst: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .move_file_with_af
            .as_ref()
            .expect("Expected function, got error."))(src, dst)
    }
    pub unsafe fn unlink_file_with_af(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .unlink_file_with_af
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn recurse_action(
        &self,
        path: *const ::std::os::raw::c_char,
        proc_: iv_recurser,
        data: *mut ::std::os::raw::c_void,
        creative: ::std::os::raw::c_int,
        this_too: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .recurse_action
            .as_ref()
            .expect("Expected function, got error."))(path, proc_, data, creative, this_too)
    }
    pub unsafe fn LeaveInkViewMain(&self) {
        (self
            .LeaveInkViewMain
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IsInRect(
        &self,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        rect: *const irect,
    ) -> ::std::os::raw::c_int {
        (self
            .IsInRect
            .as_ref()
            .expect("Expected function, got error."))(x, y, rect)
    }
    pub unsafe fn MD5PartFile(
        &self,
        src: *const ::std::os::raw::c_char,
        r: *mut ::std::os::raw::c_uchar,
    ) {
        (self
            .MD5PartFile
            .as_ref()
            .expect("Expected function, got error."))(src, r)
    }
    pub unsafe fn crc32hash(
        &self,
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .crc32hash
            .as_ref()
            .expect("Expected function, got error."))(buf, len)
    }
    pub unsafe fn FastBookHash(
        &self,
        filename: *const ::std::os::raw::c_char,
        result: *mut ::std::os::raw::c_char,
        result_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .FastBookHash
            .as_ref()
            .expect("Expected function, got error."))(filename, result, result_size)
    }
    pub unsafe fn GetDialogShow(&self) -> ::std::os::raw::c_int {
        (self
            .GetDialogShow
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn SetMenuFont(&self, font: *mut ifont) {
        (self
            .SetMenuFont
            .as_ref()
            .expect("Expected function, got error."))(font)
    }
    #[doc = " \\brief Get status for obreey sync. If obreey sync is not available than status is 0"]
    pub unsafe fn iv_get_obreey_status(&self) -> ::std::os::raw::c_int {
        (self
            .iv_get_obreey_status
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn CustomDialogCreate(
        &self,
        info_bubble_type: eBubbleTypes,
        hero_name: *const ::std::os::raw::c_char,
        bubble_count: ::std::os::raw::c_int,
    ) -> *mut icustomdialog {
        (self
            .CustomDialogCreate
            .as_ref()
            .expect("Expected function, got error."))(
            info_bubble_type, hero_name, bubble_count
        )
    }
    pub unsafe fn CustomDialogRender(&self, dialog: *mut icustomdialog) {
        (self
            .CustomDialogRender
            .as_ref()
            .expect("Expected function, got error."))(dialog)
    }
    pub unsafe fn CustomDialogShow(&self, dialog: *mut icustomdialog) {
        (self
            .CustomDialogShow
            .as_ref()
            .expect("Expected function, got error."))(dialog)
    }
    pub unsafe fn CustomDialogDestroy(&self, dialog: *mut icustomdialog) {
        (self
            .CustomDialogDestroy
            .as_ref()
            .expect("Expected function, got error."))(dialog)
    }
    pub unsafe fn create_proxy_object(
        &self,
        type_: proxy_type,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        user: *const ::std::os::raw::c_char,
        pass: *const ::std::os::raw::c_char,
    ) -> *mut proxy_settings {
        (self
            .create_proxy_object
            .as_ref()
            .expect("Expected function, got error."))(type_, host, port, user, pass)
    }
    pub unsafe fn copy_proxy_object(&self, proxy: *mut proxy_settings) -> *mut proxy_settings {
        (self
            .copy_proxy_object
            .as_ref()
            .expect("Expected function, got error."))(proxy)
    }
    pub unsafe fn clean_proxy_object(&self, proxy: *mut *mut proxy_settings) {
        (self
            .clean_proxy_object
            .as_ref()
            .expect("Expected function, got error."))(proxy)
    }
    pub unsafe fn delete_proxy(&self) {
        (self
            .delete_proxy
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn set_proxy(&self, proxy: *mut proxy_settings) -> ::std::os::raw::c_int {
        (self
            .set_proxy
            .as_ref()
            .expect("Expected function, got error."))(proxy)
    }
    pub unsafe fn get_proxy(&self) -> *mut proxy_settings {
        (self
            .get_proxy
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetNetInfo(
        &self,
        interface: *const network_interface,
    ) -> *mut network_interface_info {
        (self
            .GetNetInfo
            .as_ref()
            .expect("Expected function, got error."))(interface)
    }
    pub unsafe fn GetNetGateway(
        &self,
        interface: *const network_interface,
    ) -> *mut network_interface {
        (self
            .GetNetGateway
            .as_ref()
            .expect("Expected function, got error."))(interface)
    }
    pub unsafe fn GetNetDNS(&self) -> *mut network_interface_array {
        (self
            .GetNetDNS
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetNetSignalQuality(&self) -> ::std::os::raw::c_int {
        (self
            .GetNetSignalQuality
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetNetState(&self) -> NET_STATE {
        (self
            .GetNetState
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetLastNetConnectionError(&self) -> ::std::os::raw::c_int {
        (self
            .GetLastNetConnectionError
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn NetMgr(&self, status: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.NetMgr.as_ref().expect("Expected function, got error."))(status)
    }
    pub unsafe fn NetMgrStatus(&self) -> ::std::os::raw::c_int {
        (self
            .NetMgrStatus
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn NetMgrPing(&self) -> ::std::os::raw::c_int {
        (self
            .NetMgrPing
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetNetList(&self, path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .GetNetList
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn NetAdd(&self, path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.NetAdd.as_ref().expect("Expected function, got error."))(path)
    }
    pub unsafe fn NetDelete(&self, path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .NetDelete
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn NetDelete_by_ssid(
        &self,
        ssid: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .NetDelete_by_ssid
            .as_ref()
            .expect("Expected function, got error."))(ssid)
    }
    pub unsafe fn NetSelect(&self, path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self
            .NetSelect
            .as_ref()
            .expect("Expected function, got error."))(path)
    }
    pub unsafe fn NetSelect_by_ssid(
        &self,
        ssid: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .NetSelect_by_ssid
            .as_ref()
            .expect("Expected function, got error."))(ssid)
    }
    pub unsafe fn CoverCachePut(
        &self,
        storage: COVERCACHE_STORAGES,
        file_path: *const ::std::os::raw::c_char,
        bmp: *mut ibitmap,
    ) -> ::std::os::raw::c_int {
        (self
            .CoverCachePut
            .as_ref()
            .expect("Expected function, got error."))(storage, file_path, bmp)
    }
    pub unsafe fn CoverCacheGet(
        &self,
        storage: COVERCACHE_STORAGES,
        file_path: *const ::std::os::raw::c_char,
    ) -> *mut ibitmap {
        (self
            .CoverCacheGet
            .as_ref()
            .expect("Expected function, got error."))(storage, file_path)
    }
    pub unsafe fn PostponeTimedPoweroff(&self) -> ::std::os::raw::c_int {
        (self
            .PostponeTimedPoweroff
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn arc_filename(
        &self,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .arc_filename
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn get_partner_id(&self) -> *const ::std::os::raw::c_char {
        (self
            .get_partner_id
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_keylock(&self) -> ::std::os::raw::c_int {
        (self
            .get_keylock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn is_enough_free_space(&self) -> ::std::os::raw::c_int {
        (self
            .is_enough_free_space
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_file_extension(
        &self,
        filename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char {
        (self
            .get_file_extension
            .as_ref()
            .expect("Expected function, got error."))(filename)
    }
    pub unsafe fn get_screen_dpi(&self) -> ::std::os::raw::c_int {
        (self
            .get_screen_dpi
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn get_screen_scale_factor(&self) -> f64 {
        (self
            .get_screen_scale_factor
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn DebugResourceBitmaps_trackBitmapCreation(
        &self,
        name: *const ::std::os::raw::c_char,
        bmp: *const ibitmap,
    ) {
        (self
            .DebugResourceBitmaps_trackBitmapCreation
            .as_ref()
            .expect("Expected function, got error."))(name, bmp)
    }
    pub unsafe fn DebugResourceBitmaps_trackBitmapDrawing(
        &self,
        bmp: *const ibitmap,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) {
        (self
            .DebugResourceBitmaps_trackBitmapDrawing
            .as_ref()
            .expect("Expected function, got error."))(bmp, x, y)
    }
    pub unsafe fn DebugResourceBitmaps_generateReport(
        &self,
        filename: *const ::std::os::raw::c_char,
    ) {
        (self
            .DebugResourceBitmaps_generateReport
            .as_ref()
            .expect("Expected function, got error."))(filename)
    }
    pub unsafe fn DebugResourceBitmaps_trackBitmapCopy(
        &self,
        from: *const ibitmap,
        to: *const ibitmap,
    ) {
        (self
            .DebugResourceBitmaps_trackBitmapCopy
            .as_ref()
            .expect("Expected function, got error."))(from, to)
    }
    pub unsafe fn CopyBitmapNoTrack(&self, bm: *const ibitmap) -> *mut ibitmap {
        (self
            .CopyBitmapNoTrack
            .as_ref()
            .expect("Expected function, got error."))(bm)
    }
    pub unsafe fn DebugResourceBitmaps_isEnabled(&self) -> ::std::os::raw::c_int {
        (self
            .DebugResourceBitmaps_isEnabled
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn isHighPriorityJobRunning(&self) -> ::std::os::raw::c_int {
        (self
            .isHighPriorityJobRunning
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn startHighPriorityJob(
        &self,
        job_id: ::std::os::raw::c_int,
        timeout_sec: ::std::os::raw::c_int,
    ) {
        (self
            .startHighPriorityJob
            .as_ref()
            .expect("Expected function, got error."))(job_id, timeout_sec)
    }
    pub unsafe fn finishHighPriorityJob(&self, job_id: ::std::os::raw::c_int) {
        (self
            .finishHighPriorityJob
            .as_ref()
            .expect("Expected function, got error."))(job_id)
    }
    pub unsafe fn iv_usleep(&self, __useconds: __useconds_t) -> ::std::os::raw::c_int {
        (self
            .iv_usleep
            .as_ref()
            .expect("Expected function, got error."))(__useconds)
    }
    pub unsafe fn set_usleep_func(&self, f: usleep_func_t) -> ::std::os::raw::c_int {
        (self
            .set_usleep_func
            .as_ref()
            .expect("Expected function, got error."))(f)
    }
    pub unsafe fn IsUpdateInProcess(&self) -> ::std::os::raw::c_int {
        (self
            .IsUpdateInProcess
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn PendingHwEventsCount(&self) -> ::std::os::raw::c_int {
        (self
            .PendingHwEventsCount
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn configureAudioOutput(&self) -> ::std::os::raw::c_int {
        (self
            .configureAudioOutput
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief setAvrcpMetadata - set properties to be visible through avrcp\n @param path\n @param length - track length in sec\n @param title\n @param artist\n @param album\n @param genre"]
    pub unsafe fn setAvrcpMetadata(
        &self,
        path: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        artist: *const ::std::os::raw::c_char,
        album: *const ::std::os::raw::c_char,
        genre: *const ::std::os::raw::c_char,
    ) {
        (self
            .setAvrcpMetadata
            .as_ref()
            .expect("Expected function, got error."))(
            path, length, title, artist, album, genre
        )
    }
    #[doc = " @brief get_audio_status (this function can take some time)\n @param status\n @return 1 - on success"]
    pub unsafe fn get_audio_status(&self, status: *mut audio_output_info) -> ::std::os::raw::c_int {
        (self
            .get_audio_status
            .as_ref()
            .expect("Expected function, got error."))(status)
    }
    pub unsafe fn setNeedAvrcpFocus(&self, need: ::std::os::raw::c_int) {
        (self
            .setNeedAvrcpFocus
            .as_ref()
            .expect("Expected function, got error."))(need)
    }
    pub unsafe fn haveAvrcpFocus(&self) -> ::std::os::raw::c_int {
        (self
            .haveAvrcpFocus
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn getAvrcpFocusPid(&self) -> ::std::os::raw::c_int {
        (self
            .getAvrcpFocusPid
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn setTaskOomPriority(&self, value: TaskOomPriority) -> ::std::os::raw::c_int {
        (self
            .setTaskOomPriority
            .as_ref()
            .expect("Expected function, got error."))(value)
    }
    pub unsafe fn getDDRMemoryInfo(
        &self,
        total: *mut ::std::os::raw::c_int,
        free: *mut ::std::os::raw::c_int,
        total_swap: *mut ::std::os::raw::c_int,
        free_swap: *mut ::std::os::raw::c_int,
    ) {
        (self
            .getDDRMemoryInfo
            .as_ref()
            .expect("Expected function, got error."))(total, free, total_swap, free_swap)
    }
    pub unsafe fn needCanvasLock(&self) {
        (self
            .needCanvasLock
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn lockCanvasDrawing(&self) {
        (self
            .lockCanvasDrawing
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn unlockCanvasDrawing(&self) {
        (self
            .unlockCanvasDrawing
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn StartCustomGattService(
        &self,
        name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .StartCustomGattService
            .as_ref()
            .expect("Expected function, got error."))(name)
    }
    pub unsafe fn StopCustomGattService(&self) -> ::std::os::raw::c_int {
        (self
            .StopCustomGattService
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn GetCustomGattSessionStatus(
        &self,
        obj: *mut CustomGattSession,
    ) -> CustomGattSessionStatus_e {
        (self
            .GetCustomGattSessionStatus
            .as_ref()
            .expect("Expected function, got error."))(obj)
    }
    pub unsafe fn Connect2CustomGattService(
        &self,
        dest_mac_addr: *mut ::std::os::raw::c_char,
    ) -> *mut CustomGattSession {
        (self
            .Connect2CustomGattService
            .as_ref()
            .expect("Expected function, got error."))(dest_mac_addr)
    }
    pub unsafe fn CloseCustomGattConnection(
        &self,
        s: *mut CustomGattSession,
    ) -> ::std::os::raw::c_int {
        (self
            .CloseCustomGattConnection
            .as_ref()
            .expect("Expected function, got error."))(s)
    }
    pub unsafe fn ReadCustomGattService(
        &self,
        obj: *mut CustomGattSession,
        data: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        (self
            .ReadCustomGattService
            .as_ref()
            .expect("Expected function, got error."))(obj, data)
    }
    pub unsafe fn WriteCustomGattService(
        &self,
        obj: *mut CustomGattSession,
        data: *const ::std::os::raw::c_char,
        data_len: usize,
    ) -> ::std::os::raw::c_int {
        (self
            .WriteCustomGattService
            .as_ref()
            .expect("Expected function, got error."))(obj, data, data_len)
    }
    pub unsafe fn StartScanBTLE(
        &self,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                cb_data: *mut ::std::os::raw::c_void,
                mac: *const ::std::os::raw::c_char,
                name: *const ::std::os::raw::c_char,
            ),
        >,
        cb_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int {
        (self
            .StartScanBTLE
            .as_ref()
            .expect("Expected function, got error."))(cb, cb_data)
    }
    pub unsafe fn StopScanBTLE(&self) -> ::std::os::raw::c_int {
        (self
            .StopScanBTLE
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ReadConfigStorage(
        &self,
        num: ConfigStorageSlot_t,
        data: *mut ::std::os::raw::c_void,
        data_size: *mut usize,
        sert: *mut ConfigStorageSert,
    ) -> ::std::os::raw::c_int {
        (self
            .ReadConfigStorage
            .as_ref()
            .expect("Expected function, got error."))(num, data, data_size, sert)
    }
    pub unsafe fn WriteConfigStorage(
        &self,
        num: ConfigStorageSlot_t,
        data: *mut ::std::os::raw::c_void,
        data_size: usize,
        sert: ConfigStorageSert,
    ) -> ::std::os::raw::c_int {
        (self
            .WriteConfigStorage
            .as_ref()
            .expect("Expected function, got error."))(num, data, data_size, sert)
    }
    pub unsafe fn design_to_pixel(&self, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .design_to_pixel
            .as_ref()
            .expect("Expected function, got error."))(v)
    }
    pub unsafe fn GetSoftwareLocalizationType(&self) -> software_localization_type {
        (self
            .GetSoftwareLocalizationType
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn LocalizationTypeToStr(
        &self,
        type_: software_localization_type,
    ) -> *const ::std::os::raw::c_char {
        (self
            .LocalizationTypeToStr
            .as_ref()
            .expect("Expected function, got error."))(type_)
    }
    pub unsafe fn iv_debug_mode(&self) -> bool {
        (self
            .iv_debug_mode
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_exit_on_error(&self) -> bool {
        (self
            .iv_exit_on_error
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief GetTimeDiffInDays\n return count of days between to timestamp (according to calendar)"]
    pub unsafe fn IvGetTimeDiffInDays(
        &self,
        t: *mut tm,
        current_time: *mut tm,
    ) -> ::std::os::raw::c_int {
        (self
            .IvGetTimeDiffInDays
            .as_ref()
            .expect("Expected function, got error."))(t, current_time)
    }
    #[doc = " time"]
    pub unsafe fn IvTimeToRelativeHumanDate(
        &self,
        output: *mut ::std::os::raw::c_char,
        buffer_size: usize,
        time: *mut tm,
        current_time: *mut tm,
    ) -> ::std::os::raw::c_int {
        (self
            .IvTimeToRelativeHumanDate
            .as_ref()
            .expect("Expected function, got error."))(
            output, buffer_size, time, current_time
        )
    }
    #[doc = " @brief IvReleaseTime\n @return release time of current firmware"]
    pub unsafe fn IvReleaseTime(&self) -> time_t {
        (self
            .IvReleaseTime
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn iv_sleep_preventor_start(&self, sleep_preventor: *mut iv_sleep_preventor_t) {
        (self
            .iv_sleep_preventor_start
            .as_ref()
            .expect("Expected function, got error."))(sleep_preventor)
    }
    pub unsafe fn iv_sleep_preventor_stop(&self, sleep_preventor: *mut iv_sleep_preventor_t) {
        (self
            .iv_sleep_preventor_stop
            .as_ref()
            .expect("Expected function, got error."))(sleep_preventor)
    }
    #[doc = " @brief iv_math_{max,min}{d,i,f} standart max/min functions`"]
    pub unsafe fn iv_math_minf(&self, a: f32, b: f32) -> ::std::os::raw::c_int {
        (self
            .iv_math_minf
            .as_ref()
            .expect("Expected function, got error."))(a, b)
    }
    pub unsafe fn iv_math_maxf(&self, a: f32, b: f32) -> ::std::os::raw::c_int {
        (self
            .iv_math_maxf
            .as_ref()
            .expect("Expected function, got error."))(a, b)
    }
    pub unsafe fn iv_math_mind(&self, a: f64, b: f64) -> ::std::os::raw::c_int {
        (self
            .iv_math_mind
            .as_ref()
            .expect("Expected function, got error."))(a, b)
    }
    pub unsafe fn iv_math_maxd(&self, a: f64, b: f64) -> ::std::os::raw::c_int {
        (self
            .iv_math_maxd
            .as_ref()
            .expect("Expected function, got error."))(a, b)
    }
    pub unsafe fn iv_math_mini(
        &self,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_math_mini
            .as_ref()
            .expect("Expected function, got error."))(a, b)
    }
    pub unsafe fn iv_math_maxi(
        &self,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_math_maxi
            .as_ref()
            .expect("Expected function, got error."))(a, b)
    }
    #[doc = " @brief iv_math_map{d,i,f,s,u} converts `value` from range `{ min_in, max_in }` to range `{ min_out, max_out }`"]
    pub unsafe fn iv_math_mapf(
        &self,
        value: f32,
        min_in: f32,
        max_in: f32,
        min_out: f32,
        max_out: f32,
    ) -> f32 {
        (self
            .iv_math_mapf
            .as_ref()
            .expect("Expected function, got error."))(
            value, min_in, max_in, min_out, max_out
        )
    }
    #[doc = " @brief iv_math_mapd\n @param value - value you want to map (value must be from `min_in` to `max_in`)\n @param min_in\n @param max_in\n @param min_out\n @param max_out\n @return nan if max_in == min_in else maped value to new range (result if from `min_out` to `max_out`)"]
    pub unsafe fn iv_math_mapd(
        &self,
        value: f64,
        min_in: f64,
        max_in: f64,
        min_out: f64,
        max_out: f64,
    ) -> f64 {
        (self
            .iv_math_mapd
            .as_ref()
            .expect("Expected function, got error."))(
            value, min_in, max_in, min_out, max_out
        )
    }
    pub unsafe fn iv_math_mapi(
        &self,
        value: ::std::os::raw::c_int,
        min_in: ::std::os::raw::c_int,
        max_in: ::std::os::raw::c_int,
        min_out: ::std::os::raw::c_int,
        max_out: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_math_mapi
            .as_ref()
            .expect("Expected function, got error."))(
            value, min_in, max_in, min_out, max_out
        )
    }
    pub unsafe fn iv_math_maps(
        &self,
        value: ::std::os::raw::c_short,
        min_in: ::std::os::raw::c_short,
        max_in: ::std::os::raw::c_short,
        min_out: ::std::os::raw::c_short,
        max_out: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short {
        (self
            .iv_math_maps
            .as_ref()
            .expect("Expected function, got error."))(
            value, min_in, max_in, min_out, max_out
        )
    }
    pub unsafe fn iv_math_mapu(
        &self,
        value: ::std::os::raw::c_uint,
        min_in: ::std::os::raw::c_uint,
        max_in: ::std::os::raw::c_uint,
        min_out: ::std::os::raw::c_uint,
        max_out: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint {
        (self
            .iv_math_mapu
            .as_ref()
            .expect("Expected function, got error."))(
            value, min_in, max_in, min_out, max_out
        )
    }
    #[doc = " @brief iv_math_cross_product2{d,i,f} https://www.nagwa.com/en/explainers/175169159270/"]
    pub unsafe fn iv_math_cross_product2d(&self, p0: iv_vector2d, p1: iv_vector2d) -> f64 {
        (self
            .iv_math_cross_product2d
            .as_ref()
            .expect("Expected function, got error."))(p0, p1)
    }
    pub unsafe fn iv_math_cross_product2f(&self, p0: iv_vector2f, p1: iv_vector2f) -> f32 {
        (self
            .iv_math_cross_product2f
            .as_ref()
            .expect("Expected function, got error."))(p0, p1)
    }
    pub unsafe fn iv_math_cross_product2i(
        &self,
        p0: iv_vector2i,
        p1: iv_vector2i,
    ) -> ::std::os::raw::c_int {
        (self
            .iv_math_cross_product2i
            .as_ref()
            .expect("Expected function, got error."))(p0, p1)
    }
    #[doc = " @brief iv_add2{i,f,d} provides vector sum\n @param vector0\n @param vector1\n @return vector0 + vector1"]
    pub unsafe fn iv_add2i(&self, vector0: iv_vector2i, vector1: iv_vector2i) -> iv_vector2i {
        (self
            .iv_add2i
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_add2f(&self, vector0: iv_vector2f, vector1: iv_vector2f) -> iv_vector2f {
        (self
            .iv_add2f
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_add2d(&self, vector0: iv_vector2d, vector1: iv_vector2d) -> iv_vector2d {
        (self
            .iv_add2d
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    #[doc = " @brief iv_sub2{i,f,d} provides vector subtraction\n @param vector0\n @param vector1\n @return vector0 - vector1"]
    pub unsafe fn iv_sub2i(&self, vector0: iv_vector2i, vector1: iv_vector2i) -> iv_vector2i {
        (self
            .iv_sub2i
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_sub2f(&self, vector0: iv_vector2f, vector1: iv_vector2f) -> iv_vector2f {
        (self
            .iv_sub2f
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_sub2d(&self, vector0: iv_vector2d, vector1: iv_vector2d) -> iv_vector2d {
        (self
            .iv_sub2d
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    #[doc = " @brief iv_mul2{i,f,d} provides vector with scalar multiplication\n @param vector0\n @param scalar\n @return vector0 * scalar"]
    pub unsafe fn iv_mul2i(
        &self,
        vector: iv_vector2i,
        scalar: ::std::os::raw::c_int,
    ) -> iv_vector2i {
        (self
            .iv_mul2i
            .as_ref()
            .expect("Expected function, got error."))(vector, scalar)
    }
    pub unsafe fn iv_mul2f(&self, vector: iv_vector2f, scalar: f32) -> iv_vector2f {
        (self
            .iv_mul2f
            .as_ref()
            .expect("Expected function, got error."))(vector, scalar)
    }
    pub unsafe fn iv_mul2d(&self, vector: iv_vector2d, scalar: f64) -> iv_vector2d {
        (self
            .iv_mul2d
            .as_ref()
            .expect("Expected function, got error."))(vector, scalar)
    }
    #[doc = " @brief iv_div2i provides vector with scalar division\n @param vector0\n @param scalar\n @return vector0 / scalar"]
    pub unsafe fn iv_div2i(
        &self,
        vector: iv_vector2i,
        scalar: ::std::os::raw::c_int,
    ) -> iv_vector2i {
        (self
            .iv_div2i
            .as_ref()
            .expect("Expected function, got error."))(vector, scalar)
    }
    pub unsafe fn iv_div2f(&self, vector: iv_vector2f, scalar: f32) -> iv_vector2f {
        (self
            .iv_div2f
            .as_ref()
            .expect("Expected function, got error."))(vector, scalar)
    }
    pub unsafe fn iv_div2d(&self, vector: iv_vector2d, scalar: f64) -> iv_vector2d {
        (self
            .iv_div2d
            .as_ref()
            .expect("Expected function, got error."))(vector, scalar)
    }
    #[doc = " @brief iv_matvec_mul2{i, f, d} provides 2d matrix with vector multiplication\n @param matrix\n @param vector\n @return matrix * vector"]
    pub unsafe fn iv_matvec_mul2i(&self, matrix: iv_matrix2i, vector: iv_vector2i) -> iv_vector2i {
        (self
            .iv_matvec_mul2i
            .as_ref()
            .expect("Expected function, got error."))(matrix, vector)
    }
    pub unsafe fn iv_matvec_mul2f(&self, matrix: iv_matrix2f, vector: iv_vector2f) -> iv_vector2f {
        (self
            .iv_matvec_mul2f
            .as_ref()
            .expect("Expected function, got error."))(matrix, vector)
    }
    pub unsafe fn iv_matvec_mul2d(&self, matrix: iv_matrix2d, vector: iv_vector2d) -> iv_vector2d {
        (self
            .iv_matvec_mul2d
            .as_ref()
            .expect("Expected function, got error."))(matrix, vector)
    }
    #[doc = " @brief iv_rotvec_mul2i provides 2d rotor matrix with vector multiplication\n @param rotor matrix\n @param vector\n @param center of rotation\n @return matrix * vector"]
    pub unsafe fn iv_rotvec_mul2i(
        &self,
        matrix: iv_matrix2d,
        vector: iv_vector2i,
        center: iv_vector2i,
    ) -> iv_vector2i {
        (self
            .iv_rotvec_mul2i
            .as_ref()
            .expect("Expected function, got error."))(matrix, vector, center)
    }
    #[doc = " @brief iv_matrix_mul2{i, f, d} provides 2d matrix multiplication\n @param matrix0\n @param matrix1\n @return matrix0 * matrix1"]
    pub unsafe fn iv_matrix_mul2i(
        &self,
        matrix0: iv_matrix2i,
        matrix1: iv_matrix2i,
    ) -> iv_matrix2i {
        (self
            .iv_matrix_mul2i
            .as_ref()
            .expect("Expected function, got error."))(matrix0, matrix1)
    }
    pub unsafe fn iv_matrix_mul2f(
        &self,
        matrix0: iv_matrix2f,
        matrix1: iv_matrix2f,
    ) -> iv_matrix2f {
        (self
            .iv_matrix_mul2f
            .as_ref()
            .expect("Expected function, got error."))(matrix0, matrix1)
    }
    pub unsafe fn iv_matrix_mul2d(
        &self,
        matrix0: iv_matrix2d,
        matrix1: iv_matrix2d,
    ) -> iv_matrix2d {
        (self
            .iv_matrix_mul2d
            .as_ref()
            .expect("Expected function, got error."))(matrix0, matrix1)
    }
    #[doc = " @brief iv_matrix_from_angle2{f, d} constructs rotor 2d matrix from angle in radians\n @param angle\n @return matrix"]
    pub unsafe fn iv_matrix_from_angle2f(&self, angle: f32) -> iv_matrix2f {
        (self
            .iv_matrix_from_angle2f
            .as_ref()
            .expect("Expected function, got error."))(angle)
    }
    pub unsafe fn iv_matrix_from_angle2d(&self, angle: f64) -> iv_matrix2d {
        (self
            .iv_matrix_from_angle2d
            .as_ref()
            .expect("Expected function, got error."))(angle)
    }
    #[doc = " @brief iv_abs_vector2{i,f,d} make vector with absolute coordinated\n @param vector\n @return vector2 { |vector.x|, |vector.y| }"]
    pub unsafe fn iv_abs_vector2i(&self, vector: iv_vector2i) -> iv_vector2i {
        (self
            .iv_abs_vector2i
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn iv_abs_vector2f(&self, vector: iv_vector2f) -> iv_vector2f {
        (self
            .iv_abs_vector2f
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    pub unsafe fn iv_abs_vector2d(&self, vector: iv_vector2d) -> iv_vector2d {
        (self
            .iv_abs_vector2d
            .as_ref()
            .expect("Expected function, got error."))(vector)
    }
    #[doc = " @brief iv_avr_vector2{i,f,d} make average vector of who another\n @param vector0\n @param vector1\n @return (vector0 + vector1) / 2"]
    pub unsafe fn iv_avr_vector2i(
        &self,
        vector0: iv_vector2i,
        vector1: iv_vector2i,
    ) -> iv_vector2i {
        (self
            .iv_avr_vector2i
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_avr_vector2f(
        &self,
        vector0: iv_vector2f,
        vector1: iv_vector2f,
    ) -> iv_vector2f {
        (self
            .iv_avr_vector2f
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_avr_vector2d(
        &self,
        vector0: iv_vector2d,
        vector1: iv_vector2d,
    ) -> iv_vector2d {
        (self
            .iv_avr_vector2d
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    #[doc = " @brief iv_eq_matrix2{i,f,d} test equality of matrices\n @param matrix0\n @param matrix1\n @return true if equal"]
    pub unsafe fn iv_eq_matrix2i(&self, matrix0: iv_matrix2i, matrix1: iv_matrix2i) -> bool {
        (self
            .iv_eq_matrix2i
            .as_ref()
            .expect("Expected function, got error."))(matrix0, matrix1)
    }
    pub unsafe fn iv_eq_matrix2f(&self, matrix0: iv_matrix2f, matrix1: iv_matrix2f) -> bool {
        (self
            .iv_eq_matrix2f
            .as_ref()
            .expect("Expected function, got error."))(matrix0, matrix1)
    }
    pub unsafe fn iv_eq_matrix2d(&self, matrix0: iv_matrix2d, matrix1: iv_matrix2d) -> bool {
        (self
            .iv_eq_matrix2d
            .as_ref()
            .expect("Expected function, got error."))(matrix0, matrix1)
    }
    #[doc = " @brief iv_to_radians{f,d} converts degrees to radians\n @param degrees\n @return degrees × π / 180°"]
    pub unsafe fn iv_to_radiansf(&self, degrees: f32) -> f32 {
        (self
            .iv_to_radiansf
            .as_ref()
            .expect("Expected function, got error."))(degrees)
    }
    #[doc = " @brief iv_to_radians{f,d} converts degrees to radians\n @param degrees\n @return degrees × π / 180°"]
    pub unsafe fn iv_to_radiansd(&self, degrees: f64) -> f64 {
        (self
            .iv_to_radiansd
            .as_ref()
            .expect("Expected function, got error."))(degrees)
    }
    #[doc = " @brief iv_to_degrees{f,d} converts radians to degrees\n @param radians\n @return radians × 180° / π"]
    pub unsafe fn iv_to_degreesf(&self, radians: f32) -> f32 {
        (self
            .iv_to_degreesf
            .as_ref()
            .expect("Expected function, got error."))(radians)
    }
    #[doc = " @brief iv_to_degrees{f,d} converts radians to degrees\n @param radians\n @return radians × 180° / π"]
    pub unsafe fn iv_to_degreesd(&self, radians: f64) -> f64 {
        (self
            .iv_to_degreesd
            .as_ref()
            .expect("Expected function, got error."))(radians)
    }
    #[doc = " @brief iv_complex_add2d provides complex sum\n @param complex number 0\n @param complex number 1\n @return (r0 + r1, i0 + i1)"]
    pub unsafe fn iv_complex_add2d(&self, num0: iv_complex2d, num1: iv_complex2d) -> iv_complex2d {
        (self
            .iv_complex_add2d
            .as_ref()
            .expect("Expected function, got error."))(num0, num1)
    }
    #[doc = " @brief iv_complex_sub2d provides complex subtraction\n @param complex number 0\n @param complex number 1\n @return (r0 - r1, i0 - i1)"]
    pub unsafe fn iv_complex_sub2d(&self, num0: iv_complex2d, num1: iv_complex2d) -> iv_complex2d {
        (self
            .iv_complex_sub2d
            .as_ref()
            .expect("Expected function, got error."))(num0, num1)
    }
    #[doc = " @brief iv_complex_mul2{f,d} provides complex multiplication\n @param complex number 0\n @param complex number 1\n @return (r0 * r1 - i0 * i1, r0 * i1 + r1 * i0)"]
    pub unsafe fn iv_complex_mul2f(&self, num0: iv_complex2f, num1: iv_complex2f) -> iv_complex2f {
        (self
            .iv_complex_mul2f
            .as_ref()
            .expect("Expected function, got error."))(num0, num1)
    }
    pub unsafe fn iv_complex_mul2d(&self, num0: iv_complex2d, num1: iv_complex2d) -> iv_complex2d {
        (self
            .iv_complex_mul2d
            .as_ref()
            .expect("Expected function, got error."))(num0, num1)
    }
    #[doc = " @brief iv_complex_from_angle2d creates complex rotor from angle in radians\n @param angle\n @return cos θ + i sin θ"]
    pub unsafe fn iv_complex_from_angle2d(&self, angle: f64) -> iv_complex2d {
        (self
            .iv_complex_from_angle2d
            .as_ref()
            .expect("Expected function, got error."))(angle)
    }
    #[doc = " @brief iv_complex_from_graw_flags creates complex rotor for rotation component of draw flags\n @param flags\n @return -Pi if ROTATE else 0"]
    pub unsafe fn iv_complex_from_draw_flags(&self, flags: ::std::os::raw::c_int) -> iv_complex2d {
        (self
            .iv_complex_from_draw_flags
            .as_ref()
            .expect("Expected function, got error."))(flags)
    }
    #[doc = " @brief iv_complex_rotvec_mul2{i,f,d} rotates vector by complex rotor\n @param rotor complex namber\n @param vector to rotate\n @param center of rotation\n @return rotated vector"]
    pub unsafe fn iv_complex_rotvec_mul2i(
        &self,
        rotor: iv_complex2d,
        vector: iv_vector2i,
        center: iv_vector2i,
    ) -> iv_vector2i {
        (self
            .iv_complex_rotvec_mul2i
            .as_ref()
            .expect("Expected function, got error."))(rotor, vector, center)
    }
    #[doc = " @brief iv_complex_rotvec_mul2{i,f,d} rotates vector by complex rotor\n @param rotor complex namber\n @param vector to rotate\n @param center of rotation\n @return rotated vector"]
    pub unsafe fn iv_complex_rotvec_mul2f(
        &self,
        rotor: iv_complex2f,
        vector: iv_vector2f,
        center: iv_vector2f,
    ) -> iv_vector2f {
        (self
            .iv_complex_rotvec_mul2f
            .as_ref()
            .expect("Expected function, got error."))(rotor, vector, center)
    }
    #[doc = " @brief iv_complex_rotvec_mul2{i,f,d} rotates vector by complex rotor\n @param rotor complex namber\n @param vector to rotate\n @param center of rotation\n @return rotated vector"]
    pub unsafe fn iv_complex_rotvec_mul2d(
        &self,
        rotor: iv_complex2d,
        vector: iv_vector2d,
        center: iv_vector2d,
    ) -> iv_vector2d {
        (self
            .iv_complex_rotvec_mul2d
            .as_ref()
            .expect("Expected function, got error."))(rotor, vector, center)
    }
    #[doc = " @brief iv_eq_complex2{f,d} test equality of complex numbers\n @param num0\n @param num1\n @return true of equals"]
    pub unsafe fn iv_eq_complex2f(&self, num0: iv_complex2f, num1: iv_complex2f) -> bool {
        (self
            .iv_eq_complex2f
            .as_ref()
            .expect("Expected function, got error."))(num0, num1)
    }
    #[doc = " @brief iv_eq_complex2{f,d} test equality of complex numbers\n @param num0\n @param num1\n @return true of equals"]
    pub unsafe fn iv_eq_complex2d(&self, num0: iv_complex2d, num1: iv_complex2d) -> bool {
        (self
            .iv_eq_complex2d
            .as_ref()
            .expect("Expected function, got error."))(num0, num1)
    }
    #[doc = " @brief iv_eq_vector2{i,f,d} test equality of vectors\n @param vector0\n @param vector1\n @return true of equals"]
    pub unsafe fn iv_eq_vector2i(&self, vector0: iv_vector2i, vector1: iv_vector2i) -> bool {
        (self
            .iv_eq_vector2i
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_eq_vector2f(&self, vector0: iv_vector2f, vector1: iv_vector2f) -> bool {
        (self
            .iv_eq_vector2f
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_eq_vector2d(&self, vector0: iv_vector2d, vector1: iv_vector2d) -> bool {
        (self
            .iv_eq_vector2d
            .as_ref()
            .expect("Expected function, got error."))(vector0, vector1)
    }
    pub unsafe fn iv_eq_f(&self, scalar0: f32, scalar1: f32) -> bool {
        (self
            .iv_eq_f
            .as_ref()
            .expect("Expected function, got error."))(scalar0, scalar1)
    }
    pub unsafe fn iv_eq_d(&self, scalar0: f64, scalar1: f64) -> bool {
        (self
            .iv_eq_d
            .as_ref()
            .expect("Expected function, got error."))(scalar0, scalar1)
    }
    #[doc = " @brief iv_from_design{1,2}{i,f,d} converts pixels from design pixels to destination device pixels\n @param scalar | vector\n @return scalar | vector"]
    pub unsafe fn iv_from_design1i(&self, scalar: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self
            .iv_from_design1i
            .as_ref()
            .expect("Expected function, got error."))(scalar)
    }
    pub unsafe fn iv_from_design1f(&self, scalar: f32) -> f32 {
        (self
            .iv_from_design1f
            .as_ref()
            .expect("Expected function, got error."))(scalar)
    }
    pub unsafe fn iv_from_design1d(&self, scalar: f64) -> f64 {
        (self
            .iv_from_design1d
            .as_ref()
            .expect("Expected function, got error."))(scalar)
    }
    pub unsafe fn iv_from_design2i(&self, vec: iv_vector2i) -> iv_vector2i {
        (self
            .iv_from_design2i
            .as_ref()
            .expect("Expected function, got error."))(vec)
    }
    pub unsafe fn iv_from_design2f(&self, vec: iv_vector2f) -> iv_vector2f {
        (self
            .iv_from_design2f
            .as_ref()
            .expect("Expected function, got error."))(vec)
    }
    pub unsafe fn iv_from_design2d(&self, vec: iv_vector2d) -> iv_vector2d {
        (self
            .iv_from_design2d
            .as_ref()
            .expect("Expected function, got error."))(vec)
    }
    #[doc = " @brief iv_random_d (rand based)\n @return random number from 0 to 1"]
    pub unsafe fn iv_random_d(&self) -> f64 {
        (self
            .iv_random_d
            .as_ref()
            .expect("Expected function, got error."))()
    }
    #[doc = " @brief iv_sign2{i,f,d} returns signs (example { 20, -123 } -> { 1, -1 })\n @param vec\n @return"]
    pub unsafe fn iv_sign2i(&self, vec: iv_vector2i) -> iv_vector2i {
        (self
            .iv_sign2i
            .as_ref()
            .expect("Expected function, got error."))(vec)
    }
    pub unsafe fn iv_sign2f(&self, vec: iv_vector2f) -> iv_vector2f {
        (self
            .iv_sign2f
            .as_ref()
            .expect("Expected function, got error."))(vec)
    }
    pub unsafe fn iv_sign2d(&self, vec: iv_vector2d) -> iv_vector2d {
        (self
            .iv_sign2d
            .as_ref()
            .expect("Expected function, got error."))(vec)
    }
    pub unsafe fn IvGetScreenModeInversion(&self) -> bool {
        (self
            .IvGetScreenModeInversion
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn IvSetScreenModeInversion(&self, state: bool) {
        (self
            .IvSetScreenModeInversion
            .as_ref()
            .expect("Expected function, got error."))(state)
    }
    pub unsafe fn IvSetAppCapability(&self, caps: ::std::os::raw::c_int) {
        (self
            .IvSetAppCapability
            .as_ref()
            .expect("Expected function, got error."))(caps)
    }
    pub unsafe fn IvGetAppCapability(&self) -> ::std::os::raw::c_int {
        (self
            .IvGetAppCapability
            .as_ref()
            .expect("Expected function, got error."))()
    }
    pub unsafe fn ltrim_non_alphanum(
        &self,
        value: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        (self
            .ltrim_non_alphanum
            .as_ref()
            .expect("Expected function, got error."))(value)
    }
}
